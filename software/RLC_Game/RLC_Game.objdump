
RLC_Game.elf:     file format elf32-littlenios2
RLC_Game.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0004014c

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00000e74 memsz 0x00000e74 flags r-x
    LOAD off    0x00001e94 vaddr 0x00040e94 paddr 0x00041f44 align 2**12
         filesz 0x000010b0 memsz 0x000010b0 flags rw-
    LOAD off    0x00002ff4 vaddr 0x00042ff4 paddr 0x00042ff4 align 2**12
         filesz 0x00000000 memsz 0x00000118 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000012c  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000c24  0004014c  0004014c  0000114c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000124  00040d70  00040d70  00001d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000010b0  00040e94  00041f44  00001e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000118  00042ff4  00042ff4  00002ff4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  0004310c  0004310c  00002f44  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002f44  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000368  00000000  00000000  00002f68  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00002fd5  00000000  00000000  000032d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001778  00000000  00000000  000062a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000014f2  00000000  00000000  00007a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000498  00000000  00000000  00008f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000c05  00000000  00000000  000093a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000c20  00000000  00000000  00009fad  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000abd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  0000abe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000c0c2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000c0c5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000c0c8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000c0c9  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000c0ca  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000c0d3  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000c0dc  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000f  00000000  00000000  0000c0e5  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000026  00000000  00000000  0000c0f4  2**0
                  CONTENTS, READONLY
 26 .jdi          00004fbd  00000000  00000000  0000c11a  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00052ab1  00000000  00000000  000110d7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
0004014c l    d  .text	00000000 .text
00040d70 l    d  .rodata	00000000 .rodata
00040e94 l    d  .rwdata	00000000 .rwdata
00042ff4 l    d  .bss	00000000 .bss
0004310c l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../RLC_Game_bsp//obj/HAL/src/crt0.o
00040184 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 RLC_game.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000405f8 l     F .text	00000050 altera_avalon_jtag_uart_timeout
00040648 l     F .text	000000e8 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00040b28 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
000403a8 g     F .text	0000002c alt_main
0004300c g     O .bss	00000100 alt_irq
00041f44 g       *ABS*	00000000 __flash_rwdata_start
0004058c g     F .text	00000038 alt_putstr
00040e94 g     O .rwdata	00001038 jtag_uart
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00042ff8 g     O .bss	00000004 alt_argv
00049f24 g       *ABS*	00000000 _gp
00041ecc g     O .rwdata	00000030 alt_fd_list
00040d2c g     F .text	00000028 memcpy
000407e0 g     F .text	00000140 altera_avalon_jtag_uart_read
00041f24 g     O .rwdata	00000004 alt_max_fd
0004310c g       *ABS*	00000000 __bss_end
00040bd0 g     F .text	00000068 alt_iic_isr_register
00040284 g     F .text	00000044 alt_getchar
00040c6c g     F .text	000000b8 alt_tick
00040bb8 g     F .text	00000018 alt_ic_irq_enabled
00040c38 g     F .text	00000034 alt_alarm_stop
00043000 g     O .bss	00000004 alt_irq_active
00040000 g       *ABS*	00000000 __alt_mem_onchip_mem
000400ec g     F .exceptions	00000060 alt_irq_handler
00041efc g     O .rwdata	00000028 alt_dev_null
00040b24 g     F .text	00000004 alt_dcache_flush_all
00041f44 g       *ABS*	00000000 __ram_rwdata_end
00041f28 g     O .rwdata	00000008 alt_dev_list
00040e94 g       *ABS*	00000000 __ram_rodata_end
0004310c g       *ABS*	00000000 end
00040730 g     F .text	00000080 altera_avalon_jtag_uart_init
00070d40 g       *ABS*	00000000 __alt_stack_pointer
00040920 g     F .text	00000170 altera_avalon_jtag_uart_write
000403d4 g     F .text	00000170 alt_printf
0004014c g     F .text	0000003c _start
00043008 g     O .bss	00000004 _alt_tick_rate
00043004 g     O .bss	00000004 _alt_nticks
000405e4 g     F .text	00000014 alt_sys_init
000407b0 g     F .text	00000030 altera_avalon_jtag_uart_close
00040e94 g       *ABS*	00000000 __ram_rwdata_start
00040d70 g       *ABS*	00000000 __ram_rodata_start
0004310c g       *ABS*	00000000 __alt_stack_base
00042ff4 g       *ABS*	00000000 __bss_start
00040188 g     F .text	000000fc main
00042ff4 g     O .bss	00000004 alt_envp
00040d70 g       *ABS*	00000000 __flash_rodata_start
000405c4 g     F .text	00000020 alt_irq_init
00042ffc g     O .bss	00000004 alt_argc
00040020 g       .exceptions	00000000 alt_irq_entry
00041f30 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00040b34 g     F .text	00000004 alt_ic_isr_register
00041f44 g       *ABS*	00000000 _edata
0004310c g       *ABS*	00000000 _end
0004014c g       *ABS*	00000000 __ram_exceptions_end
00040b78 g     F .text	00000040 alt_ic_irq_disable
00040d24 g     F .text	00000008 altera_nios2_qsys_irq_init
00070d40 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004000c g       .entry	00000000 _exit
00040a90 g     F .text	00000094 alt_alarm_start
00040d54 g     F .text	0000001c strlen
00040544 g     F .text	00000048 alt_putchar
00040b30 g     F .text	00000004 alt_icache_flush_all
00041f38 g     O .rwdata	00000004 alt_priority_mask
00040b38 g     F .text	00000040 alt_ic_irq_enable
00041f3c g     O .rwdata	00000008 alt_alarm_list
000402c8 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08405314 	ori	at,at,332
    jmp r1
   40008:	0800683a 	jmp	at

0004000c <_exit>:
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defffe04 	addi	sp,sp,-8
   400f0:	dfc00115 	stw	ra,4(sp)
   400f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   400f8:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   400fc:	04000134 	movhi	r16,4
   40100:	840c0304 	addi	r16,r16,12300

  active = alt_irq_pending ();

  do
  {
    i = 0;
   40104:	0005883a 	mov	r2,zero
    mask = 1;
   40108:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4010c:	20ca703a 	and	r5,r4,r3
   40110:	28000b26 	beq	r5,zero,40140 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   40114:	100490fa 	slli	r2,r2,3
   40118:	8085883a 	add	r2,r16,r2
   4011c:	10c00017 	ldw	r3,0(r2)
   40120:	11000117 	ldw	r4,4(r2)
   40124:	183ee83a 	callr	r3
   40128:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   4012c:	203ff51e 	bne	r4,zero,40104 <__alt_data_end+0xfffcf3c4>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   40130:	dfc00117 	ldw	ra,4(sp)
   40134:	dc000017 	ldw	r16,0(sp)
   40138:	dec00204 	addi	sp,sp,8
   4013c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40140:	18c7883a 	add	r3,r3,r3
      i++;
   40144:	10800044 	addi	r2,r2,1

    } while (1);
   40148:	003ff006 	br	4010c <__alt_data_end+0xfffcf3cc>

Disassembly of section .text:

0004014c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   4014c:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40150:	dec35014 	ori	sp,sp,3392
    movhi gp, %hi(_gp)
   40154:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   40158:	d6a7c914 	ori	gp,gp,40740
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   4015c:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40160:	108bfd14 	ori	r2,r2,12276

    movhi r3, %hi(__bss_end)
   40164:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40168:	18cc4314 	ori	r3,r3,12556

    beq r2, r3, 1f
   4016c:	10c00326 	beq	r2,r3,4017c <_start+0x30>

0:
    stw zero, (r2)
   40170:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40174:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40178:	10fffd36 	bltu	r2,r3,40170 <__alt_data_end+0xfffcf430>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   4017c:	00402c80 	call	402c8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40180:	00403a80 	call	403a8 <alt_main>

00040184 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40184:	003fff06 	br	40184 <__alt_data_end+0xfffcf444>

00040188 <main>:
//#define inputData (volatile char *) 0x0002010
//#define outputData (char *) 0x00081030


int main()
{ 
   40188:	defffc04 	addi	sp,sp,-16
  alt_putstr("Serial communication test application has begun!\n");
   4018c:	01000134 	movhi	r4,4
//#define inputData (volatile char *) 0x0002010
//#define outputData (char *) 0x00081030


int main()
{ 
   40190:	dc400115 	stw	r17,4(sp)
   40194:	dc000015 	stw	r16,0(sp)
  alt_putstr("Serial communication test application has begun!\n");
   40198:	21035c04 	addi	r4,r4,3440
  char c;
  /* Event loop never exits. */
  while (1){
	  alt_putstr("Enter a character to send over serial interface!\n");
	  c = alt_getchar();
	  IOWR_ALTERA_AVALON_PIO_DATA(0x00081040, c); //store character in outputData register
   4019c:	04000234 	movhi	r16,8
	  IOWR_ALTERA_AVALON_PIO_DATA(0x00081020, 0b1); //begin data transfer
   401a0:	04400234 	movhi	r17,8
//#define inputData (volatile char *) 0x0002010
//#define outputData (char *) 0x00081030


int main()
{ 
   401a4:	dfc00315 	stw	ra,12(sp)
   401a8:	dc800215 	stw	r18,8(sp)
  char c;
  /* Event loop never exits. */
  while (1){
	  alt_putstr("Enter a character to send over serial interface!\n");
	  c = alt_getchar();
	  IOWR_ALTERA_AVALON_PIO_DATA(0x00081040, c); //store character in outputData register
   401ac:	84041004 	addi	r16,r16,4160
//#define outputData (char *) 0x00081030


int main()
{ 
  alt_putstr("Serial communication test application has begun!\n");
   401b0:	004058c0 	call	4058c <alt_putstr>
  /* Event loop never exits. */
  while (1){
	  alt_putstr("Enter a character to send over serial interface!\n");
	  c = alt_getchar();
	  IOWR_ALTERA_AVALON_PIO_DATA(0x00081040, c); //store character in outputData register
	  IOWR_ALTERA_AVALON_PIO_DATA(0x00081020, 0b1); //begin data transfer
   401b4:	8c440804 	addi	r17,r17,4128
	  IOWR_ALTERA_AVALON_PIO_DATA(0x00081020, 0b0); //disable data transfer
	  alt_putstr("Enter 'Y' to read data being stored in outputData register!\n");
	  c = alt_getchar();
	  if (c == 'Y'){
   401b8:	04801644 	movi	r18,89
{ 
  alt_putstr("Serial communication test application has begun!\n");
  char c;
  /* Event loop never exits. */
  while (1){
	  alt_putstr("Enter a character to send over serial interface!\n");
   401bc:	01000134 	movhi	r4,4
   401c0:	21036904 	addi	r4,r4,3492
   401c4:	004058c0 	call	4058c <alt_putstr>
	  c = alt_getchar();
   401c8:	00402840 	call	40284 <alt_getchar>
	  IOWR_ALTERA_AVALON_PIO_DATA(0x00081040, c); //store character in outputData register
   401cc:	10803fcc 	andi	r2,r2,255
   401d0:	1080201c 	xori	r2,r2,128
   401d4:	10bfe004 	addi	r2,r2,-128
   401d8:	80800035 	stwio	r2,0(r16)
	  IOWR_ALTERA_AVALON_PIO_DATA(0x00081020, 0b1); //begin data transfer
   401dc:	00800044 	movi	r2,1
   401e0:	88800035 	stwio	r2,0(r17)
	  IOWR_ALTERA_AVALON_PIO_DATA(0x00081020, 0b0); //disable data transfer
   401e4:	88000035 	stwio	zero,0(r17)
	  alt_putstr("Enter 'Y' to read data being stored in outputData register!\n");
   401e8:	01000134 	movhi	r4,4
   401ec:	21037604 	addi	r4,r4,3544
   401f0:	004058c0 	call	4058c <alt_putstr>
	  c = alt_getchar();
   401f4:	00402840 	call	40284 <alt_getchar>
	  if (c == 'Y'){
   401f8:	10803fcc 	andi	r2,r2,255
   401fc:	1080201c 	xori	r2,r2,128
   40200:	10bfe004 	addi	r2,r2,-128
   40204:	14800a1e 	bne	r2,r18,40230 <main+0xa8>
		  alt_putstr("Stored outputData is:\n");
   40208:	01000134 	movhi	r4,4
   4020c:	21038604 	addi	r4,r4,3608
   40210:	004058c0 	call	4058c <alt_putstr>
		  c = IORD_ALTERA_AVALON_PIO_DATA(0x00081040);
   40214:	81400037 	ldwio	r5,0(r16)
		  alt_printf("%c\n",c);
   40218:	01000134 	movhi	r4,4
   4021c:	29403fcc 	andi	r5,r5,255
   40220:	2940201c 	xori	r5,r5,128
   40224:	297fe004 	addi	r5,r5,-128
   40228:	21038c04 	addi	r4,r4,3632
   4022c:	00403d40 	call	403d4 <alt_printf>
	  }
	  alt_putstr("Enter 'Y' to read data being stored in inputData register!\n");
   40230:	01000134 	movhi	r4,4
   40234:	21038d04 	addi	r4,r4,3636
   40238:	004058c0 	call	4058c <alt_putstr>
	  c = alt_getchar();
   4023c:	00402840 	call	40284 <alt_getchar>
	  if (c == 'Y'){
   40240:	10803fcc 	andi	r2,r2,255
   40244:	1080201c 	xori	r2,r2,128
   40248:	10bfe004 	addi	r2,r2,-128
   4024c:	14bfdb1e 	bne	r2,r18,401bc <__alt_data_end+0xfffcf47c>
		  alt_putstr("Stored inputData is:\n");
   40250:	01000134 	movhi	r4,4
   40254:	21039c04 	addi	r4,r4,3696
   40258:	004058c0 	call	4058c <alt_putstr>
		  c = IORD_ALTERA_AVALON_PIO_DATA(0x00081060);
   4025c:	00800234 	movhi	r2,8
   40260:	10841804 	addi	r2,r2,4192
   40264:	11400037 	ldwio	r5,0(r2)
		  alt_printf("%c\n",c);
   40268:	01000134 	movhi	r4,4
   4026c:	29403fcc 	andi	r5,r5,255
   40270:	2940201c 	xori	r5,r5,128
   40274:	297fe004 	addi	r5,r5,-128
   40278:	21038c04 	addi	r4,r4,3632
   4027c:	00403d40 	call	403d4 <alt_printf>
   40280:	003fcd06 	br	401b8 <__alt_data_end+0xfffcf478>

00040284 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   40284:	00800134 	movhi	r2,4
   40288:	1087b304 	addi	r2,r2,7884
   4028c:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   40290:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   40294:	01000134 	movhi	r4,4
   40298:	01800044 	movi	r6,1
   4029c:	d80b883a 	mov	r5,sp
   402a0:	2103a504 	addi	r4,r4,3732
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   402a4:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   402a8:	00407e00 	call	407e0 <altera_avalon_jtag_uart_read>
   402ac:	0080020e 	bge	zero,r2,402b8 <alt_getchar+0x34>
        return -1;
    }
    return c;
   402b0:	d8800007 	ldb	r2,0(sp)
   402b4:	00000106 	br	402bc <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
   402b8:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
   402bc:	dfc00117 	ldw	ra,4(sp)
   402c0:	dec00204 	addi	sp,sp,8
   402c4:	f800283a 	ret

000402c8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   402c8:	deffff04 	addi	sp,sp,-4
   402cc:	01000134 	movhi	r4,4
   402d0:	01400134 	movhi	r5,4
   402d4:	dfc00015 	stw	ra,0(sp)
   402d8:	2103a504 	addi	r4,r4,3732
   402dc:	2947d104 	addi	r5,r5,8004

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   402e0:	2140061e 	bne	r4,r5,402fc <alt_load+0x34>
   402e4:	01000134 	movhi	r4,4
   402e8:	01400134 	movhi	r5,4
   402ec:	21000804 	addi	r4,r4,32
   402f0:	29400804 	addi	r5,r5,32
   402f4:	2140121e 	bne	r4,r5,40340 <alt_load+0x78>
   402f8:	00000b06 	br	40328 <alt_load+0x60>
   402fc:	00c00134 	movhi	r3,4
   40300:	18c7d104 	addi	r3,r3,8004
   40304:	1907c83a 	sub	r3,r3,r4
   40308:	0005883a 	mov	r2,zero
  {
    while( to != end )
   4030c:	10fff526 	beq	r2,r3,402e4 <__alt_data_end+0xfffcf5a4>
    {
      *to++ = *from++;
   40310:	114f883a 	add	r7,r2,r5
   40314:	39c00017 	ldw	r7,0(r7)
   40318:	110d883a 	add	r6,r2,r4
   4031c:	10800104 	addi	r2,r2,4
   40320:	31c00015 	stw	r7,0(r6)
   40324:	003ff906 	br	4030c <__alt_data_end+0xfffcf5cc>
   40328:	01000134 	movhi	r4,4
   4032c:	01400134 	movhi	r5,4
   40330:	21035c04 	addi	r4,r4,3440
   40334:	29435c04 	addi	r5,r5,3440

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   40338:	2140101e 	bne	r4,r5,4037c <alt_load+0xb4>
   4033c:	00000b06 	br	4036c <alt_load+0xa4>
   40340:	00c00134 	movhi	r3,4
   40344:	18c05304 	addi	r3,r3,332
   40348:	1907c83a 	sub	r3,r3,r4
   4034c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   40350:	10fff526 	beq	r2,r3,40328 <__alt_data_end+0xfffcf5e8>
    {
      *to++ = *from++;
   40354:	114f883a 	add	r7,r2,r5
   40358:	39c00017 	ldw	r7,0(r7)
   4035c:	110d883a 	add	r6,r2,r4
   40360:	10800104 	addi	r2,r2,4
   40364:	31c00015 	stw	r7,0(r6)
   40368:	003ff906 	br	40350 <__alt_data_end+0xfffcf610>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4036c:	0040b240 	call	40b24 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   40370:	dfc00017 	ldw	ra,0(sp)
   40374:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   40378:	0040b301 	jmpi	40b30 <alt_icache_flush_all>
   4037c:	00c00134 	movhi	r3,4
   40380:	18c3a504 	addi	r3,r3,3732
   40384:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   40388:	0005883a 	mov	r2,zero
  {
    while( to != end )
   4038c:	18bff726 	beq	r3,r2,4036c <__alt_data_end+0xfffcf62c>
    {
      *to++ = *from++;
   40390:	114f883a 	add	r7,r2,r5
   40394:	39c00017 	ldw	r7,0(r7)
   40398:	110d883a 	add	r6,r2,r4
   4039c:	10800104 	addi	r2,r2,4
   403a0:	31c00015 	stw	r7,0(r6)
   403a4:	003ff906 	br	4038c <__alt_data_end+0xfffcf64c>

000403a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   403a8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   403ac:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   403b0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   403b4:	00405c40 	call	405c4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   403b8:	00405e40 	call	405e4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   403bc:	d1a43417 	ldw	r6,-28464(gp)
   403c0:	d1643517 	ldw	r5,-28460(gp)
   403c4:	d1243617 	ldw	r4,-28456(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   403c8:	dfc00017 	ldw	ra,0(sp)
   403cc:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   403d0:	00401881 	jmpi	40188 <main>

000403d4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   403d4:	defff204 	addi	sp,sp,-56
   403d8:	2005883a 	mov	r2,r4
   403dc:	dfc00a15 	stw	ra,40(sp)
   403e0:	df000915 	stw	fp,36(sp)
   403e4:	ddc00815 	stw	r23,32(sp)
   403e8:	dd800715 	stw	r22,28(sp)
   403ec:	dd400615 	stw	r21,24(sp)
   403f0:	dd000515 	stw	r20,20(sp)
   403f4:	dcc00415 	stw	r19,16(sp)
   403f8:	dc800315 	stw	r18,12(sp)
   403fc:	dc400215 	stw	r17,8(sp)
   40400:	dc000115 	stw	r16,4(sp)
   40404:	d9400b15 	stw	r5,44(sp)
   40408:	d9800c15 	stw	r6,48(sp)
   4040c:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   40410:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
   40414:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   40418:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   4041c:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   40420:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   40424:	11000007 	ldb	r4,0(r2)
   40428:	20003a26 	beq	r4,zero,40514 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   4042c:	24000226 	beq	r4,r16,40438 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   40430:	14400044 	addi	r17,r2,1
   40434:	00001406 	br	40488 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   40438:	14400084 	addi	r17,r2,2
   4043c:	10800047 	ldb	r2,1(r2)
   40440:	10003426 	beq	r2,zero,40514 <alt_printf+0x140>
            {
                if (c == '%')
   40444:	1400021e 	bne	r2,r16,40450 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   40448:	8009883a 	mov	r4,r16
   4044c:	00000e06 	br	40488 <alt_printf+0xb4>
                } 
                else if (c == 'c')
   40450:	1480051e 	bne	r2,r18,40468 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
   40454:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   40458:	ad800104 	addi	r22,r21,4
   4045c:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
   40460:	00405440 	call	40544 <alt_putchar>
   40464:	00002906 	br	4050c <alt_printf+0x138>
                }
                else if (c == 'x')
   40468:	14c0201e 	bne	r2,r19,404ec <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   4046c:	adc00017 	ldw	r23,0(r21)
   40470:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   40474:	b8000326 	beq	r23,zero,40484 <alt_printf+0xb0>
   40478:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   4047c:	00c003c4 	movi	r3,15
   40480:	00000306 	br	40490 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   40484:	01000c04 	movi	r4,48
   40488:	00405440 	call	40544 <alt_putchar>
                        continue;
   4048c:	00001f06 	br	4050c <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   40490:	1d84983a 	sll	r2,r3,r22
   40494:	15c4703a 	and	r2,r2,r23
   40498:	1000021e 	bne	r2,zero,404a4 <alt_printf+0xd0>
                        digit_shift -= 4;
   4049c:	b5bfff04 	addi	r22,r22,-4
   404a0:	003ffb06 	br	40490 <__alt_data_end+0xfffcf750>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   404a4:	070003c4 	movi	fp,15
                        if (digit <= 9)
   404a8:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   404ac:	b0001716 	blt	r22,zero,4050c <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   404b0:	e588983a 	sll	r4,fp,r22
   404b4:	25c8703a 	and	r4,r4,r23
   404b8:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
   404bc:	19000236 	bltu	r3,r4,404c8 <alt_printf+0xf4>
                            c = '0' + digit;
   404c0:	21000c04 	addi	r4,r4,48
   404c4:	00000106 	br	404cc <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
   404c8:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
   404cc:	21003fcc 	andi	r4,r4,255
   404d0:	2100201c 	xori	r4,r4,128
   404d4:	213fe004 	addi	r4,r4,-128
   404d8:	d8c00015 	stw	r3,0(sp)
   404dc:	00405440 	call	40544 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   404e0:	b5bfff04 	addi	r22,r22,-4
   404e4:	d8c00017 	ldw	r3,0(sp)
   404e8:	003ff006 	br	404ac <__alt_data_end+0xfffcf76c>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   404ec:	1500071e 	bne	r2,r20,4050c <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   404f0:	ad800017 	ldw	r22,0(r21)
   404f4:	ad400104 	addi	r21,r21,4

                    while(*s)
   404f8:	b1000007 	ldb	r4,0(r22)
   404fc:	20000326 	beq	r4,zero,4050c <alt_printf+0x138>
                      alt_putchar(*s++);
   40500:	b5800044 	addi	r22,r22,1
   40504:	00405440 	call	40544 <alt_putchar>
   40508:	003ffb06 	br	404f8 <__alt_data_end+0xfffcf7b8>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   4050c:	8805883a 	mov	r2,r17
   40510:	003fc406 	br	40424 <__alt_data_end+0xfffcf6e4>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   40514:	dfc00a17 	ldw	ra,40(sp)
   40518:	df000917 	ldw	fp,36(sp)
   4051c:	ddc00817 	ldw	r23,32(sp)
   40520:	dd800717 	ldw	r22,28(sp)
   40524:	dd400617 	ldw	r21,24(sp)
   40528:	dd000517 	ldw	r20,20(sp)
   4052c:	dcc00417 	ldw	r19,16(sp)
   40530:	dc800317 	ldw	r18,12(sp)
   40534:	dc400217 	ldw	r17,8(sp)
   40538:	dc000117 	ldw	r16,4(sp)
   4053c:	dec00e04 	addi	sp,sp,56
   40540:	f800283a 	ret

00040544 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   40544:	defffd04 	addi	sp,sp,-12
   40548:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   4054c:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   40550:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   40554:	01000134 	movhi	r4,4
   40558:	000f883a 	mov	r7,zero
   4055c:	01800044 	movi	r6,1
   40560:	d80b883a 	mov	r5,sp
   40564:	2103a504 	addi	r4,r4,3732
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   40568:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   4056c:	00409200 	call	40920 <altera_avalon_jtag_uart_write>
   40570:	00ffffc4 	movi	r3,-1
   40574:	10c00126 	beq	r2,r3,4057c <alt_putchar+0x38>
        return -1;
    }
    return c;
   40578:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
   4057c:	dfc00217 	ldw	ra,8(sp)
   40580:	dc000117 	ldw	r16,4(sp)
   40584:	dec00304 	addi	sp,sp,12
   40588:	f800283a 	ret

0004058c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   4058c:	defffe04 	addi	sp,sp,-8
   40590:	dc000015 	stw	r16,0(sp)
   40594:	dfc00115 	stw	ra,4(sp)
   40598:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   4059c:	0040d540 	call	40d54 <strlen>
   405a0:	01000134 	movhi	r4,4
   405a4:	000f883a 	mov	r7,zero
   405a8:	100d883a 	mov	r6,r2
   405ac:	800b883a 	mov	r5,r16
   405b0:	2103a504 	addi	r4,r4,3732
#else
    return fputs(str, stdout);
#endif
#endif
}
   405b4:	dfc00117 	ldw	ra,4(sp)
   405b8:	dc000017 	ldw	r16,0(sp)
   405bc:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   405c0:	00409201 	jmpi	40920 <altera_avalon_jtag_uart_write>

000405c4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   405c4:	deffff04 	addi	sp,sp,-4
   405c8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   405cc:	0040d240 	call	40d24 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   405d0:	00800044 	movi	r2,1
   405d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   405d8:	dfc00017 	ldw	ra,0(sp)
   405dc:	dec00104 	addi	sp,sp,4
   405e0:	f800283a 	ret

000405e4 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   405e4:	01000134 	movhi	r4,4
   405e8:	01800144 	movi	r6,5
   405ec:	000b883a 	mov	r5,zero
   405f0:	2103a504 	addi	r4,r4,3732
   405f4:	00407301 	jmpi	40730 <altera_avalon_jtag_uart_init>

000405f8 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   405f8:	20800017 	ldw	r2,0(r4)
   405fc:	10800104 	addi	r2,r2,4
   40600:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   40604:	18c1000c 	andi	r3,r3,1024
   40608:	18000526 	beq	r3,zero,40620 <altera_avalon_jtag_uart_timeout+0x28>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4060c:	20c00817 	ldw	r3,32(r4)
   40610:	18c10014 	ori	r3,r3,1024
   40614:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   40618:	20000915 	stw	zero,36(r4)
   4061c:	00000606 	br	40638 <altera_avalon_jtag_uart_timeout+0x40>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   40620:	20800917 	ldw	r2,36(r4)
   40624:	00e00034 	movhi	r3,32768
   40628:	18ffff04 	addi	r3,r3,-4
   4062c:	18800236 	bltu	r3,r2,40638 <altera_avalon_jtag_uart_timeout+0x40>
    sp->host_inactive++;
   40630:	10800044 	addi	r2,r2,1
   40634:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   40638:	00800134 	movhi	r2,4
   4063c:	108c0204 	addi	r2,r2,12296
   40640:	10800017 	ldw	r2,0(r2)
   40644:	f800283a 	ret

00040648 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
   40648:	21c00017 	ldw	r7,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4064c:	027fff84 	movi	r9,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   40650:	023fff44 	movi	r8,-3
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   40654:	39800104 	addi	r6,r7,4
   40658:	30800037 	ldwio	r2,0(r6)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4065c:	10c0c00c 	andi	r3,r2,768
   40660:	18003226 	beq	r3,zero,4072c <altera_avalon_jtag_uart_irq+0xe4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   40664:	10c0400c 	andi	r3,r2,256
   40668:	18001826 	beq	r3,zero,406cc <altera_avalon_jtag_uart_irq+0x84>
   4066c:	00c00074 	movhi	r3,1
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   40670:	21400a17 	ldw	r5,40(r4)
        if (next == sp->rx_out)
   40674:	22800b17 	ldw	r10,44(r4)
   40678:	29400044 	addi	r5,r5,1
   4067c:	2941ffcc 	andi	r5,r5,2047
   40680:	2a800b26 	beq	r5,r10,406b0 <altera_avalon_jtag_uart_irq+0x68>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   40684:	38c00037 	ldwio	r3,0(r7)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   40688:	1960000c 	andi	r5,r3,32768
   4068c:	28000826 	beq	r5,zero,406b0 <altera_avalon_jtag_uart_irq+0x68>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   40690:	21400a17 	ldw	r5,40(r4)
   40694:	214b883a 	add	r5,r4,r5
   40698:	28c00e05 	stb	r3,56(r5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4069c:	21400a17 	ldw	r5,40(r4)
   406a0:	29400044 	addi	r5,r5,1
   406a4:	2941ffcc 	andi	r5,r5,2047
   406a8:	21400a15 	stw	r5,40(r4)
   406ac:	003ff006 	br	40670 <__alt_data_end+0xfffcf930>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   406b0:	18ffffec 	andhi	r3,r3,65535
   406b4:	18000526 	beq	r3,zero,406cc <altera_avalon_jtag_uart_irq+0x84>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   406b8:	20c00817 	ldw	r3,32(r4)
   406bc:	1a46703a 	and	r3,r3,r9
   406c0:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   406c4:	30c00035 	stwio	r3,0(r6)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   406c8:	30c00037 	ldwio	r3,0(r6)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   406cc:	10c0800c 	andi	r3,r2,512
   406d0:	183fe126 	beq	r3,zero,40658 <__alt_data_end+0xfffcf918>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   406d4:	1004d43a 	srli	r2,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
   406d8:	103fdf26 	beq	r2,zero,40658 <__alt_data_end+0xfffcf918>
   406dc:	21400d17 	ldw	r5,52(r4)
   406e0:	20c00c17 	ldw	r3,48(r4)
   406e4:	28c00a26 	beq	r5,r3,40710 <altera_avalon_jtag_uart_irq+0xc8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   406e8:	20c00d17 	ldw	r3,52(r4)
   406ec:	20c7883a 	add	r3,r4,r3
   406f0:	18c20e07 	ldb	r3,2104(r3)
   406f4:	38c00035 	stwio	r3,0(r7)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   406f8:	20c00d17 	ldw	r3,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   406fc:	10bfffc4 	addi	r2,r2,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   40700:	18c00044 	addi	r3,r3,1
   40704:	18c1ffcc 	andi	r3,r3,2047
   40708:	20c00d15 	stw	r3,52(r4)
   4070c:	003ff206 	br	406d8 <__alt_data_end+0xfffcf998>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   40710:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   40714:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   40718:	1204703a 	and	r2,r2,r8
   4071c:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   40720:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   40724:	30800037 	ldwio	r2,0(r6)
   40728:	003fcb06 	br	40658 <__alt_data_end+0xfffcf918>
   4072c:	f800283a 	ret

00040730 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   40730:	defffd04 	addi	sp,sp,-12
   40734:	dc000115 	stw	r16,4(sp)
   40738:	2021883a 	mov	r16,r4
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4073c:	80c00017 	ldw	r3,0(r16)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   40740:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   40744:	dfc00215 	stw	ra,8(sp)
   40748:	2809883a 	mov	r4,r5
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4074c:	80800815 	stw	r2,32(r16)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   40750:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   40754:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   40758:	01800134 	movhi	r6,4
   4075c:	800f883a 	mov	r7,r16
   40760:	31819204 	addi	r6,r6,1608
   40764:	d8000015 	stw	zero,0(sp)
   40768:	0040b340 	call	40b34 <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4076c:	00800134 	movhi	r2,4
   40770:	108c0204 	addi	r2,r2,12296
   40774:	11400017 	ldw	r5,0(r2)
   40778:	01800134 	movhi	r6,4
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4077c:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   40780:	800f883a 	mov	r7,r16
   40784:	31817e04 	addi	r6,r6,1528
   40788:	81000204 	addi	r4,r16,8
   4078c:	0040a900 	call	40a90 <alt_alarm_start>
   40790:	1000030e 	bge	r2,zero,407a0 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   40794:	00a00034 	movhi	r2,32768
   40798:	10bfffc4 	addi	r2,r2,-1
   4079c:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   407a0:	dfc00217 	ldw	ra,8(sp)
   407a4:	dc000117 	ldw	r16,4(sp)
   407a8:	dec00304 	addi	sp,sp,12
   407ac:	f800283a 	ret

000407b0 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   407b0:	21800c17 	ldw	r6,48(r4)
    if (flags & O_NONBLOCK) {
   407b4:	2950000c 	andi	r5,r5,16384
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   407b8:	20800d17 	ldw	r2,52(r4)
   407bc:	11800626 	beq	r2,r6,407d8 <altera_avalon_jtag_uart_close+0x28>
   407c0:	20c00917 	ldw	r3,36(r4)
   407c4:	20800117 	ldw	r2,4(r4)
   407c8:	1880032e 	bgeu	r3,r2,407d8 <altera_avalon_jtag_uart_close+0x28>
    if (flags & O_NONBLOCK) {
   407cc:	283ffa26 	beq	r5,zero,407b8 <__alt_data_end+0xfffcfa78>
      return -EWOULDBLOCK; 
   407d0:	00bffd44 	movi	r2,-11
   407d4:	f800283a 	ret
    }
  }

  return 0;
   407d8:	0005883a 	mov	r2,zero
}
   407dc:	f800283a 	ret

000407e0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   407e0:	defff504 	addi	sp,sp,-44
   407e4:	df000915 	stw	fp,36(sp)
   407e8:	ddc00815 	stw	r23,32(sp)
   407ec:	dd800715 	stw	r22,28(sp)
   407f0:	dd000515 	stw	r20,20(sp)
   407f4:	dc800315 	stw	r18,12(sp)
   407f8:	dc400215 	stw	r17,8(sp)
   407fc:	3829883a 	mov	r20,r7
   40800:	dfc00a15 	stw	ra,40(sp)
   40804:	dd400615 	stw	r21,24(sp)
   40808:	dcc00415 	stw	r19,16(sp)
   4080c:	dc000115 	stw	r16,4(sp)
   40810:	2023883a 	mov	r17,r4
   40814:	282d883a 	mov	r22,r5
   40818:	3025883a 	mov	r18,r6
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4081c:	05c20004 	movi	r23,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   40820:	27000e04 	addi	fp,r4,56
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   40824:	39d0000c 	andi	r7,r7,16384
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   40828:	04802c0e 	bge	zero,r18,408dc <altera_avalon_jtag_uart_read+0xfc>
   4082c:	b007883a 	mov	r3,r22
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   40830:	8d400a17 	ldw	r21,40(r17)
      out = sp->rx_out;
   40834:	8cc00b17 	ldw	r19,44(r17)

      if (in >= out)
   40838:	acc00236 	bltu	r21,r19,40844 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4083c:	ace1c83a 	sub	r16,r21,r19
   40840:	00000106 	br	40848 <altera_avalon_jtag_uart_read+0x68>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   40844:	bce1c83a 	sub	r16,r23,r19

      if (n == 0)
   40848:	80000e26 	beq	r16,zero,40884 <altera_avalon_jtag_uart_read+0xa4>
   4084c:	9400012e 	bgeu	r18,r16,40854 <altera_avalon_jtag_uart_read+0x74>
   40850:	9021883a 	mov	r16,r18
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   40854:	800d883a 	mov	r6,r16
   40858:	1809883a 	mov	r4,r3
   4085c:	e4cb883a 	add	r5,fp,r19
   40860:	d9c00015 	stw	r7,0(sp)
   40864:	0040d2c0 	call	40d2c <memcpy>
      ptr   += n;
   40868:	1407883a 	add	r3,r2,r16
      space -= n;
   4086c:	9425c83a 	sub	r18,r18,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   40870:	9c21883a 	add	r16,r19,r16
   40874:	8401ffcc 	andi	r16,r16,2047
   40878:	8c000b15 	stw	r16,44(r17)
    }
    while (space > 0);
   4087c:	d9c00017 	ldw	r7,0(sp)
   40880:	04bfeb16 	blt	zero,r18,40830 <__alt_data_end+0xfffcfaf0>

    /* If we read any data then return it */
    if (ptr != buffer)
   40884:	1d80091e 	bne	r3,r22,408ac <altera_avalon_jtag_uart_read+0xcc>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   40888:	3800141e 	bne	r7,zero,408dc <altera_avalon_jtag_uart_read+0xfc>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4088c:	88800a17 	ldw	r2,40(r17)
   40890:	a880031e 	bne	r21,r2,408a0 <altera_avalon_jtag_uart_read+0xc0>
   40894:	88c00917 	ldw	r3,36(r17)
   40898:	88800117 	ldw	r2,4(r17)
   4089c:	18bffb36 	bltu	r3,r2,4088c <__alt_data_end+0xfffcfb4c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   408a0:	88800a17 	ldw	r2,40(r17)
   408a4:	a8bfe01e 	bne	r21,r2,40828 <__alt_data_end+0xfffcfae8>
   408a8:	00000c06 	br	408dc <altera_avalon_jtag_uart_read+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   408ac:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   408b0:	00bfff84 	movi	r2,-2
   408b4:	2084703a 	and	r2,r4,r2
   408b8:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   408bc:	88800817 	ldw	r2,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   408c0:	89400017 	ldw	r5,0(r17)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   408c4:	10800054 	ori	r2,r2,1
   408c8:	88800815 	stw	r2,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   408cc:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   408d0:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
   408d4:	1d85c83a 	sub	r2,r3,r22
   408d8:	00000506 	br	408f0 <altera_avalon_jtag_uart_read+0x110>
  else if (flags & O_NONBLOCK)
   408dc:	a510000c 	andi	r20,r20,16384
   408e0:	a0000226 	beq	r20,zero,408ec <altera_avalon_jtag_uart_read+0x10c>
    return -EWOULDBLOCK;
   408e4:	00bffd44 	movi	r2,-11
   408e8:	00000106 	br	408f0 <altera_avalon_jtag_uart_read+0x110>
  else
    return -EIO;
   408ec:	00bffec4 	movi	r2,-5
}
   408f0:	dfc00a17 	ldw	ra,40(sp)
   408f4:	df000917 	ldw	fp,36(sp)
   408f8:	ddc00817 	ldw	r23,32(sp)
   408fc:	dd800717 	ldw	r22,28(sp)
   40900:	dd400617 	ldw	r21,24(sp)
   40904:	dd000517 	ldw	r20,20(sp)
   40908:	dcc00417 	ldw	r19,16(sp)
   4090c:	dc800317 	ldw	r18,12(sp)
   40910:	dc400217 	ldw	r17,8(sp)
   40914:	dc000117 	ldw	r16,4(sp)
   40918:	dec00b04 	addi	sp,sp,44
   4091c:	f800283a 	ret

00040920 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   40920:	defff304 	addi	sp,sp,-52
   40924:	df000b15 	stw	fp,44(sp)
   40928:	ddc00a15 	stw	r23,40(sp)
   4092c:	dd800915 	stw	r22,36(sp)
   40930:	dd400815 	stw	r21,32(sp)
   40934:	dcc00615 	stw	r19,24(sp)
   40938:	dc800515 	stw	r18,20(sp)
   4093c:	dc400415 	stw	r17,16(sp)
   40940:	382f883a 	mov	r23,r7
   40944:	dfc00c15 	stw	ra,48(sp)
   40948:	dd000715 	stw	r20,28(sp)
   4094c:	dc000315 	stw	r16,12(sp)
   40950:	2025883a 	mov	r18,r4
   40954:	282b883a 	mov	r21,r5
   40958:	3027883a 	mov	r19,r6
   4095c:	2823883a 	mov	r17,r5
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   40960:	002d883a 	mov	r22,zero
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   40964:	073fff84 	movi	fp,-2
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   40968:	39d0000c 	andi	r7,r7,16384
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   4096c:	22020e04 	addi	r8,r4,2104
      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   40970:	0241ffc4 	movi	r9,2047
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   40974:	04c01d0e 	bge	zero,r19,409ec <altera_avalon_jtag_uart_write+0xcc>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   40978:	95000c17 	ldw	r20,48(r18)
      out = sp->tx_out;
   4097c:	95800d17 	ldw	r22,52(r18)

      if (in < out)
   40980:	a580022e 	bgeu	r20,r22,4098c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   40984:	b0ffffc4 	addi	r3,r22,-1
   40988:	00000206 	br	40994 <altera_avalon_jtag_uart_write+0x74>
      else if (out > 0)
   4098c:	b0000326 	beq	r22,zero,4099c <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   40990:	00c20004 	movi	r3,2048
   40994:	1d21c83a 	sub	r16,r3,r20
   40998:	00000106 	br	409a0 <altera_avalon_jtag_uart_write+0x80>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4099c:	4d21c83a 	sub	r16,r9,r20

      if (n == 0)
   409a0:	80001226 	beq	r16,zero,409ec <altera_avalon_jtag_uart_write+0xcc>
   409a4:	9c00012e 	bgeu	r19,r16,409ac <altera_avalon_jtag_uart_write+0x8c>
   409a8:	9821883a 	mov	r16,r19
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   409ac:	800d883a 	mov	r6,r16
   409b0:	880b883a 	mov	r5,r17
   409b4:	4509883a 	add	r4,r8,r20
      ptr   += n;
   409b8:	8c23883a 	add	r17,r17,r16
      count -= n;
   409bc:	9c27c83a 	sub	r19,r19,r16

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   409c0:	a421883a 	add	r16,r20,r16
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   409c4:	d9c00015 	stw	r7,0(sp)
   409c8:	da000115 	stw	r8,4(sp)
   409cc:	da400215 	stw	r9,8(sp)
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   409d0:	8401ffcc 	andi	r16,r16,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   409d4:	0040d2c0 	call	40d2c <memcpy>
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   409d8:	da400217 	ldw	r9,8(sp)
   409dc:	94000c15 	stw	r16,48(r18)
   409e0:	da000117 	ldw	r8,4(sp)
   409e4:	d9c00017 	ldw	r7,0(sp)
   409e8:	003fe206 	br	40974 <__alt_data_end+0xfffcfc34>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   409ec:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   409f0:	1f04703a 	and	r2,r3,fp
   409f4:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   409f8:	90800817 	ldw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   409fc:	91000017 	ldw	r4,0(r18)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   40a00:	10800094 	ori	r2,r2,2
   40a04:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   40a08:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   40a0c:	1801703a 	wrctl	status,r3
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   40a10:	04c0080e 	bge	zero,r19,40a34 <altera_avalon_jtag_uart_write+0x114>
    {
      if (flags & O_NONBLOCK)
   40a14:	3800101e 	bne	r7,zero,40a58 <altera_avalon_jtag_uart_write+0x138>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   40a18:	90c00d17 	ldw	r3,52(r18)
   40a1c:	90800917 	ldw	r2,36(r18)
   40a20:	b0c0021e 	bne	r22,r3,40a2c <altera_avalon_jtag_uart_write+0x10c>
   40a24:	90c00117 	ldw	r3,4(r18)
   40a28:	10fffb36 	bltu	r2,r3,40a18 <__alt_data_end+0xfffcfcd8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   40a2c:	103fd126 	beq	r2,zero,40974 <__alt_data_end+0xfffcfc34>
   40a30:	00000606 	br	40a4c <altera_avalon_jtag_uart_write+0x12c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   40a34:	8d400226 	beq	r17,r21,40a40 <altera_avalon_jtag_uart_write+0x120>
    return ptr - start;
   40a38:	8d45c83a 	sub	r2,r17,r21
   40a3c:	00000806 	br	40a60 <altera_avalon_jtag_uart_write+0x140>
  else if (flags & O_NONBLOCK)
   40a40:	bdd0000c 	andi	r23,r23,16384
   40a44:	b8000226 	beq	r23,zero,40a50 <altera_avalon_jtag_uart_write+0x130>
   40a48:	00000406 	br	40a5c <altera_avalon_jtag_uart_write+0x13c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   40a4c:	8d7ffa1e 	bne	r17,r21,40a38 <__alt_data_end+0xfffcfcf8>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   40a50:	00bffec4 	movi	r2,-5
   40a54:	00000206 	br	40a60 <altera_avalon_jtag_uart_write+0x140>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   40a58:	8d7ff71e 	bne	r17,r21,40a38 <__alt_data_end+0xfffcfcf8>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   40a5c:	00bffd44 	movi	r2,-11
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
   40a60:	dfc00c17 	ldw	ra,48(sp)
   40a64:	df000b17 	ldw	fp,44(sp)
   40a68:	ddc00a17 	ldw	r23,40(sp)
   40a6c:	dd800917 	ldw	r22,36(sp)
   40a70:	dd400817 	ldw	r21,32(sp)
   40a74:	dd000717 	ldw	r20,28(sp)
   40a78:	dcc00617 	ldw	r19,24(sp)
   40a7c:	dc800517 	ldw	r18,20(sp)
   40a80:	dc400417 	ldw	r17,16(sp)
   40a84:	dc000317 	ldw	r16,12(sp)
   40a88:	dec00d04 	addi	sp,sp,52
   40a8c:	f800283a 	ret

00040a90 <alt_alarm_start>:
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   40a90:	00800134 	movhi	r2,4
   40a94:	108c0204 	addi	r2,r2,12296
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
   40a98:	10800017 	ldw	r2,0(r2)
   40a9c:	10001d26 	beq	r2,zero,40b14 <alt_alarm_start+0x84>
  {
    if (alarm)
   40aa0:	20001e26 	beq	r4,zero,40b1c <alt_alarm_start+0x8c>
    {
      alarm->callback = callback;
   40aa4:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
   40aa8:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   40aac:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   40ab0:	00bfff84 	movi	r2,-2
   40ab4:	1884703a 	and	r2,r3,r2
   40ab8:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   40abc:	00800134 	movhi	r2,4
   40ac0:	108c0104 	addi	r2,r2,12292
   40ac4:	10800017 	ldw	r2,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
   40ac8:	11800044 	addi	r6,r2,1
   40acc:	314b883a 	add	r5,r6,r5
   40ad0:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   40ad4:	2880032e 	bgeu	r5,r2,40ae4 <alt_alarm_start+0x54>
      {
        alarm->rollover = 1;
   40ad8:	00800044 	movi	r2,1
   40adc:	20800405 	stb	r2,16(r4)
   40ae0:	00000106 	br	40ae8 <alt_alarm_start+0x58>
      }
      else
      {
        alarm->rollover = 0;
   40ae4:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   40ae8:	00800134 	movhi	r2,4
   40aec:	1087cf04 	addi	r2,r2,7996
  entry->next     = list->next;
   40af0:	11400017 	ldw	r5,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   40af4:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
   40af8:	21400015 	stw	r5,0(r4)

  list->next->previous = entry;
   40afc:	11400017 	ldw	r5,0(r2)
  list->next           = entry;
   40b00:	11000015 	stw	r4,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
   40b04:	29000115 	stw	r4,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   40b08:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
   40b0c:	0005883a 	mov	r2,zero
   40b10:	f800283a 	ret
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
   40b14:	00bfde84 	movi	r2,-134
   40b18:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
   40b1c:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
   40b20:	f800283a 	ret

00040b24 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   40b24:	f800283a 	ret

00040b28 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   40b28:	3005883a 	mov	r2,r6
   40b2c:	f800283a 	ret

00040b30 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   40b30:	f800283a 	ret

00040b34 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   40b34:	0040bd01 	jmpi	40bd0 <alt_iic_isr_register>

00040b38 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   40b38:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   40b3c:	00bfff84 	movi	r2,-2
   40b40:	3084703a 	and	r2,r6,r2
   40b44:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   40b48:	00800134 	movhi	r2,4
   40b4c:	108c0004 	addi	r2,r2,12288
   40b50:	01000044 	movi	r4,1
   40b54:	10c00017 	ldw	r3,0(r2)
   40b58:	214a983a 	sll	r5,r4,r5
   40b5c:	28cab03a 	or	r5,r5,r3
   40b60:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   40b64:	10800017 	ldw	r2,0(r2)
   40b68:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   40b6c:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   40b70:	0005883a 	mov	r2,zero
   40b74:	f800283a 	ret

00040b78 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   40b78:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   40b7c:	00bfff84 	movi	r2,-2
   40b80:	3084703a 	and	r2,r6,r2
   40b84:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   40b88:	00800134 	movhi	r2,4
   40b8c:	108c0004 	addi	r2,r2,12288
   40b90:	013fff84 	movi	r4,-2
   40b94:	10c00017 	ldw	r3,0(r2)
   40b98:	214a183a 	rol	r5,r4,r5
   40b9c:	28ca703a 	and	r5,r5,r3
   40ba0:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   40ba4:	10800017 	ldw	r2,0(r2)
   40ba8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   40bac:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   40bb0:	0005883a 	mov	r2,zero
   40bb4:	f800283a 	ret

00040bb8 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   40bb8:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   40bbc:	00800044 	movi	r2,1
   40bc0:	1144983a 	sll	r2,r2,r5
   40bc4:	10c4703a 	and	r2,r2,r3
}
   40bc8:	1004c03a 	cmpne	r2,r2,zero
   40bcc:	f800283a 	ret

00040bd0 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   40bd0:	00c007c4 	movi	r3,31
   40bd4:	19401616 	blt	r3,r5,40c30 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   40bd8:	defffe04 	addi	sp,sp,-8
   40bdc:	dfc00115 	stw	ra,4(sp)
   40be0:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   40be4:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   40be8:	00ffff84 	movi	r3,-2
   40bec:	80c6703a 	and	r3,r16,r3
   40bf0:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   40bf4:	280490fa 	slli	r2,r5,3
   40bf8:	00c00134 	movhi	r3,4
   40bfc:	18cc0304 	addi	r3,r3,12300
   40c00:	1885883a 	add	r2,r3,r2
   40c04:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   40c08:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   40c0c:	30000226 	beq	r6,zero,40c18 <alt_iic_isr_register+0x48>
   40c10:	0040b380 	call	40b38 <alt_ic_irq_enable>
   40c14:	00000106 	br	40c1c <alt_iic_isr_register+0x4c>
   40c18:	0040b780 	call	40b78 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   40c1c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   40c20:	dfc00117 	ldw	ra,4(sp)
   40c24:	dc000017 	ldw	r16,0(sp)
   40c28:	dec00204 	addi	sp,sp,8
   40c2c:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
   40c30:	00bffa84 	movi	r2,-22
   40c34:	f800283a 	ret

00040c38 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   40c38:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   40c3c:	00bfff84 	movi	r2,-2
   40c40:	1884703a 	and	r2,r3,r2
   40c44:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   40c48:	21400117 	ldw	r5,4(r4)
   40c4c:	20800017 	ldw	r2,0(r4)
   40c50:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
   40c54:	21400117 	ldw	r5,4(r4)
   40c58:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   40c5c:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   40c60:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   40c64:	1801703a 	wrctl	status,r3
   40c68:	f800283a 	ret

00040c6c <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   40c6c:	d0a43817 	ldw	r2,-28448(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   40c70:	defffb04 	addi	sp,sp,-20
   40c74:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   40c78:	d4200617 	ldw	r16,-32744(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   40c7c:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   40c80:	dc800215 	stw	r18,8(sp)
   40c84:	dc400115 	stw	r17,4(sp)
   40c88:	dfc00415 	stw	ra,16(sp)
   40c8c:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   40c90:	d0a43815 	stw	r2,-28448(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   40c94:	d4600604 	addi	r17,gp,-32744
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   40c98:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   40c9c:	84401a26 	beq	r16,r17,40d08 <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   40ca0:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   40ca4:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   40ca8:	10000326 	beq	r2,zero,40cb8 <alt_tick+0x4c>
   40cac:	d0a43817 	ldw	r2,-28448(gp)
   40cb0:	1000011e 	bne	r2,zero,40cb8 <alt_tick+0x4c>
    {
      alarm->rollover = 0;
   40cb4:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   40cb8:	d0e43817 	ldw	r3,-28448(gp)
   40cbc:	80800217 	ldw	r2,8(r16)
   40cc0:	18800f36 	bltu	r3,r2,40d00 <alt_tick+0x94>
   40cc4:	80800403 	ldbu	r2,16(r16)
   40cc8:	10000d1e 	bne	r2,zero,40d00 <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
   40ccc:	80800317 	ldw	r2,12(r16)
   40cd0:	81000517 	ldw	r4,20(r16)
   40cd4:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   40cd8:	1000031e 	bne	r2,zero,40ce8 <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
   40cdc:	8009883a 	mov	r4,r16
   40ce0:	0040c380 	call	40c38 <alt_alarm_stop>
   40ce4:	00000606 	br	40d00 <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
   40ce8:	80c00217 	ldw	r3,8(r16)
   40cec:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   40cf0:	d0e43817 	ldw	r3,-28448(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   40cf4:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   40cf8:	10c0012e 	bgeu	r2,r3,40d00 <alt_tick+0x94>
        {
          alarm->rollover = 1;
   40cfc:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   40d00:	9821883a 	mov	r16,r19
   40d04:	003fe506 	br	40c9c <__alt_data_end+0xfffcff5c>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   40d08:	dfc00417 	ldw	ra,16(sp)
   40d0c:	dcc00317 	ldw	r19,12(sp)
   40d10:	dc800217 	ldw	r18,8(sp)
   40d14:	dc400117 	ldw	r17,4(sp)
   40d18:	dc000017 	ldw	r16,0(sp)
   40d1c:	dec00504 	addi	sp,sp,20
   40d20:	f800283a 	ret

00040d24 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   40d24:	000170fa 	wrctl	ienable,zero
   40d28:	f800283a 	ret

00040d2c <memcpy>:
   40d2c:	2005883a 	mov	r2,r4
   40d30:	2007883a 	mov	r3,r4
   40d34:	218d883a 	add	r6,r4,r6
   40d38:	19800526 	beq	r3,r6,40d50 <memcpy+0x24>
   40d3c:	29000003 	ldbu	r4,0(r5)
   40d40:	18c00044 	addi	r3,r3,1
   40d44:	29400044 	addi	r5,r5,1
   40d48:	193fffc5 	stb	r4,-1(r3)
   40d4c:	003ffa06 	br	40d38 <__alt_data_end+0xfffcfff8>
   40d50:	f800283a 	ret

00040d54 <strlen>:
   40d54:	2005883a 	mov	r2,r4
   40d58:	10c00007 	ldb	r3,0(r2)
   40d5c:	18000226 	beq	r3,zero,40d68 <strlen+0x14>
   40d60:	10800044 	addi	r2,r2,1
   40d64:	003ffc06 	br	40d58 <__alt_data_end+0xfffd0018>
   40d68:	1105c83a 	sub	r2,r2,r4
   40d6c:	f800283a 	ret
