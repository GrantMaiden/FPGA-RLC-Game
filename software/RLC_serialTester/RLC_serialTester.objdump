
RLC_serialTester.elf:     file format elf32-littlenios2
RLC_serialTester.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0004015c

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00005680 memsz 0x00005680 flags r-x
    LOAD off    0x000066a0 vaddr 0x000456a0 paddr 0x0004710c align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008b78 vaddr 0x00048b78 paddr 0x00048b78 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000013c  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000053fc  0004015c  0004015c  0000115c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000148  00045558  00045558  00006558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  000456a0  0004710c  000066a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00048b78  00048b78  00008b78  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00048cc8  00048cc8  0000810c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000810c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000b10  00000000  00000000  00008130  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001b3df  00000000  00000000  00008c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000073fb  00000000  00000000  0002401f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c6da  00000000  00000000  0002b41a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001480  00000000  00000000  00037af4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000ec00  00000000  00000000  00038f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00006e00  00000000  00000000  00047b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0004e974  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000830  00000000  00000000  0004e988  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00006ea2  00000000  00000000  0004f1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000585ae  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000585b1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000585b4  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000585b5  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  000585b6  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  000585bf  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  000585c8  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000f  00000000  00000000  000585d1  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000026  00000000  00000000  000585e0  2**0
                  CONTENTS, READONLY
 27 .jdi          00004fbd  00000000  00000000  00058606  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00071941  00000000  00000000  0005d5c3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
0004015c l    d  .text	00000000 .text
00045558 l    d  .rodata	00000000 .rodata
000456a0 l    d  .rwdata	00000000 .rwdata
00048b78 l    d  .bss	00000000 .bss
00048cc8 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 ../RLC_serialTester_bsp//obj/HAL/src/crt0.o
00040194 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 RLC_serialTester.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
000456a0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 findfp.c
000404e0 l     F .text	00000008 __fp_unlock
000404f4 l     F .text	0000019c __sinit.part.1
00040690 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 refill.c
0004134c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
000423a4 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000470fc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00046074 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00042e78 l     F .text	00000050 altera_avalon_jtag_uart_timeout
00042ec8 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00043738 l     F .text	00000080 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
00042238 g     F .text	00000054 _isatty_r
00042780 g     F .text	00000060 alt_main
00048bc8 g     O .bss	00000100 alt_irq
00041f60 g     F .text	00000060 _lseek_r
0004710c g       *ABS*	00000000 __flash_rwdata_start
00048cc8 g       *ABS*	00000000 __alt_heap_start
00041668 g     F .text	0000005c __sseek
00040840 g     F .text	00000010 __sinit
00044e4c g     F .text	00000140 __swbuf_r
00040698 g     F .text	00000078 __sfmoreglue
000427e4 g     F .text	00000004 __malloc_unlock
0004458c g     F .text	0000015c memmove
00040828 g     F .text	00000018 _cleanup
00042a24 g     F .text	00000028 alt_putstr
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
000421dc g     F .text	0000005c _fstat_r
00048b84 g     O .bss	00000004 errno
000404cc g     F .text	00000014 __srget
000415e4 g     F .text	00000008 __seofread
00048b8c g     O .bss	00000004 alt_argv
0004f0d4 g       *ABS*	00000000 _gp
00045ecc g     O .rwdata	00000180 alt_fd_list
00040360 g     F .text	00000070 _getc_r
000403d0 g     F .text	00000088 getc
00043b2c g     F .text	0000007c alt_find_dev
00044444 g     F .text	00000148 memcpy
000404e8 g     F .text	0000000c _cleanup_r
000437b8 g     F .text	00000094 alt_io_redirect
00045558 g       *ABS*	00000000 __DTOR_END__
00043114 g     F .text	00000158 altera_avalon_jtag_uart_read
00045488 g     F .text	00000064 .hidden __udivsi3
0004246c g     F .text	000000ac isatty
00048b80 g     O .bss	00000004 __malloc_top_pad
00043e1c g     F .text	000004c8 __sfvwrite_r
0004153c g     F .text	00000054 _sbrk_r
0004217c g     F .text	00000060 _read_r
000470e4 g     O .rwdata	00000004 alt_max_fd
00041780 g     F .text	000000f0 _fclose_r
00041afc g     F .text	00000030 fflush
00048b7c g     O .bss	00000004 __malloc_max_sbrked_mem
0004269c g     F .text	000000e4 lseek
000470d4 g     O .rwdata	00000004 _global_impure_ptr
00044850 g     F .text	00000564 _realloc_r
00048cc8 g       *ABS*	00000000 __bss_end
000436cc g     F .text	0000006c alt_iic_isr_register
00043a58 g     F .text	000000cc alt_tick
00040860 g     F .text	00000018 __fp_lock_all
000436b4 g     F .text	00000018 alt_ic_irq_enabled
00043a20 g     F .text	00000038 alt_alarm_stop
00048b94 g     O .bss	00000004 alt_irq_active
00040000 g       *ABS*	00000000 __alt_mem_onchip_mem
000400ec g     F .exceptions	00000070 alt_irq_handler
0004604c g     O .rwdata	00000028 alt_dev_null
0004349c g     F .text	00000004 alt_dcache_flush_all
0004710c g       *ABS*	00000000 __ram_rwdata_end
000470e8 g     O .rwdata	00000008 alt_dev_list
00042c40 g     F .text	00000148 write
000446e8 g     F .text	000000a0 _putc_r
000456a0 g       *ABS*	00000000 __ram_rodata_end
000423ac g     F .text	000000c0 fstat
000454ec g     F .text	00000058 .hidden __umodsi3
00048cc8 g       *ABS*	00000000 end
00042fd0 g     F .text	00000080 altera_avalon_jtag_uart_init
00045558 g       *ABS*	00000000 __CTOR_LIST__
00070d40 g       *ABS*	00000000 __alt_stack_pointer
0004326c g     F .text	0000019c altera_avalon_jtag_uart_write
00040850 g     F .text	00000004 __sfp_lock_acquire
000442e4 g     F .text	000000e4 memchr
00041c50 g     F .text	00000310 _free_r
000427e8 g     F .text	00000214 alt_printf
00045210 g     F .text	00000180 __call_exitprocs
00040458 g     F .text	00000074 __srget_r
000470dc g     O .rwdata	00000004 __malloc_sbrk_base
0004015c g     F .text	0000003c _start
00048b9c g     O .bss	00000004 _alt_tick_rate
00048b98 g     O .bss	00000004 _alt_nticks
00042a4c g     F .text	0000014c read
00042da8 g     F .text	00000044 alt_sys_init
000450f8 g     F .text	00000118 __register_exitproc
00043050 g     F .text	0000003c altera_avalon_jtag_uart_close
0004228c g     F .text	00000028 .hidden __mulsi3
000456a0 g       *ABS*	00000000 __ram_rwdata_start
00045558 g       *ABS*	00000000 __ram_rodata_start
00048ba0 g     O .bss	00000028 __malloc_current_mallinfo
00042dec g     F .text	00000024 altera_avalon_jtag_uart_read_fd
00043c74 g     F .text	000000a8 alt_get_fd
0004172c g     F .text	00000054 _close_r
000443c8 g     F .text	0000007c memcmp
00042e34 g     F .text	00000024 altera_avalon_jtag_uart_close_fd
00048cc8 g       *ABS*	00000000 __alt_stack_base
00042e58 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
00044fa4 g     F .text	00000154 __swsetup_r
00040710 g     F .text	00000118 __sfp
00045ac4 g     O .rwdata	00000408 __malloc_av_
0004085c g     F .text	00000004 __sinit_lock_release
00041590 g     F .text	00000054 __sread
00043ba8 g     F .text	000000cc alt_find_file
000434a0 g     F .text	00000080 alt_dev_llist_insert
000427e0 g     F .text	00000004 __malloc_lock
00042bf4 g     F .text	0000004c sbrk
00041aa0 g     F .text	0000005c _fflush_r
00048b78 g       *ABS*	00000000 __bss_start
00041224 g     F .text	00000128 memset
00040198 g     F .text	000001c8 main
00048b88 g     O .bss	00000004 alt_envp
00048b78 g     O .bss	00000004 __malloc_max_total_mem
00042e10 g     F .text	00000024 altera_avalon_jtag_uart_write_fd
00044f8c g     F .text	00000018 __swbuf
000416c4 g     F .text	00000008 __sclose
00070d40 g       *ABS*	00000000 __alt_heap_limit
00041870 g     F .text	00000014 fclose
00040a18 g     F .text	0000080c _malloc_r
000470f8 g     O .rwdata	00000004 alt_errno
00040890 g     F .text	000000c4 _fwalk
00044788 g     F .text	000000c8 putc
00045390 g     F .text	00000084 .hidden __divsi3
00041b2c g     F .text	00000124 _malloc_trim_r
00045558 g       *ABS*	00000000 __CTOR_END__
00045558 g       *ABS*	00000000 __flash_rodata_start
00045558 g       *ABS*	00000000 __DTOR_LIST__
00042d88 g     F .text	00000020 alt_irq_init
00042b98 g     F .text	0000005c alt_release_fd
00043d1c g     F .text	00000014 atexit
000416cc g     F .text	00000060 _write_r
000470d8 g     O .rwdata	00000004 _impure_ptr
00048b90 g     O .bss	00000004 alt_argc
00041884 g     F .text	0000021c __sflush_r
00043598 g     F .text	00000078 _do_dtors
00041368 g     F .text	000001d4 __srefill_r
00040020 g       .exceptions	00000000 alt_irq_entry
00040878 g     F .text	00000018 __fp_unlock_all
000470f0 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00043614 g     F .text	00000020 alt_ic_isr_register
0004710c g       *ABS*	00000000 _edata
00048cc8 g       *ABS*	00000000 _end
0004015c g       *ABS*	00000000 __ram_exceptions_end
0004308c g     F .text	00000088 altera_avalon_jtag_uart_ioctl
00043d68 g     F .text	0000009c _fputs_r
00043674 g     F .text	00000040 alt_ic_irq_disable
000415ec g     F .text	0000007c __swrite
000470e0 g     O .rwdata	00000004 __malloc_trim_threshold
00043b24 g     F .text	00000008 altera_nios2_qsys_irq_init
00043d30 g     F .text	00000038 exit
00040954 g     F .text	000000c4 _fwalk_reent
00045414 g     F .text	00000074 .hidden __modsi3
00070d40 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00040854 g     F .text	00000004 __sfp_lock_release
00045544 g     F .text	00000014 _exit
00043408 g     F .text	00000094 alt_alarm_start
00041fc0 g     F .text	000001bc __smakebuf_r
00044db4 g     F .text	00000098 strlen
0004384c g     F .text	000001d4 open
000429fc g     F .text	00000028 alt_putchar
00043610 g     F .text	00000004 alt_icache_flush_all
00043e04 g     F .text	00000018 fputs
00047100 g     O .rwdata	00000004 alt_priority_mask
00043634 g     F .text	00000040 alt_ic_irq_enable
00047104 g     O .rwdata	00000008 alt_alarm_list
00043520 g     F .text	00000078 _do_ctors
000422b4 g     F .text	000000f0 close
00042518 g     F .text	00000184 alt_load
00040858 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08405714 	ori	at,at,348
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defffe04 	addi	sp,sp,-8
   400f0:	dfc00115 	stw	ra,4(sp)
   400f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   400f8:	000b313a 	rdctl	r5,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   400fc:	04000174 	movhi	r16,5
   40100:	8422f204 	addi	r16,r16,-29752
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40104:	2880004c 	andi	r2,r5,1
   40108:	10000926 	beq	r2,zero,40130 <alt_irq_handler+0x44>

  active = alt_irq_pending ();

  do
  {
    i = 0;
   4010c:	0007883a 	mov	r3,zero
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   40110:	180690fa 	slli	r3,r3,3
   40114:	80c7883a 	add	r3,r16,r3
   40118:	18800017 	ldw	r2,0(r3)
   4011c:	19000117 	ldw	r4,4(r3)
   40120:	103ee83a 	callr	r2
   40124:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   40128:	283ff61e 	bne	r5,zero,40104 <__alt_data_end+0xfffcf3c4>
   4012c:	00000706 	br	4014c <alt_irq_handler+0x60>
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40130:	0007883a 	mov	r3,zero
   40134:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40138:	1085883a 	add	r2,r2,r2
      i++;
   4013c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40140:	2888703a 	and	r4,r5,r2
   40144:	203ffc26 	beq	r4,zero,40138 <__alt_data_end+0xfffcf3f8>
   40148:	003ff106 	br	40110 <__alt_data_end+0xfffcf3d0>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   4014c:	dfc00117 	ldw	ra,4(sp)
   40150:	dc000017 	ldw	r16,0(sp)
   40154:	dec00204 	addi	sp,sp,8
   40158:	f800283a 	ret

Disassembly of section .text:

0004015c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   4015c:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40160:	dec35014 	ori	sp,sp,3392
    movhi gp, %hi(_gp)
   40164:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   40168:	d6bc3514 	ori	gp,gp,61652
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   4016c:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40170:	10a2de14 	ori	r2,r2,35704

    movhi r3, %hi(__bss_end)
   40174:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40178:	18e33214 	ori	r3,r3,36040

    beq r2, r3, 1f
   4017c:	10c00326 	beq	r2,r3,4018c <_start+0x30>

0:
    stw zero, (r2)
   40180:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40184:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40188:	10fffd36 	bltu	r2,r3,40180 <__alt_data_end+0xfffcf440>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   4018c:	00425180 	call	42518 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40190:	00427800 	call	42780 <alt_main>

00040194 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40194:	003fff06 	br	40194 <__alt_data_end+0xfffcf454>

00040198 <main>:
#define VGA_x_cord (void *) 0x00081020
#define VGA_y_cord (void *) 0x00081010
#define VGA_clock_out (void *) 0x00081000

int main()
{ 
   40198:	defffc04 	addi	sp,sp,-16
   4019c:	dfc00315 	stw	ra,12(sp)
   401a0:	df000215 	stw	fp,8(sp)
   401a4:	df000204 	addi	fp,sp,8
  alt_putstr("Serial communication test application has begun!\n");
   401a8:	01000134 	movhi	r4,4
   401ac:	21155604 	addi	r4,r4,21848
   401b0:	0042a240 	call	42a24 <alt_putstr>
  /* Event loop never exits. */
  while (1){
	  //alt_putstr("OLD Stored inputData is:\n");
	  //c = IORD_ALTERA_AVALON_PIO_DATA(0x00081040);
	  //alt_printf("%x\n",c);
	  alt_putstr("Enter a character to send over serial interface!\n");
   401b4:	01000134 	movhi	r4,4
   401b8:	21156304 	addi	r4,r4,21900
   401bc:	0042a240 	call	42a24 <alt_putstr>
	  c = getchar();
   401c0:	00800134 	movhi	r2,4
   401c4:	109c3604 	addi	r2,r2,28888
   401c8:	10800017 	ldw	r2,0(r2)
   401cc:	10800117 	ldw	r2,4(r2)
   401d0:	1009883a 	mov	r4,r2
   401d4:	00403d00 	call	403d0 <getc>
   401d8:	e0bfff05 	stb	r2,-4(fp)
	  getchar(); // Consume newline
   401dc:	00800134 	movhi	r2,4
   401e0:	109c3604 	addi	r2,r2,28888
   401e4:	10800017 	ldw	r2,0(r2)
   401e8:	10800117 	ldw	r2,4(r2)
   401ec:	1009883a 	mov	r4,r2
   401f0:	00403d00 	call	403d0 <getc>
	  alt_putstr("...\n");
   401f4:	01000134 	movhi	r4,4
   401f8:	21157004 	addi	r4,r4,21952
   401fc:	0042a240 	call	42a24 <alt_putstr>
	  alt_putstr("...\n");
   40200:	01000134 	movhi	r4,4
   40204:	21157004 	addi	r4,r4,21952
   40208:	0042a240 	call	42a24 <alt_putstr>
	  IOWR_ALTERA_AVALON_PIO_DATA(HEX0, ~0b00011110);
   4020c:	00fff844 	movi	r3,-31
   40210:	00800234 	movhi	r2,8
   40214:	10841804 	addi	r2,r2,4192
   40218:	10c00035 	stwio	r3,0(r2)
	  IOWR_ALTERA_AVALON_PIO_DATA(outputData, c); //store character in outputData register
   4021c:	e0ffff07 	ldb	r3,-4(fp)
   40220:	00800234 	movhi	r2,8
   40224:	10841c04 	addi	r2,r2,4208
   40228:	10c00035 	stwio	r3,0(r2)

	  IOWR_ALTERA_AVALON_PIO_DATA(outputClockEn, 0b1); //begin data transfer
   4022c:	00c00044 	movi	r3,1
   40230:	00800234 	movhi	r2,8
   40234:	10841404 	addi	r2,r2,4176
   40238:	10c00035 	stwio	r3,0(r2)
	  for (i = 0; i<350; i++){
   4023c:	e03ffe15 	stw	zero,-8(fp)
   40240:	00000306 	br	40250 <main+0xb8>
   40244:	e0bffe17 	ldw	r2,-8(fp)
   40248:	10800044 	addi	r2,r2,1
   4024c:	e0bffe15 	stw	r2,-8(fp)
   40250:	e0bffe17 	ldw	r2,-8(fp)
   40254:	10805790 	cmplti	r2,r2,350
   40258:	103ffa1e 	bne	r2,zero,40244 <__alt_data_end+0xfffcf504>
	  }
	  //c = IORD_ALTERA_AVALON_PIO_DATA(0x00081000); //check to see if dataTransfer variable is going to 1
	  //alt_printf("%x\n",c);
	  IOWR_ALTERA_AVALON_PIO_DATA(outputClockEn, 0b0); //end data transfer
   4025c:	0007883a 	mov	r3,zero
   40260:	00800234 	movhi	r2,8
   40264:	10841404 	addi	r2,r2,4176
   40268:	10c00035 	stwio	r3,0(r2)
	  for (i = 0; i<350; i++){
   4026c:	e03ffe15 	stw	zero,-8(fp)
   40270:	00000306 	br	40280 <main+0xe8>
   40274:	e0bffe17 	ldw	r2,-8(fp)
   40278:	10800044 	addi	r2,r2,1
   4027c:	e0bffe15 	stw	r2,-8(fp)
   40280:	e0bffe17 	ldw	r2,-8(fp)
   40284:	10805790 	cmplti	r2,r2,350
   40288:	103ffa1e 	bne	r2,zero,40274 <__alt_data_end+0xfffcf534>
	  }
	  //c = IORD_ALTERA_AVALON_PIO_DATA(0x00081000); //check to see if dataTransfer variable is going to 0
	  //alt_printf("%x\n",c);
	  alt_putstr("Enter 'Y' to read data being stored in outputData register!\n");
   4028c:	01000134 	movhi	r4,4
   40290:	21157204 	addi	r4,r4,21960
   40294:	0042a240 	call	42a24 <alt_putstr>
	  c = 'Y';
   40298:	00801644 	movi	r2,89
   4029c:	e0bfff05 	stb	r2,-4(fp)
	  if (c == 'Y'){
   402a0:	e0bfff07 	ldb	r2,-4(fp)
   402a4:	10801658 	cmpnei	r2,r2,89
   402a8:	10000c1e 	bne	r2,zero,402dc <main+0x144>
		  alt_putstr("Stored outputData is:\n");
   402ac:	01000134 	movhi	r4,4
   402b0:	21158204 	addi	r4,r4,22024
   402b4:	0042a240 	call	42a24 <alt_putstr>
		  c = IORD_ALTERA_AVALON_PIO_DATA(outputData);
   402b8:	00800234 	movhi	r2,8
   402bc:	10841c04 	addi	r2,r2,4208
   402c0:	10800037 	ldwio	r2,0(r2)
   402c4:	e0bfff05 	stb	r2,-4(fp)
		  alt_printf("%c\n",c);
   402c8:	e0bfff07 	ldb	r2,-4(fp)
   402cc:	100b883a 	mov	r5,r2
   402d0:	01000134 	movhi	r4,4
   402d4:	21158804 	addi	r4,r4,22048
   402d8:	00427e80 	call	427e8 <alt_printf>
	  }
	  alt_putstr("Enter 'Y' to read data being stored in inputData register!\n");
   402dc:	01000134 	movhi	r4,4
   402e0:	21158904 	addi	r4,r4,22052
   402e4:	0042a240 	call	42a24 <alt_putstr>
	  c = 'Y';
   402e8:	00801644 	movi	r2,89
   402ec:	e0bfff05 	stb	r2,-4(fp)
	  if (c == 'Y'){
   402f0:	e0bfff07 	ldb	r2,-4(fp)
   402f4:	10801658 	cmpnei	r2,r2,89
   402f8:	10000c1e 	bne	r2,zero,4032c <main+0x194>
		  alt_putstr("NEW Stored inputData is:\n");
   402fc:	01000134 	movhi	r4,4
   40300:	21159804 	addi	r4,r4,22112
   40304:	0042a240 	call	42a24 <alt_putstr>
		  c = IORD_ALTERA_AVALON_PIO_DATA(inputData);
   40308:	00800234 	movhi	r2,8
   4030c:	10842404 	addi	r2,r2,4240
   40310:	10800037 	ldwio	r2,0(r2)
   40314:	e0bfff05 	stb	r2,-4(fp)
		  alt_printf("%x\n",c);
   40318:	e0bfff07 	ldb	r2,-4(fp)
   4031c:	100b883a 	mov	r5,r2
   40320:	01000134 	movhi	r4,4
   40324:	21159f04 	addi	r4,r4,22140
   40328:	00427e80 	call	427e8 <alt_printf>
	  int j;
	  int k;
	  int l;
	  int m;

	  IOWR_ALTERA_AVALON_PIO_DATA(VGA_reset, 0b1); //begin data transfer
   4032c:	00c00044 	movi	r3,1
   40330:	00800234 	movhi	r2,8
   40334:	10841004 	addi	r2,r2,4160
   40338:	10c00035 	stwio	r3,0(r2)
	  IOWR_ALTERA_AVALON_PIO_DATA(VGA_reset, 0b0); //begin data transfer
   4033c:	0007883a 	mov	r3,zero
   40340:	00800234 	movhi	r2,8
   40344:	10841004 	addi	r2,r2,4160
   40348:	10c00035 	stwio	r3,0(r2)

	  IOWR_ALTERA_AVALON_PIO_DATA(VGA_rgb_out, 0b000000001111111100000000); //begin data transfer
   4034c:	00ffc014 	movui	r3,65280
   40350:	00800234 	movhi	r2,8
   40354:	10840c04 	addi	r2,r2,4144
   40358:	10c00035 	stwio	r3,0(r2)
	  alt_printf("%x\n",j);
	  alt_printf("%x\n",k);
	  alt_printf("%x\n",l);
	  alt_printf("%x\n",m);
	  */
  };
   4035c:	003f9506 	br	401b4 <__alt_data_end+0xfffcf474>

00040360 <_getc_r>:
   40360:	defffd04 	addi	sp,sp,-12
   40364:	dc000115 	stw	r16,4(sp)
   40368:	dfc00215 	stw	ra,8(sp)
   4036c:	2021883a 	mov	r16,r4
   40370:	20000226 	beq	r4,zero,4037c <_getc_r+0x1c>
   40374:	20800e17 	ldw	r2,56(r4)
   40378:	10000c26 	beq	r2,zero,403ac <_getc_r+0x4c>
   4037c:	28800117 	ldw	r2,4(r5)
   40380:	10bfffc4 	addi	r2,r2,-1
   40384:	28800115 	stw	r2,4(r5)
   40388:	10000c16 	blt	r2,zero,403bc <_getc_r+0x5c>
   4038c:	28800017 	ldw	r2,0(r5)
   40390:	10c00044 	addi	r3,r2,1
   40394:	28c00015 	stw	r3,0(r5)
   40398:	10800003 	ldbu	r2,0(r2)
   4039c:	dfc00217 	ldw	ra,8(sp)
   403a0:	dc000117 	ldw	r16,4(sp)
   403a4:	dec00304 	addi	sp,sp,12
   403a8:	f800283a 	ret
   403ac:	d9400015 	stw	r5,0(sp)
   403b0:	00408400 	call	40840 <__sinit>
   403b4:	d9400017 	ldw	r5,0(sp)
   403b8:	003ff006 	br	4037c <__alt_data_end+0xfffcf63c>
   403bc:	8009883a 	mov	r4,r16
   403c0:	dfc00217 	ldw	ra,8(sp)
   403c4:	dc000117 	ldw	r16,4(sp)
   403c8:	dec00304 	addi	sp,sp,12
   403cc:	00404581 	jmpi	40458 <__srget_r>

000403d0 <getc>:
   403d0:	00800134 	movhi	r2,4
   403d4:	defffd04 	addi	sp,sp,-12
   403d8:	109c3604 	addi	r2,r2,28888
   403dc:	dc400115 	stw	r17,4(sp)
   403e0:	14400017 	ldw	r17,0(r2)
   403e4:	dc000015 	stw	r16,0(sp)
   403e8:	dfc00215 	stw	ra,8(sp)
   403ec:	2021883a 	mov	r16,r4
   403f0:	88000226 	beq	r17,zero,403fc <getc+0x2c>
   403f4:	88800e17 	ldw	r2,56(r17)
   403f8:	10000d26 	beq	r2,zero,40430 <getc+0x60>
   403fc:	80800117 	ldw	r2,4(r16)
   40400:	10bfffc4 	addi	r2,r2,-1
   40404:	80800115 	stw	r2,4(r16)
   40408:	10000c16 	blt	r2,zero,4043c <getc+0x6c>
   4040c:	80800017 	ldw	r2,0(r16)
   40410:	10c00044 	addi	r3,r2,1
   40414:	80c00015 	stw	r3,0(r16)
   40418:	10800003 	ldbu	r2,0(r2)
   4041c:	dfc00217 	ldw	ra,8(sp)
   40420:	dc400117 	ldw	r17,4(sp)
   40424:	dc000017 	ldw	r16,0(sp)
   40428:	dec00304 	addi	sp,sp,12
   4042c:	f800283a 	ret
   40430:	8809883a 	mov	r4,r17
   40434:	00408400 	call	40840 <__sinit>
   40438:	003ff006 	br	403fc <__alt_data_end+0xfffcf6bc>
   4043c:	800b883a 	mov	r5,r16
   40440:	8809883a 	mov	r4,r17
   40444:	dfc00217 	ldw	ra,8(sp)
   40448:	dc400117 	ldw	r17,4(sp)
   4044c:	dc000017 	ldw	r16,0(sp)
   40450:	dec00304 	addi	sp,sp,12
   40454:	00404581 	jmpi	40458 <__srget_r>

00040458 <__srget_r>:
   40458:	defffd04 	addi	sp,sp,-12
   4045c:	dc400115 	stw	r17,4(sp)
   40460:	dc000015 	stw	r16,0(sp)
   40464:	dfc00215 	stw	ra,8(sp)
   40468:	2023883a 	mov	r17,r4
   4046c:	2821883a 	mov	r16,r5
   40470:	20000226 	beq	r4,zero,4047c <__srget_r+0x24>
   40474:	20800e17 	ldw	r2,56(r4)
   40478:	10001026 	beq	r2,zero,404bc <__srget_r+0x64>
   4047c:	800b883a 	mov	r5,r16
   40480:	8809883a 	mov	r4,r17
   40484:	00413680 	call	41368 <__srefill_r>
   40488:	10000e1e 	bne	r2,zero,404c4 <__srget_r+0x6c>
   4048c:	80c00017 	ldw	r3,0(r16)
   40490:	80800117 	ldw	r2,4(r16)
   40494:	19000044 	addi	r4,r3,1
   40498:	10bfffc4 	addi	r2,r2,-1
   4049c:	80800115 	stw	r2,4(r16)
   404a0:	81000015 	stw	r4,0(r16)
   404a4:	18800003 	ldbu	r2,0(r3)
   404a8:	dfc00217 	ldw	ra,8(sp)
   404ac:	dc400117 	ldw	r17,4(sp)
   404b0:	dc000017 	ldw	r16,0(sp)
   404b4:	dec00304 	addi	sp,sp,12
   404b8:	f800283a 	ret
   404bc:	00408400 	call	40840 <__sinit>
   404c0:	003fee06 	br	4047c <__alt_data_end+0xfffcf73c>
   404c4:	00bfffc4 	movi	r2,-1
   404c8:	003ff706 	br	404a8 <__alt_data_end+0xfffcf768>

000404cc <__srget>:
   404cc:	00800134 	movhi	r2,4
   404d0:	109c3604 	addi	r2,r2,28888
   404d4:	200b883a 	mov	r5,r4
   404d8:	11000017 	ldw	r4,0(r2)
   404dc:	00404581 	jmpi	40458 <__srget_r>

000404e0 <__fp_unlock>:
   404e0:	0005883a 	mov	r2,zero
   404e4:	f800283a 	ret

000404e8 <_cleanup_r>:
   404e8:	01400134 	movhi	r5,4
   404ec:	2945e004 	addi	r5,r5,6016
   404f0:	00409541 	jmpi	40954 <_fwalk_reent>

000404f4 <__sinit.part.1>:
   404f4:	defff704 	addi	sp,sp,-36
   404f8:	00c00134 	movhi	r3,4
   404fc:	dfc00815 	stw	ra,32(sp)
   40500:	ddc00715 	stw	r23,28(sp)
   40504:	dd800615 	stw	r22,24(sp)
   40508:	dd400515 	stw	r21,20(sp)
   4050c:	dd000415 	stw	r20,16(sp)
   40510:	dcc00315 	stw	r19,12(sp)
   40514:	dc800215 	stw	r18,8(sp)
   40518:	dc400115 	stw	r17,4(sp)
   4051c:	dc000015 	stw	r16,0(sp)
   40520:	18c13a04 	addi	r3,r3,1256
   40524:	24000117 	ldw	r16,4(r4)
   40528:	20c00f15 	stw	r3,60(r4)
   4052c:	2080bb04 	addi	r2,r4,748
   40530:	00c000c4 	movi	r3,3
   40534:	20c0b915 	stw	r3,740(r4)
   40538:	2080ba15 	stw	r2,744(r4)
   4053c:	2000b815 	stw	zero,736(r4)
   40540:	05c00204 	movi	r23,8
   40544:	00800104 	movi	r2,4
   40548:	2025883a 	mov	r18,r4
   4054c:	b80d883a 	mov	r6,r23
   40550:	81001704 	addi	r4,r16,92
   40554:	000b883a 	mov	r5,zero
   40558:	80000015 	stw	zero,0(r16)
   4055c:	80000115 	stw	zero,4(r16)
   40560:	80000215 	stw	zero,8(r16)
   40564:	8080030d 	sth	r2,12(r16)
   40568:	80001915 	stw	zero,100(r16)
   4056c:	8000038d 	sth	zero,14(r16)
   40570:	80000415 	stw	zero,16(r16)
   40574:	80000515 	stw	zero,20(r16)
   40578:	80000615 	stw	zero,24(r16)
   4057c:	00412240 	call	41224 <memset>
   40580:	05800134 	movhi	r22,4
   40584:	94400217 	ldw	r17,8(r18)
   40588:	05400134 	movhi	r21,4
   4058c:	05000134 	movhi	r20,4
   40590:	04c00134 	movhi	r19,4
   40594:	b5856404 	addi	r22,r22,5520
   40598:	ad457b04 	addi	r21,r21,5612
   4059c:	a5059a04 	addi	r20,r20,5736
   405a0:	9cc5b104 	addi	r19,r19,5828
   405a4:	85800815 	stw	r22,32(r16)
   405a8:	85400915 	stw	r21,36(r16)
   405ac:	85000a15 	stw	r20,40(r16)
   405b0:	84c00b15 	stw	r19,44(r16)
   405b4:	84000715 	stw	r16,28(r16)
   405b8:	00800284 	movi	r2,10
   405bc:	8880030d 	sth	r2,12(r17)
   405c0:	00800044 	movi	r2,1
   405c4:	b80d883a 	mov	r6,r23
   405c8:	89001704 	addi	r4,r17,92
   405cc:	000b883a 	mov	r5,zero
   405d0:	88000015 	stw	zero,0(r17)
   405d4:	88000115 	stw	zero,4(r17)
   405d8:	88000215 	stw	zero,8(r17)
   405dc:	88001915 	stw	zero,100(r17)
   405e0:	8880038d 	sth	r2,14(r17)
   405e4:	88000415 	stw	zero,16(r17)
   405e8:	88000515 	stw	zero,20(r17)
   405ec:	88000615 	stw	zero,24(r17)
   405f0:	00412240 	call	41224 <memset>
   405f4:	94000317 	ldw	r16,12(r18)
   405f8:	00800484 	movi	r2,18
   405fc:	8c400715 	stw	r17,28(r17)
   40600:	8d800815 	stw	r22,32(r17)
   40604:	8d400915 	stw	r21,36(r17)
   40608:	8d000a15 	stw	r20,40(r17)
   4060c:	8cc00b15 	stw	r19,44(r17)
   40610:	8080030d 	sth	r2,12(r16)
   40614:	00800084 	movi	r2,2
   40618:	80000015 	stw	zero,0(r16)
   4061c:	80000115 	stw	zero,4(r16)
   40620:	80000215 	stw	zero,8(r16)
   40624:	80001915 	stw	zero,100(r16)
   40628:	8080038d 	sth	r2,14(r16)
   4062c:	80000415 	stw	zero,16(r16)
   40630:	80000515 	stw	zero,20(r16)
   40634:	80000615 	stw	zero,24(r16)
   40638:	b80d883a 	mov	r6,r23
   4063c:	000b883a 	mov	r5,zero
   40640:	81001704 	addi	r4,r16,92
   40644:	00412240 	call	41224 <memset>
   40648:	00800044 	movi	r2,1
   4064c:	84000715 	stw	r16,28(r16)
   40650:	85800815 	stw	r22,32(r16)
   40654:	85400915 	stw	r21,36(r16)
   40658:	85000a15 	stw	r20,40(r16)
   4065c:	84c00b15 	stw	r19,44(r16)
   40660:	90800e15 	stw	r2,56(r18)
   40664:	dfc00817 	ldw	ra,32(sp)
   40668:	ddc00717 	ldw	r23,28(sp)
   4066c:	dd800617 	ldw	r22,24(sp)
   40670:	dd400517 	ldw	r21,20(sp)
   40674:	dd000417 	ldw	r20,16(sp)
   40678:	dcc00317 	ldw	r19,12(sp)
   4067c:	dc800217 	ldw	r18,8(sp)
   40680:	dc400117 	ldw	r17,4(sp)
   40684:	dc000017 	ldw	r16,0(sp)
   40688:	dec00904 	addi	sp,sp,36
   4068c:	f800283a 	ret

00040690 <__fp_lock>:
   40690:	0005883a 	mov	r2,zero
   40694:	f800283a 	ret

00040698 <__sfmoreglue>:
   40698:	defffc04 	addi	sp,sp,-16
   4069c:	dc800215 	stw	r18,8(sp)
   406a0:	2825883a 	mov	r18,r5
   406a4:	dc000015 	stw	r16,0(sp)
   406a8:	01401a04 	movi	r5,104
   406ac:	2021883a 	mov	r16,r4
   406b0:	913fffc4 	addi	r4,r18,-1
   406b4:	dfc00315 	stw	ra,12(sp)
   406b8:	dc400115 	stw	r17,4(sp)
   406bc:	004228c0 	call	4228c <__mulsi3>
   406c0:	8009883a 	mov	r4,r16
   406c4:	11401d04 	addi	r5,r2,116
   406c8:	1023883a 	mov	r17,r2
   406cc:	0040a180 	call	40a18 <_malloc_r>
   406d0:	1021883a 	mov	r16,r2
   406d4:	10000726 	beq	r2,zero,406f4 <__sfmoreglue+0x5c>
   406d8:	11000304 	addi	r4,r2,12
   406dc:	10000015 	stw	zero,0(r2)
   406e0:	14800115 	stw	r18,4(r2)
   406e4:	11000215 	stw	r4,8(r2)
   406e8:	89801a04 	addi	r6,r17,104
   406ec:	000b883a 	mov	r5,zero
   406f0:	00412240 	call	41224 <memset>
   406f4:	8005883a 	mov	r2,r16
   406f8:	dfc00317 	ldw	ra,12(sp)
   406fc:	dc800217 	ldw	r18,8(sp)
   40700:	dc400117 	ldw	r17,4(sp)
   40704:	dc000017 	ldw	r16,0(sp)
   40708:	dec00404 	addi	sp,sp,16
   4070c:	f800283a 	ret

00040710 <__sfp>:
   40710:	defffb04 	addi	sp,sp,-20
   40714:	dc000015 	stw	r16,0(sp)
   40718:	04000134 	movhi	r16,4
   4071c:	841c3504 	addi	r16,r16,28884
   40720:	dcc00315 	stw	r19,12(sp)
   40724:	2027883a 	mov	r19,r4
   40728:	81000017 	ldw	r4,0(r16)
   4072c:	dfc00415 	stw	ra,16(sp)
   40730:	dc800215 	stw	r18,8(sp)
   40734:	20800e17 	ldw	r2,56(r4)
   40738:	dc400115 	stw	r17,4(sp)
   4073c:	1000021e 	bne	r2,zero,40748 <__sfp+0x38>
   40740:	00404f40 	call	404f4 <__sinit.part.1>
   40744:	81000017 	ldw	r4,0(r16)
   40748:	2480b804 	addi	r18,r4,736
   4074c:	047fffc4 	movi	r17,-1
   40750:	91000117 	ldw	r4,4(r18)
   40754:	94000217 	ldw	r16,8(r18)
   40758:	213fffc4 	addi	r4,r4,-1
   4075c:	20000a16 	blt	r4,zero,40788 <__sfp+0x78>
   40760:	8080030f 	ldh	r2,12(r16)
   40764:	10000c26 	beq	r2,zero,40798 <__sfp+0x88>
   40768:	80c01d04 	addi	r3,r16,116
   4076c:	00000206 	br	40778 <__sfp+0x68>
   40770:	18bfe60f 	ldh	r2,-104(r3)
   40774:	10000826 	beq	r2,zero,40798 <__sfp+0x88>
   40778:	213fffc4 	addi	r4,r4,-1
   4077c:	1c3ffd04 	addi	r16,r3,-12
   40780:	18c01a04 	addi	r3,r3,104
   40784:	247ffa1e 	bne	r4,r17,40770 <__alt_data_end+0xfffcfa30>
   40788:	90800017 	ldw	r2,0(r18)
   4078c:	10001d26 	beq	r2,zero,40804 <__sfp+0xf4>
   40790:	1025883a 	mov	r18,r2
   40794:	003fee06 	br	40750 <__alt_data_end+0xfffcfa10>
   40798:	00bfffc4 	movi	r2,-1
   4079c:	8080038d 	sth	r2,14(r16)
   407a0:	00800044 	movi	r2,1
   407a4:	8080030d 	sth	r2,12(r16)
   407a8:	80001915 	stw	zero,100(r16)
   407ac:	80000015 	stw	zero,0(r16)
   407b0:	80000215 	stw	zero,8(r16)
   407b4:	80000115 	stw	zero,4(r16)
   407b8:	80000415 	stw	zero,16(r16)
   407bc:	80000515 	stw	zero,20(r16)
   407c0:	80000615 	stw	zero,24(r16)
   407c4:	01800204 	movi	r6,8
   407c8:	000b883a 	mov	r5,zero
   407cc:	81001704 	addi	r4,r16,92
   407d0:	00412240 	call	41224 <memset>
   407d4:	8005883a 	mov	r2,r16
   407d8:	80000c15 	stw	zero,48(r16)
   407dc:	80000d15 	stw	zero,52(r16)
   407e0:	80001115 	stw	zero,68(r16)
   407e4:	80001215 	stw	zero,72(r16)
   407e8:	dfc00417 	ldw	ra,16(sp)
   407ec:	dcc00317 	ldw	r19,12(sp)
   407f0:	dc800217 	ldw	r18,8(sp)
   407f4:	dc400117 	ldw	r17,4(sp)
   407f8:	dc000017 	ldw	r16,0(sp)
   407fc:	dec00504 	addi	sp,sp,20
   40800:	f800283a 	ret
   40804:	01400104 	movi	r5,4
   40808:	9809883a 	mov	r4,r19
   4080c:	00406980 	call	40698 <__sfmoreglue>
   40810:	90800015 	stw	r2,0(r18)
   40814:	103fde1e 	bne	r2,zero,40790 <__alt_data_end+0xfffcfa50>
   40818:	00800304 	movi	r2,12
   4081c:	98800015 	stw	r2,0(r19)
   40820:	0005883a 	mov	r2,zero
   40824:	003ff006 	br	407e8 <__alt_data_end+0xfffcfaa8>

00040828 <_cleanup>:
   40828:	00800134 	movhi	r2,4
   4082c:	109c3504 	addi	r2,r2,28884
   40830:	11000017 	ldw	r4,0(r2)
   40834:	01400134 	movhi	r5,4
   40838:	2945e004 	addi	r5,r5,6016
   4083c:	00409541 	jmpi	40954 <_fwalk_reent>

00040840 <__sinit>:
   40840:	20800e17 	ldw	r2,56(r4)
   40844:	10000126 	beq	r2,zero,4084c <__sinit+0xc>
   40848:	f800283a 	ret
   4084c:	00404f41 	jmpi	404f4 <__sinit.part.1>

00040850 <__sfp_lock_acquire>:
   40850:	f800283a 	ret

00040854 <__sfp_lock_release>:
   40854:	f800283a 	ret

00040858 <__sinit_lock_acquire>:
   40858:	f800283a 	ret

0004085c <__sinit_lock_release>:
   4085c:	f800283a 	ret

00040860 <__fp_lock_all>:
   40860:	00800134 	movhi	r2,4
   40864:	109c3604 	addi	r2,r2,28888
   40868:	11000017 	ldw	r4,0(r2)
   4086c:	01400134 	movhi	r5,4
   40870:	2941a404 	addi	r5,r5,1680
   40874:	00408901 	jmpi	40890 <_fwalk>

00040878 <__fp_unlock_all>:
   40878:	00800134 	movhi	r2,4
   4087c:	109c3604 	addi	r2,r2,28888
   40880:	11000017 	ldw	r4,0(r2)
   40884:	01400134 	movhi	r5,4
   40888:	29413804 	addi	r5,r5,1248
   4088c:	00408901 	jmpi	40890 <_fwalk>

00040890 <_fwalk>:
   40890:	defff704 	addi	sp,sp,-36
   40894:	dd000415 	stw	r20,16(sp)
   40898:	dfc00815 	stw	ra,32(sp)
   4089c:	ddc00715 	stw	r23,28(sp)
   408a0:	dd800615 	stw	r22,24(sp)
   408a4:	dd400515 	stw	r21,20(sp)
   408a8:	dcc00315 	stw	r19,12(sp)
   408ac:	dc800215 	stw	r18,8(sp)
   408b0:	dc400115 	stw	r17,4(sp)
   408b4:	dc000015 	stw	r16,0(sp)
   408b8:	2500b804 	addi	r20,r4,736
   408bc:	a0002326 	beq	r20,zero,4094c <_fwalk+0xbc>
   408c0:	282b883a 	mov	r21,r5
   408c4:	002f883a 	mov	r23,zero
   408c8:	05800044 	movi	r22,1
   408cc:	04ffffc4 	movi	r19,-1
   408d0:	a4400117 	ldw	r17,4(r20)
   408d4:	a4800217 	ldw	r18,8(r20)
   408d8:	8c7fffc4 	addi	r17,r17,-1
   408dc:	88000d16 	blt	r17,zero,40914 <_fwalk+0x84>
   408e0:	94000304 	addi	r16,r18,12
   408e4:	94800384 	addi	r18,r18,14
   408e8:	8080000b 	ldhu	r2,0(r16)
   408ec:	8c7fffc4 	addi	r17,r17,-1
   408f0:	813ffd04 	addi	r4,r16,-12
   408f4:	b080042e 	bgeu	r22,r2,40908 <_fwalk+0x78>
   408f8:	9080000f 	ldh	r2,0(r18)
   408fc:	14c00226 	beq	r2,r19,40908 <_fwalk+0x78>
   40900:	a83ee83a 	callr	r21
   40904:	b8aeb03a 	or	r23,r23,r2
   40908:	84001a04 	addi	r16,r16,104
   4090c:	94801a04 	addi	r18,r18,104
   40910:	8cfff51e 	bne	r17,r19,408e8 <__alt_data_end+0xfffcfba8>
   40914:	a5000017 	ldw	r20,0(r20)
   40918:	a03fed1e 	bne	r20,zero,408d0 <__alt_data_end+0xfffcfb90>
   4091c:	b805883a 	mov	r2,r23
   40920:	dfc00817 	ldw	ra,32(sp)
   40924:	ddc00717 	ldw	r23,28(sp)
   40928:	dd800617 	ldw	r22,24(sp)
   4092c:	dd400517 	ldw	r21,20(sp)
   40930:	dd000417 	ldw	r20,16(sp)
   40934:	dcc00317 	ldw	r19,12(sp)
   40938:	dc800217 	ldw	r18,8(sp)
   4093c:	dc400117 	ldw	r17,4(sp)
   40940:	dc000017 	ldw	r16,0(sp)
   40944:	dec00904 	addi	sp,sp,36
   40948:	f800283a 	ret
   4094c:	002f883a 	mov	r23,zero
   40950:	003ff206 	br	4091c <__alt_data_end+0xfffcfbdc>

00040954 <_fwalk_reent>:
   40954:	defff704 	addi	sp,sp,-36
   40958:	dd000415 	stw	r20,16(sp)
   4095c:	dfc00815 	stw	ra,32(sp)
   40960:	ddc00715 	stw	r23,28(sp)
   40964:	dd800615 	stw	r22,24(sp)
   40968:	dd400515 	stw	r21,20(sp)
   4096c:	dcc00315 	stw	r19,12(sp)
   40970:	dc800215 	stw	r18,8(sp)
   40974:	dc400115 	stw	r17,4(sp)
   40978:	dc000015 	stw	r16,0(sp)
   4097c:	2500b804 	addi	r20,r4,736
   40980:	a0002326 	beq	r20,zero,40a10 <_fwalk_reent+0xbc>
   40984:	282b883a 	mov	r21,r5
   40988:	2027883a 	mov	r19,r4
   4098c:	002f883a 	mov	r23,zero
   40990:	05800044 	movi	r22,1
   40994:	04bfffc4 	movi	r18,-1
   40998:	a4400117 	ldw	r17,4(r20)
   4099c:	a4000217 	ldw	r16,8(r20)
   409a0:	8c7fffc4 	addi	r17,r17,-1
   409a4:	88000c16 	blt	r17,zero,409d8 <_fwalk_reent+0x84>
   409a8:	84000304 	addi	r16,r16,12
   409ac:	8080000b 	ldhu	r2,0(r16)
   409b0:	8c7fffc4 	addi	r17,r17,-1
   409b4:	817ffd04 	addi	r5,r16,-12
   409b8:	b080052e 	bgeu	r22,r2,409d0 <_fwalk_reent+0x7c>
   409bc:	8080008f 	ldh	r2,2(r16)
   409c0:	9809883a 	mov	r4,r19
   409c4:	14800226 	beq	r2,r18,409d0 <_fwalk_reent+0x7c>
   409c8:	a83ee83a 	callr	r21
   409cc:	b8aeb03a 	or	r23,r23,r2
   409d0:	84001a04 	addi	r16,r16,104
   409d4:	8cbff51e 	bne	r17,r18,409ac <__alt_data_end+0xfffcfc6c>
   409d8:	a5000017 	ldw	r20,0(r20)
   409dc:	a03fee1e 	bne	r20,zero,40998 <__alt_data_end+0xfffcfc58>
   409e0:	b805883a 	mov	r2,r23
   409e4:	dfc00817 	ldw	ra,32(sp)
   409e8:	ddc00717 	ldw	r23,28(sp)
   409ec:	dd800617 	ldw	r22,24(sp)
   409f0:	dd400517 	ldw	r21,20(sp)
   409f4:	dd000417 	ldw	r20,16(sp)
   409f8:	dcc00317 	ldw	r19,12(sp)
   409fc:	dc800217 	ldw	r18,8(sp)
   40a00:	dc400117 	ldw	r17,4(sp)
   40a04:	dc000017 	ldw	r16,0(sp)
   40a08:	dec00904 	addi	sp,sp,36
   40a0c:	f800283a 	ret
   40a10:	002f883a 	mov	r23,zero
   40a14:	003ff206 	br	409e0 <__alt_data_end+0xfffcfca0>

00040a18 <_malloc_r>:
   40a18:	defff504 	addi	sp,sp,-44
   40a1c:	dc800315 	stw	r18,12(sp)
   40a20:	dfc00a15 	stw	ra,40(sp)
   40a24:	df000915 	stw	fp,36(sp)
   40a28:	ddc00815 	stw	r23,32(sp)
   40a2c:	dd800715 	stw	r22,28(sp)
   40a30:	dd400615 	stw	r21,24(sp)
   40a34:	dd000515 	stw	r20,20(sp)
   40a38:	dcc00415 	stw	r19,16(sp)
   40a3c:	dc400215 	stw	r17,8(sp)
   40a40:	dc000115 	stw	r16,4(sp)
   40a44:	288002c4 	addi	r2,r5,11
   40a48:	00c00584 	movi	r3,22
   40a4c:	2025883a 	mov	r18,r4
   40a50:	18807f2e 	bgeu	r3,r2,40c50 <_malloc_r+0x238>
   40a54:	047ffe04 	movi	r17,-8
   40a58:	1462703a 	and	r17,r2,r17
   40a5c:	8800a316 	blt	r17,zero,40cec <_malloc_r+0x2d4>
   40a60:	8940a236 	bltu	r17,r5,40cec <_malloc_r+0x2d4>
   40a64:	00427e00 	call	427e0 <__malloc_lock>
   40a68:	00807dc4 	movi	r2,503
   40a6c:	1441e92e 	bgeu	r2,r17,41214 <_malloc_r+0x7fc>
   40a70:	8804d27a 	srli	r2,r17,9
   40a74:	1000a126 	beq	r2,zero,40cfc <_malloc_r+0x2e4>
   40a78:	00c00104 	movi	r3,4
   40a7c:	18811e36 	bltu	r3,r2,40ef8 <_malloc_r+0x4e0>
   40a80:	8804d1ba 	srli	r2,r17,6
   40a84:	12000e44 	addi	r8,r2,57
   40a88:	11c00e04 	addi	r7,r2,56
   40a8c:	4209883a 	add	r4,r8,r8
   40a90:	04c00134 	movhi	r19,4
   40a94:	2109883a 	add	r4,r4,r4
   40a98:	9cd6b104 	addi	r19,r19,23236
   40a9c:	2109883a 	add	r4,r4,r4
   40aa0:	9909883a 	add	r4,r19,r4
   40aa4:	24000117 	ldw	r16,4(r4)
   40aa8:	213ffe04 	addi	r4,r4,-8
   40aac:	24009726 	beq	r4,r16,40d0c <_malloc_r+0x2f4>
   40ab0:	80800117 	ldw	r2,4(r16)
   40ab4:	01bfff04 	movi	r6,-4
   40ab8:	014003c4 	movi	r5,15
   40abc:	1184703a 	and	r2,r2,r6
   40ac0:	1447c83a 	sub	r3,r2,r17
   40ac4:	28c00716 	blt	r5,r3,40ae4 <_malloc_r+0xcc>
   40ac8:	1800920e 	bge	r3,zero,40d14 <_malloc_r+0x2fc>
   40acc:	84000317 	ldw	r16,12(r16)
   40ad0:	24008e26 	beq	r4,r16,40d0c <_malloc_r+0x2f4>
   40ad4:	80800117 	ldw	r2,4(r16)
   40ad8:	1184703a 	and	r2,r2,r6
   40adc:	1447c83a 	sub	r3,r2,r17
   40ae0:	28fff90e 	bge	r5,r3,40ac8 <__alt_data_end+0xfffcfd88>
   40ae4:	3809883a 	mov	r4,r7
   40ae8:	01800134 	movhi	r6,4
   40aec:	9c000417 	ldw	r16,16(r19)
   40af0:	3196b104 	addi	r6,r6,23236
   40af4:	32000204 	addi	r8,r6,8
   40af8:	82013426 	beq	r16,r8,40fcc <_malloc_r+0x5b4>
   40afc:	80c00117 	ldw	r3,4(r16)
   40b00:	00bfff04 	movi	r2,-4
   40b04:	188e703a 	and	r7,r3,r2
   40b08:	3c45c83a 	sub	r2,r7,r17
   40b0c:	00c003c4 	movi	r3,15
   40b10:	18811f16 	blt	r3,r2,40f90 <_malloc_r+0x578>
   40b14:	32000515 	stw	r8,20(r6)
   40b18:	32000415 	stw	r8,16(r6)
   40b1c:	10007f0e 	bge	r2,zero,40d1c <_malloc_r+0x304>
   40b20:	00807fc4 	movi	r2,511
   40b24:	11c0fd36 	bltu	r2,r7,40f1c <_malloc_r+0x504>
   40b28:	3806d0fa 	srli	r3,r7,3
   40b2c:	01c00044 	movi	r7,1
   40b30:	30800117 	ldw	r2,4(r6)
   40b34:	19400044 	addi	r5,r3,1
   40b38:	294b883a 	add	r5,r5,r5
   40b3c:	1807d0ba 	srai	r3,r3,2
   40b40:	294b883a 	add	r5,r5,r5
   40b44:	294b883a 	add	r5,r5,r5
   40b48:	298b883a 	add	r5,r5,r6
   40b4c:	38c6983a 	sll	r3,r7,r3
   40b50:	29c00017 	ldw	r7,0(r5)
   40b54:	2a7ffe04 	addi	r9,r5,-8
   40b58:	1886b03a 	or	r3,r3,r2
   40b5c:	82400315 	stw	r9,12(r16)
   40b60:	81c00215 	stw	r7,8(r16)
   40b64:	30c00115 	stw	r3,4(r6)
   40b68:	2c000015 	stw	r16,0(r5)
   40b6c:	3c000315 	stw	r16,12(r7)
   40b70:	2005d0ba 	srai	r2,r4,2
   40b74:	01400044 	movi	r5,1
   40b78:	288a983a 	sll	r5,r5,r2
   40b7c:	19406f36 	bltu	r3,r5,40d3c <_malloc_r+0x324>
   40b80:	28c4703a 	and	r2,r5,r3
   40b84:	10000a1e 	bne	r2,zero,40bb0 <_malloc_r+0x198>
   40b88:	00bfff04 	movi	r2,-4
   40b8c:	294b883a 	add	r5,r5,r5
   40b90:	2088703a 	and	r4,r4,r2
   40b94:	28c4703a 	and	r2,r5,r3
   40b98:	21000104 	addi	r4,r4,4
   40b9c:	1000041e 	bne	r2,zero,40bb0 <_malloc_r+0x198>
   40ba0:	294b883a 	add	r5,r5,r5
   40ba4:	28c4703a 	and	r2,r5,r3
   40ba8:	21000104 	addi	r4,r4,4
   40bac:	103ffc26 	beq	r2,zero,40ba0 <__alt_data_end+0xfffcfe60>
   40bb0:	02bfff04 	movi	r10,-4
   40bb4:	024003c4 	movi	r9,15
   40bb8:	21800044 	addi	r6,r4,1
   40bbc:	318d883a 	add	r6,r6,r6
   40bc0:	318d883a 	add	r6,r6,r6
   40bc4:	318d883a 	add	r6,r6,r6
   40bc8:	998d883a 	add	r6,r19,r6
   40bcc:	333ffe04 	addi	r12,r6,-8
   40bd0:	2017883a 	mov	r11,r4
   40bd4:	31800104 	addi	r6,r6,4
   40bd8:	34000017 	ldw	r16,0(r6)
   40bdc:	31fffd04 	addi	r7,r6,-12
   40be0:	81c0041e 	bne	r16,r7,40bf4 <_malloc_r+0x1dc>
   40be4:	0000fb06 	br	40fd4 <_malloc_r+0x5bc>
   40be8:	1801030e 	bge	r3,zero,40ff8 <_malloc_r+0x5e0>
   40bec:	84000317 	ldw	r16,12(r16)
   40bf0:	81c0f826 	beq	r16,r7,40fd4 <_malloc_r+0x5bc>
   40bf4:	80800117 	ldw	r2,4(r16)
   40bf8:	1284703a 	and	r2,r2,r10
   40bfc:	1447c83a 	sub	r3,r2,r17
   40c00:	48fff90e 	bge	r9,r3,40be8 <__alt_data_end+0xfffcfea8>
   40c04:	80800317 	ldw	r2,12(r16)
   40c08:	81000217 	ldw	r4,8(r16)
   40c0c:	89400054 	ori	r5,r17,1
   40c10:	81400115 	stw	r5,4(r16)
   40c14:	20800315 	stw	r2,12(r4)
   40c18:	11000215 	stw	r4,8(r2)
   40c1c:	8463883a 	add	r17,r16,r17
   40c20:	9c400515 	stw	r17,20(r19)
   40c24:	9c400415 	stw	r17,16(r19)
   40c28:	18800054 	ori	r2,r3,1
   40c2c:	88800115 	stw	r2,4(r17)
   40c30:	8a000315 	stw	r8,12(r17)
   40c34:	8a000215 	stw	r8,8(r17)
   40c38:	88e3883a 	add	r17,r17,r3
   40c3c:	88c00015 	stw	r3,0(r17)
   40c40:	9009883a 	mov	r4,r18
   40c44:	00427e40 	call	427e4 <__malloc_unlock>
   40c48:	80800204 	addi	r2,r16,8
   40c4c:	00001b06 	br	40cbc <_malloc_r+0x2a4>
   40c50:	04400404 	movi	r17,16
   40c54:	89402536 	bltu	r17,r5,40cec <_malloc_r+0x2d4>
   40c58:	00427e00 	call	427e0 <__malloc_lock>
   40c5c:	00800184 	movi	r2,6
   40c60:	01000084 	movi	r4,2
   40c64:	04c00134 	movhi	r19,4
   40c68:	1085883a 	add	r2,r2,r2
   40c6c:	9cd6b104 	addi	r19,r19,23236
   40c70:	1085883a 	add	r2,r2,r2
   40c74:	9885883a 	add	r2,r19,r2
   40c78:	14000117 	ldw	r16,4(r2)
   40c7c:	10fffe04 	addi	r3,r2,-8
   40c80:	80c0d926 	beq	r16,r3,40fe8 <_malloc_r+0x5d0>
   40c84:	80c00117 	ldw	r3,4(r16)
   40c88:	81000317 	ldw	r4,12(r16)
   40c8c:	00bfff04 	movi	r2,-4
   40c90:	1884703a 	and	r2,r3,r2
   40c94:	81400217 	ldw	r5,8(r16)
   40c98:	8085883a 	add	r2,r16,r2
   40c9c:	10c00117 	ldw	r3,4(r2)
   40ca0:	29000315 	stw	r4,12(r5)
   40ca4:	21400215 	stw	r5,8(r4)
   40ca8:	18c00054 	ori	r3,r3,1
   40cac:	10c00115 	stw	r3,4(r2)
   40cb0:	9009883a 	mov	r4,r18
   40cb4:	00427e40 	call	427e4 <__malloc_unlock>
   40cb8:	80800204 	addi	r2,r16,8
   40cbc:	dfc00a17 	ldw	ra,40(sp)
   40cc0:	df000917 	ldw	fp,36(sp)
   40cc4:	ddc00817 	ldw	r23,32(sp)
   40cc8:	dd800717 	ldw	r22,28(sp)
   40ccc:	dd400617 	ldw	r21,24(sp)
   40cd0:	dd000517 	ldw	r20,20(sp)
   40cd4:	dcc00417 	ldw	r19,16(sp)
   40cd8:	dc800317 	ldw	r18,12(sp)
   40cdc:	dc400217 	ldw	r17,8(sp)
   40ce0:	dc000117 	ldw	r16,4(sp)
   40ce4:	dec00b04 	addi	sp,sp,44
   40ce8:	f800283a 	ret
   40cec:	00800304 	movi	r2,12
   40cf0:	90800015 	stw	r2,0(r18)
   40cf4:	0005883a 	mov	r2,zero
   40cf8:	003ff006 	br	40cbc <__alt_data_end+0xfffcff7c>
   40cfc:	01002004 	movi	r4,128
   40d00:	02001004 	movi	r8,64
   40d04:	01c00fc4 	movi	r7,63
   40d08:	003f6106 	br	40a90 <__alt_data_end+0xfffcfd50>
   40d0c:	4009883a 	mov	r4,r8
   40d10:	003f7506 	br	40ae8 <__alt_data_end+0xfffcfda8>
   40d14:	81000317 	ldw	r4,12(r16)
   40d18:	003fde06 	br	40c94 <__alt_data_end+0xfffcff54>
   40d1c:	81c5883a 	add	r2,r16,r7
   40d20:	11400117 	ldw	r5,4(r2)
   40d24:	9009883a 	mov	r4,r18
   40d28:	29400054 	ori	r5,r5,1
   40d2c:	11400115 	stw	r5,4(r2)
   40d30:	00427e40 	call	427e4 <__malloc_unlock>
   40d34:	80800204 	addi	r2,r16,8
   40d38:	003fe006 	br	40cbc <__alt_data_end+0xfffcff7c>
   40d3c:	9c000217 	ldw	r16,8(r19)
   40d40:	00bfff04 	movi	r2,-4
   40d44:	85800117 	ldw	r22,4(r16)
   40d48:	b0ac703a 	and	r22,r22,r2
   40d4c:	b4400336 	bltu	r22,r17,40d5c <_malloc_r+0x344>
   40d50:	b445c83a 	sub	r2,r22,r17
   40d54:	00c003c4 	movi	r3,15
   40d58:	18805d16 	blt	r3,r2,40ed0 <_malloc_r+0x4b8>
   40d5c:	05c00134 	movhi	r23,4
   40d60:	00800174 	movhi	r2,5
   40d64:	10a2e004 	addi	r2,r2,-29824
   40d68:	bddc3704 	addi	r23,r23,28892
   40d6c:	15400017 	ldw	r21,0(r2)
   40d70:	b8c00017 	ldw	r3,0(r23)
   40d74:	00bfffc4 	movi	r2,-1
   40d78:	858d883a 	add	r6,r16,r22
   40d7c:	8d6b883a 	add	r21,r17,r21
   40d80:	1880ea26 	beq	r3,r2,4112c <_malloc_r+0x714>
   40d84:	ad4403c4 	addi	r21,r21,4111
   40d88:	00bc0004 	movi	r2,-4096
   40d8c:	a8aa703a 	and	r21,r21,r2
   40d90:	a80b883a 	mov	r5,r21
   40d94:	9009883a 	mov	r4,r18
   40d98:	d9800015 	stw	r6,0(sp)
   40d9c:	004153c0 	call	4153c <_sbrk_r>
   40da0:	1029883a 	mov	r20,r2
   40da4:	00bfffc4 	movi	r2,-1
   40da8:	d9800017 	ldw	r6,0(sp)
   40dac:	a080e826 	beq	r20,r2,41150 <_malloc_r+0x738>
   40db0:	a180a636 	bltu	r20,r6,4104c <_malloc_r+0x634>
   40db4:	07000174 	movhi	fp,5
   40db8:	e722e804 	addi	fp,fp,-29792
   40dbc:	e0800017 	ldw	r2,0(fp)
   40dc0:	a887883a 	add	r3,r21,r2
   40dc4:	e0c00015 	stw	r3,0(fp)
   40dc8:	3500e626 	beq	r6,r20,41164 <_malloc_r+0x74c>
   40dcc:	b9000017 	ldw	r4,0(r23)
   40dd0:	00bfffc4 	movi	r2,-1
   40dd4:	2080ee26 	beq	r4,r2,41190 <_malloc_r+0x778>
   40dd8:	a185c83a 	sub	r2,r20,r6
   40ddc:	10c5883a 	add	r2,r2,r3
   40de0:	e0800015 	stw	r2,0(fp)
   40de4:	a0c001cc 	andi	r3,r20,7
   40de8:	1800bc26 	beq	r3,zero,410dc <_malloc_r+0x6c4>
   40dec:	a0e9c83a 	sub	r20,r20,r3
   40df0:	00840204 	movi	r2,4104
   40df4:	a5000204 	addi	r20,r20,8
   40df8:	10c7c83a 	sub	r3,r2,r3
   40dfc:	a545883a 	add	r2,r20,r21
   40e00:	1083ffcc 	andi	r2,r2,4095
   40e04:	18abc83a 	sub	r21,r3,r2
   40e08:	a80b883a 	mov	r5,r21
   40e0c:	9009883a 	mov	r4,r18
   40e10:	004153c0 	call	4153c <_sbrk_r>
   40e14:	00ffffc4 	movi	r3,-1
   40e18:	10c0e126 	beq	r2,r3,411a0 <_malloc_r+0x788>
   40e1c:	1505c83a 	sub	r2,r2,r20
   40e20:	1545883a 	add	r2,r2,r21
   40e24:	10800054 	ori	r2,r2,1
   40e28:	e0c00017 	ldw	r3,0(fp)
   40e2c:	9d000215 	stw	r20,8(r19)
   40e30:	a0800115 	stw	r2,4(r20)
   40e34:	a8c7883a 	add	r3,r21,r3
   40e38:	e0c00015 	stw	r3,0(fp)
   40e3c:	84c00e26 	beq	r16,r19,40e78 <_malloc_r+0x460>
   40e40:	018003c4 	movi	r6,15
   40e44:	3580a72e 	bgeu	r6,r22,410e4 <_malloc_r+0x6cc>
   40e48:	81400117 	ldw	r5,4(r16)
   40e4c:	013ffe04 	movi	r4,-8
   40e50:	b0bffd04 	addi	r2,r22,-12
   40e54:	1104703a 	and	r2,r2,r4
   40e58:	2900004c 	andi	r4,r5,1
   40e5c:	2088b03a 	or	r4,r4,r2
   40e60:	81000115 	stw	r4,4(r16)
   40e64:	01400144 	movi	r5,5
   40e68:	8089883a 	add	r4,r16,r2
   40e6c:	21400115 	stw	r5,4(r4)
   40e70:	21400215 	stw	r5,8(r4)
   40e74:	3080cd36 	bltu	r6,r2,411ac <_malloc_r+0x794>
   40e78:	00800174 	movhi	r2,5
   40e7c:	10a2df04 	addi	r2,r2,-29828
   40e80:	11000017 	ldw	r4,0(r2)
   40e84:	20c0012e 	bgeu	r4,r3,40e8c <_malloc_r+0x474>
   40e88:	10c00015 	stw	r3,0(r2)
   40e8c:	00800174 	movhi	r2,5
   40e90:	10a2de04 	addi	r2,r2,-29832
   40e94:	11000017 	ldw	r4,0(r2)
   40e98:	9c000217 	ldw	r16,8(r19)
   40e9c:	20c0012e 	bgeu	r4,r3,40ea4 <_malloc_r+0x48c>
   40ea0:	10c00015 	stw	r3,0(r2)
   40ea4:	80c00117 	ldw	r3,4(r16)
   40ea8:	00bfff04 	movi	r2,-4
   40eac:	1886703a 	and	r3,r3,r2
   40eb0:	1c45c83a 	sub	r2,r3,r17
   40eb4:	1c400236 	bltu	r3,r17,40ec0 <_malloc_r+0x4a8>
   40eb8:	00c003c4 	movi	r3,15
   40ebc:	18800416 	blt	r3,r2,40ed0 <_malloc_r+0x4b8>
   40ec0:	9009883a 	mov	r4,r18
   40ec4:	00427e40 	call	427e4 <__malloc_unlock>
   40ec8:	0005883a 	mov	r2,zero
   40ecc:	003f7b06 	br	40cbc <__alt_data_end+0xfffcff7c>
   40ed0:	88c00054 	ori	r3,r17,1
   40ed4:	80c00115 	stw	r3,4(r16)
   40ed8:	8463883a 	add	r17,r16,r17
   40edc:	10800054 	ori	r2,r2,1
   40ee0:	9c400215 	stw	r17,8(r19)
   40ee4:	88800115 	stw	r2,4(r17)
   40ee8:	9009883a 	mov	r4,r18
   40eec:	00427e40 	call	427e4 <__malloc_unlock>
   40ef0:	80800204 	addi	r2,r16,8
   40ef4:	003f7106 	br	40cbc <__alt_data_end+0xfffcff7c>
   40ef8:	00c00504 	movi	r3,20
   40efc:	18804a2e 	bgeu	r3,r2,41028 <_malloc_r+0x610>
   40f00:	00c01504 	movi	r3,84
   40f04:	18806e36 	bltu	r3,r2,410c0 <_malloc_r+0x6a8>
   40f08:	8804d33a 	srli	r2,r17,12
   40f0c:	12001bc4 	addi	r8,r2,111
   40f10:	11c01b84 	addi	r7,r2,110
   40f14:	4209883a 	add	r4,r8,r8
   40f18:	003edd06 	br	40a90 <__alt_data_end+0xfffcfd50>
   40f1c:	3804d27a 	srli	r2,r7,9
   40f20:	00c00104 	movi	r3,4
   40f24:	1880442e 	bgeu	r3,r2,41038 <_malloc_r+0x620>
   40f28:	00c00504 	movi	r3,20
   40f2c:	18808136 	bltu	r3,r2,41134 <_malloc_r+0x71c>
   40f30:	11401704 	addi	r5,r2,92
   40f34:	10c016c4 	addi	r3,r2,91
   40f38:	294b883a 	add	r5,r5,r5
   40f3c:	294b883a 	add	r5,r5,r5
   40f40:	294b883a 	add	r5,r5,r5
   40f44:	994b883a 	add	r5,r19,r5
   40f48:	28800017 	ldw	r2,0(r5)
   40f4c:	01800134 	movhi	r6,4
   40f50:	297ffe04 	addi	r5,r5,-8
   40f54:	3196b104 	addi	r6,r6,23236
   40f58:	28806526 	beq	r5,r2,410f0 <_malloc_r+0x6d8>
   40f5c:	01bfff04 	movi	r6,-4
   40f60:	10c00117 	ldw	r3,4(r2)
   40f64:	1986703a 	and	r3,r3,r6
   40f68:	38c0022e 	bgeu	r7,r3,40f74 <_malloc_r+0x55c>
   40f6c:	10800217 	ldw	r2,8(r2)
   40f70:	28bffb1e 	bne	r5,r2,40f60 <__alt_data_end+0xfffd0220>
   40f74:	11400317 	ldw	r5,12(r2)
   40f78:	98c00117 	ldw	r3,4(r19)
   40f7c:	81400315 	stw	r5,12(r16)
   40f80:	80800215 	stw	r2,8(r16)
   40f84:	2c000215 	stw	r16,8(r5)
   40f88:	14000315 	stw	r16,12(r2)
   40f8c:	003ef806 	br	40b70 <__alt_data_end+0xfffcfe30>
   40f90:	88c00054 	ori	r3,r17,1
   40f94:	80c00115 	stw	r3,4(r16)
   40f98:	8463883a 	add	r17,r16,r17
   40f9c:	34400515 	stw	r17,20(r6)
   40fa0:	34400415 	stw	r17,16(r6)
   40fa4:	10c00054 	ori	r3,r2,1
   40fa8:	8a000315 	stw	r8,12(r17)
   40fac:	8a000215 	stw	r8,8(r17)
   40fb0:	88c00115 	stw	r3,4(r17)
   40fb4:	88a3883a 	add	r17,r17,r2
   40fb8:	88800015 	stw	r2,0(r17)
   40fbc:	9009883a 	mov	r4,r18
   40fc0:	00427e40 	call	427e4 <__malloc_unlock>
   40fc4:	80800204 	addi	r2,r16,8
   40fc8:	003f3c06 	br	40cbc <__alt_data_end+0xfffcff7c>
   40fcc:	30c00117 	ldw	r3,4(r6)
   40fd0:	003ee706 	br	40b70 <__alt_data_end+0xfffcfe30>
   40fd4:	5ac00044 	addi	r11,r11,1
   40fd8:	588000cc 	andi	r2,r11,3
   40fdc:	31800204 	addi	r6,r6,8
   40fe0:	103efd1e 	bne	r2,zero,40bd8 <__alt_data_end+0xfffcfe98>
   40fe4:	00002406 	br	41078 <_malloc_r+0x660>
   40fe8:	14000317 	ldw	r16,12(r2)
   40fec:	143f251e 	bne	r2,r16,40c84 <__alt_data_end+0xfffcff44>
   40ff0:	21000084 	addi	r4,r4,2
   40ff4:	003ebc06 	br	40ae8 <__alt_data_end+0xfffcfda8>
   40ff8:	8085883a 	add	r2,r16,r2
   40ffc:	10c00117 	ldw	r3,4(r2)
   41000:	81000317 	ldw	r4,12(r16)
   41004:	81400217 	ldw	r5,8(r16)
   41008:	18c00054 	ori	r3,r3,1
   4100c:	10c00115 	stw	r3,4(r2)
   41010:	29000315 	stw	r4,12(r5)
   41014:	21400215 	stw	r5,8(r4)
   41018:	9009883a 	mov	r4,r18
   4101c:	00427e40 	call	427e4 <__malloc_unlock>
   41020:	80800204 	addi	r2,r16,8
   41024:	003f2506 	br	40cbc <__alt_data_end+0xfffcff7c>
   41028:	12001704 	addi	r8,r2,92
   4102c:	11c016c4 	addi	r7,r2,91
   41030:	4209883a 	add	r4,r8,r8
   41034:	003e9606 	br	40a90 <__alt_data_end+0xfffcfd50>
   41038:	3804d1ba 	srli	r2,r7,6
   4103c:	11400e44 	addi	r5,r2,57
   41040:	10c00e04 	addi	r3,r2,56
   41044:	294b883a 	add	r5,r5,r5
   41048:	003fbc06 	br	40f3c <__alt_data_end+0xfffd01fc>
   4104c:	84ff5926 	beq	r16,r19,40db4 <__alt_data_end+0xfffd0074>
   41050:	00800134 	movhi	r2,4
   41054:	1096b104 	addi	r2,r2,23236
   41058:	14000217 	ldw	r16,8(r2)
   4105c:	00bfff04 	movi	r2,-4
   41060:	80c00117 	ldw	r3,4(r16)
   41064:	1886703a 	and	r3,r3,r2
   41068:	003f9106 	br	40eb0 <__alt_data_end+0xfffd0170>
   4106c:	60800217 	ldw	r2,8(r12)
   41070:	213fffc4 	addi	r4,r4,-1
   41074:	1300651e 	bne	r2,r12,4120c <_malloc_r+0x7f4>
   41078:	208000cc 	andi	r2,r4,3
   4107c:	633ffe04 	addi	r12,r12,-8
   41080:	103ffa1e 	bne	r2,zero,4106c <__alt_data_end+0xfffd032c>
   41084:	98800117 	ldw	r2,4(r19)
   41088:	0146303a 	nor	r3,zero,r5
   4108c:	1884703a 	and	r2,r3,r2
   41090:	98800115 	stw	r2,4(r19)
   41094:	294b883a 	add	r5,r5,r5
   41098:	117f2836 	bltu	r2,r5,40d3c <__alt_data_end+0xfffcfffc>
   4109c:	283f2726 	beq	r5,zero,40d3c <__alt_data_end+0xfffcfffc>
   410a0:	2886703a 	and	r3,r5,r2
   410a4:	5809883a 	mov	r4,r11
   410a8:	183ec31e 	bne	r3,zero,40bb8 <__alt_data_end+0xfffcfe78>
   410ac:	294b883a 	add	r5,r5,r5
   410b0:	2886703a 	and	r3,r5,r2
   410b4:	21000104 	addi	r4,r4,4
   410b8:	183ffc26 	beq	r3,zero,410ac <__alt_data_end+0xfffd036c>
   410bc:	003ebe06 	br	40bb8 <__alt_data_end+0xfffcfe78>
   410c0:	00c05504 	movi	r3,340
   410c4:	18801236 	bltu	r3,r2,41110 <_malloc_r+0x6f8>
   410c8:	8804d3fa 	srli	r2,r17,15
   410cc:	12001e04 	addi	r8,r2,120
   410d0:	11c01dc4 	addi	r7,r2,119
   410d4:	4209883a 	add	r4,r8,r8
   410d8:	003e6d06 	br	40a90 <__alt_data_end+0xfffcfd50>
   410dc:	00c40004 	movi	r3,4096
   410e0:	003f4606 	br	40dfc <__alt_data_end+0xfffd00bc>
   410e4:	00800044 	movi	r2,1
   410e8:	a0800115 	stw	r2,4(r20)
   410ec:	003f7406 	br	40ec0 <__alt_data_end+0xfffd0180>
   410f0:	1805d0ba 	srai	r2,r3,2
   410f4:	01c00044 	movi	r7,1
   410f8:	30c00117 	ldw	r3,4(r6)
   410fc:	388e983a 	sll	r7,r7,r2
   41100:	2805883a 	mov	r2,r5
   41104:	38c6b03a 	or	r3,r7,r3
   41108:	30c00115 	stw	r3,4(r6)
   4110c:	003f9b06 	br	40f7c <__alt_data_end+0xfffd023c>
   41110:	00c15504 	movi	r3,1364
   41114:	18801a36 	bltu	r3,r2,41180 <_malloc_r+0x768>
   41118:	8804d4ba 	srli	r2,r17,18
   4111c:	12001f44 	addi	r8,r2,125
   41120:	11c01f04 	addi	r7,r2,124
   41124:	4209883a 	add	r4,r8,r8
   41128:	003e5906 	br	40a90 <__alt_data_end+0xfffcfd50>
   4112c:	ad400404 	addi	r21,r21,16
   41130:	003f1706 	br	40d90 <__alt_data_end+0xfffd0050>
   41134:	00c01504 	movi	r3,84
   41138:	18802336 	bltu	r3,r2,411c8 <_malloc_r+0x7b0>
   4113c:	3804d33a 	srli	r2,r7,12
   41140:	11401bc4 	addi	r5,r2,111
   41144:	10c01b84 	addi	r3,r2,110
   41148:	294b883a 	add	r5,r5,r5
   4114c:	003f7b06 	br	40f3c <__alt_data_end+0xfffd01fc>
   41150:	9c000217 	ldw	r16,8(r19)
   41154:	00bfff04 	movi	r2,-4
   41158:	80c00117 	ldw	r3,4(r16)
   4115c:	1886703a 	and	r3,r3,r2
   41160:	003f5306 	br	40eb0 <__alt_data_end+0xfffd0170>
   41164:	3083ffcc 	andi	r2,r6,4095
   41168:	103f181e 	bne	r2,zero,40dcc <__alt_data_end+0xfffd008c>
   4116c:	99000217 	ldw	r4,8(r19)
   41170:	b545883a 	add	r2,r22,r21
   41174:	10800054 	ori	r2,r2,1
   41178:	20800115 	stw	r2,4(r4)
   4117c:	003f3e06 	br	40e78 <__alt_data_end+0xfffd0138>
   41180:	01003f84 	movi	r4,254
   41184:	02001fc4 	movi	r8,127
   41188:	01c01f84 	movi	r7,126
   4118c:	003e4006 	br	40a90 <__alt_data_end+0xfffcfd50>
   41190:	00800134 	movhi	r2,4
   41194:	109c3704 	addi	r2,r2,28892
   41198:	15000015 	stw	r20,0(r2)
   4119c:	003f1106 	br	40de4 <__alt_data_end+0xfffd00a4>
   411a0:	00800044 	movi	r2,1
   411a4:	002b883a 	mov	r21,zero
   411a8:	003f1f06 	br	40e28 <__alt_data_end+0xfffd00e8>
   411ac:	81400204 	addi	r5,r16,8
   411b0:	9009883a 	mov	r4,r18
   411b4:	0041c500 	call	41c50 <_free_r>
   411b8:	00800174 	movhi	r2,5
   411bc:	10a2e804 	addi	r2,r2,-29792
   411c0:	10c00017 	ldw	r3,0(r2)
   411c4:	003f2c06 	br	40e78 <__alt_data_end+0xfffd0138>
   411c8:	00c05504 	movi	r3,340
   411cc:	18800536 	bltu	r3,r2,411e4 <_malloc_r+0x7cc>
   411d0:	3804d3fa 	srli	r2,r7,15
   411d4:	11401e04 	addi	r5,r2,120
   411d8:	10c01dc4 	addi	r3,r2,119
   411dc:	294b883a 	add	r5,r5,r5
   411e0:	003f5606 	br	40f3c <__alt_data_end+0xfffd01fc>
   411e4:	00c15504 	movi	r3,1364
   411e8:	18800536 	bltu	r3,r2,41200 <_malloc_r+0x7e8>
   411ec:	3804d4ba 	srli	r2,r7,18
   411f0:	11401f44 	addi	r5,r2,125
   411f4:	10c01f04 	addi	r3,r2,124
   411f8:	294b883a 	add	r5,r5,r5
   411fc:	003f4f06 	br	40f3c <__alt_data_end+0xfffd01fc>
   41200:	01403f84 	movi	r5,254
   41204:	00c01f84 	movi	r3,126
   41208:	003f4c06 	br	40f3c <__alt_data_end+0xfffd01fc>
   4120c:	98800117 	ldw	r2,4(r19)
   41210:	003fa006 	br	41094 <__alt_data_end+0xfffd0354>
   41214:	8808d0fa 	srli	r4,r17,3
   41218:	20800044 	addi	r2,r4,1
   4121c:	1085883a 	add	r2,r2,r2
   41220:	003e9006 	br	40c64 <__alt_data_end+0xfffcff24>

00041224 <memset>:
   41224:	20c000cc 	andi	r3,r4,3
   41228:	2005883a 	mov	r2,r4
   4122c:	18004426 	beq	r3,zero,41340 <memset+0x11c>
   41230:	31ffffc4 	addi	r7,r6,-1
   41234:	30004026 	beq	r6,zero,41338 <memset+0x114>
   41238:	2813883a 	mov	r9,r5
   4123c:	200d883a 	mov	r6,r4
   41240:	2007883a 	mov	r3,r4
   41244:	00000406 	br	41258 <memset+0x34>
   41248:	3a3fffc4 	addi	r8,r7,-1
   4124c:	31800044 	addi	r6,r6,1
   41250:	38003926 	beq	r7,zero,41338 <memset+0x114>
   41254:	400f883a 	mov	r7,r8
   41258:	18c00044 	addi	r3,r3,1
   4125c:	32400005 	stb	r9,0(r6)
   41260:	1a0000cc 	andi	r8,r3,3
   41264:	403ff81e 	bne	r8,zero,41248 <__alt_data_end+0xfffd0508>
   41268:	010000c4 	movi	r4,3
   4126c:	21c02d2e 	bgeu	r4,r7,41324 <memset+0x100>
   41270:	29003fcc 	andi	r4,r5,255
   41274:	200c923a 	slli	r6,r4,8
   41278:	3108b03a 	or	r4,r6,r4
   4127c:	200c943a 	slli	r6,r4,16
   41280:	218cb03a 	or	r6,r4,r6
   41284:	010003c4 	movi	r4,15
   41288:	21c0182e 	bgeu	r4,r7,412ec <memset+0xc8>
   4128c:	3b3ffc04 	addi	r12,r7,-16
   41290:	6018d13a 	srli	r12,r12,4
   41294:	1a000104 	addi	r8,r3,4
   41298:	1ac00204 	addi	r11,r3,8
   4129c:	6008913a 	slli	r4,r12,4
   412a0:	1a800304 	addi	r10,r3,12
   412a4:	1813883a 	mov	r9,r3
   412a8:	21000504 	addi	r4,r4,20
   412ac:	1909883a 	add	r4,r3,r4
   412b0:	49800015 	stw	r6,0(r9)
   412b4:	41800015 	stw	r6,0(r8)
   412b8:	59800015 	stw	r6,0(r11)
   412bc:	51800015 	stw	r6,0(r10)
   412c0:	42000404 	addi	r8,r8,16
   412c4:	4a400404 	addi	r9,r9,16
   412c8:	5ac00404 	addi	r11,r11,16
   412cc:	52800404 	addi	r10,r10,16
   412d0:	413ff71e 	bne	r8,r4,412b0 <__alt_data_end+0xfffd0570>
   412d4:	63000044 	addi	r12,r12,1
   412d8:	6018913a 	slli	r12,r12,4
   412dc:	39c003cc 	andi	r7,r7,15
   412e0:	010000c4 	movi	r4,3
   412e4:	1b07883a 	add	r3,r3,r12
   412e8:	21c00e2e 	bgeu	r4,r7,41324 <memset+0x100>
   412ec:	1813883a 	mov	r9,r3
   412f0:	3811883a 	mov	r8,r7
   412f4:	010000c4 	movi	r4,3
   412f8:	49800015 	stw	r6,0(r9)
   412fc:	423fff04 	addi	r8,r8,-4
   41300:	4a400104 	addi	r9,r9,4
   41304:	223ffc36 	bltu	r4,r8,412f8 <__alt_data_end+0xfffd05b8>
   41308:	393fff04 	addi	r4,r7,-4
   4130c:	2008d0ba 	srli	r4,r4,2
   41310:	39c000cc 	andi	r7,r7,3
   41314:	21000044 	addi	r4,r4,1
   41318:	2109883a 	add	r4,r4,r4
   4131c:	2109883a 	add	r4,r4,r4
   41320:	1907883a 	add	r3,r3,r4
   41324:	38000526 	beq	r7,zero,4133c <memset+0x118>
   41328:	19cf883a 	add	r7,r3,r7
   4132c:	19400005 	stb	r5,0(r3)
   41330:	18c00044 	addi	r3,r3,1
   41334:	38fffd1e 	bne	r7,r3,4132c <__alt_data_end+0xfffd05ec>
   41338:	f800283a 	ret
   4133c:	f800283a 	ret
   41340:	2007883a 	mov	r3,r4
   41344:	300f883a 	mov	r7,r6
   41348:	003fc706 	br	41268 <__alt_data_end+0xfffd0528>

0004134c <lflush>:
   4134c:	2080030b 	ldhu	r2,12(r4)
   41350:	00c00244 	movi	r3,9
   41354:	1080024c 	andi	r2,r2,9
   41358:	10c00226 	beq	r2,r3,41364 <lflush+0x18>
   4135c:	0005883a 	mov	r2,zero
   41360:	f800283a 	ret
   41364:	0041afc1 	jmpi	41afc <fflush>

00041368 <__srefill_r>:
   41368:	defffc04 	addi	sp,sp,-16
   4136c:	dc400115 	stw	r17,4(sp)
   41370:	dc000015 	stw	r16,0(sp)
   41374:	dfc00315 	stw	ra,12(sp)
   41378:	dc800215 	stw	r18,8(sp)
   4137c:	2023883a 	mov	r17,r4
   41380:	2821883a 	mov	r16,r5
   41384:	20000226 	beq	r4,zero,41390 <__srefill_r+0x28>
   41388:	20800e17 	ldw	r2,56(r4)
   4138c:	10003c26 	beq	r2,zero,41480 <__srefill_r+0x118>
   41390:	80c0030b 	ldhu	r3,12(r16)
   41394:	1908000c 	andi	r4,r3,8192
   41398:	1805883a 	mov	r2,r3
   4139c:	2000071e 	bne	r4,zero,413bc <__srefill_r+0x54>
   413a0:	81001917 	ldw	r4,100(r16)
   413a4:	18880014 	ori	r2,r3,8192
   413a8:	00f7ffc4 	movi	r3,-8193
   413ac:	20c8703a 	and	r4,r4,r3
   413b0:	8080030d 	sth	r2,12(r16)
   413b4:	1007883a 	mov	r3,r2
   413b8:	81001915 	stw	r4,100(r16)
   413bc:	80000115 	stw	zero,4(r16)
   413c0:	1100080c 	andi	r4,r2,32
   413c4:	2000571e 	bne	r4,zero,41524 <__srefill_r+0x1bc>
   413c8:	1100010c 	andi	r4,r2,4
   413cc:	20001f26 	beq	r4,zero,4144c <__srefill_r+0xe4>
   413d0:	81400c17 	ldw	r5,48(r16)
   413d4:	28000826 	beq	r5,zero,413f8 <__srefill_r+0x90>
   413d8:	80801004 	addi	r2,r16,64
   413dc:	28800226 	beq	r5,r2,413e8 <__srefill_r+0x80>
   413e0:	8809883a 	mov	r4,r17
   413e4:	0041c500 	call	41c50 <_free_r>
   413e8:	80800f17 	ldw	r2,60(r16)
   413ec:	80000c15 	stw	zero,48(r16)
   413f0:	80800115 	stw	r2,4(r16)
   413f4:	1000391e 	bne	r2,zero,414dc <__srefill_r+0x174>
   413f8:	80800417 	ldw	r2,16(r16)
   413fc:	10004b26 	beq	r2,zero,4152c <__srefill_r+0x1c4>
   41400:	8480030b 	ldhu	r18,12(r16)
   41404:	908000cc 	andi	r2,r18,3
   41408:	10001f1e 	bne	r2,zero,41488 <__srefill_r+0x120>
   4140c:	81800417 	ldw	r6,16(r16)
   41410:	80800817 	ldw	r2,32(r16)
   41414:	81c00517 	ldw	r7,20(r16)
   41418:	81400717 	ldw	r5,28(r16)
   4141c:	81800015 	stw	r6,0(r16)
   41420:	8809883a 	mov	r4,r17
   41424:	103ee83a 	callr	r2
   41428:	80800115 	stw	r2,4(r16)
   4142c:	00800e0e 	bge	zero,r2,41468 <__srefill_r+0x100>
   41430:	0005883a 	mov	r2,zero
   41434:	dfc00317 	ldw	ra,12(sp)
   41438:	dc800217 	ldw	r18,8(sp)
   4143c:	dc400117 	ldw	r17,4(sp)
   41440:	dc000017 	ldw	r16,0(sp)
   41444:	dec00404 	addi	sp,sp,16
   41448:	f800283a 	ret
   4144c:	1100040c 	andi	r4,r2,16
   41450:	20003026 	beq	r4,zero,41514 <__srefill_r+0x1ac>
   41454:	1080020c 	andi	r2,r2,8
   41458:	1000241e 	bne	r2,zero,414ec <__srefill_r+0x184>
   4145c:	18c00114 	ori	r3,r3,4
   41460:	80c0030d 	sth	r3,12(r16)
   41464:	003fe406 	br	413f8 <__alt_data_end+0xfffd06b8>
   41468:	80c0030b 	ldhu	r3,12(r16)
   4146c:	1000161e 	bne	r2,zero,414c8 <__srefill_r+0x160>
   41470:	18c00814 	ori	r3,r3,32
   41474:	00bfffc4 	movi	r2,-1
   41478:	80c0030d 	sth	r3,12(r16)
   4147c:	003fed06 	br	41434 <__alt_data_end+0xfffd06f4>
   41480:	00408400 	call	40840 <__sinit>
   41484:	003fc206 	br	41390 <__alt_data_end+0xfffd0650>
   41488:	00800134 	movhi	r2,4
   4148c:	109c3504 	addi	r2,r2,28884
   41490:	11000017 	ldw	r4,0(r2)
   41494:	01400134 	movhi	r5,4
   41498:	00800044 	movi	r2,1
   4149c:	2944d304 	addi	r5,r5,4940
   414a0:	8080030d 	sth	r2,12(r16)
   414a4:	00408900 	call	40890 <_fwalk>
   414a8:	00800244 	movi	r2,9
   414ac:	8480030d 	sth	r18,12(r16)
   414b0:	9480024c 	andi	r18,r18,9
   414b4:	90bfd51e 	bne	r18,r2,4140c <__alt_data_end+0xfffd06cc>
   414b8:	800b883a 	mov	r5,r16
   414bc:	8809883a 	mov	r4,r17
   414c0:	00418840 	call	41884 <__sflush_r>
   414c4:	003fd106 	br	4140c <__alt_data_end+0xfffd06cc>
   414c8:	18c01014 	ori	r3,r3,64
   414cc:	80000115 	stw	zero,4(r16)
   414d0:	00bfffc4 	movi	r2,-1
   414d4:	80c0030d 	sth	r3,12(r16)
   414d8:	003fd606 	br	41434 <__alt_data_end+0xfffd06f4>
   414dc:	80c00e17 	ldw	r3,56(r16)
   414e0:	0005883a 	mov	r2,zero
   414e4:	80c00015 	stw	r3,0(r16)
   414e8:	003fd206 	br	41434 <__alt_data_end+0xfffd06f4>
   414ec:	800b883a 	mov	r5,r16
   414f0:	8809883a 	mov	r4,r17
   414f4:	0041aa00 	call	41aa0 <_fflush_r>
   414f8:	10000a1e 	bne	r2,zero,41524 <__srefill_r+0x1bc>
   414fc:	8080030b 	ldhu	r2,12(r16)
   41500:	00fffdc4 	movi	r3,-9
   41504:	80000215 	stw	zero,8(r16)
   41508:	1886703a 	and	r3,r3,r2
   4150c:	80000615 	stw	zero,24(r16)
   41510:	003fd206 	br	4145c <__alt_data_end+0xfffd071c>
   41514:	00800244 	movi	r2,9
   41518:	88800015 	stw	r2,0(r17)
   4151c:	18c01014 	ori	r3,r3,64
   41520:	80c0030d 	sth	r3,12(r16)
   41524:	00bfffc4 	movi	r2,-1
   41528:	003fc206 	br	41434 <__alt_data_end+0xfffd06f4>
   4152c:	800b883a 	mov	r5,r16
   41530:	8809883a 	mov	r4,r17
   41534:	0041fc00 	call	41fc0 <__smakebuf_r>
   41538:	003fb106 	br	41400 <__alt_data_end+0xfffd06c0>

0004153c <_sbrk_r>:
   4153c:	defffd04 	addi	sp,sp,-12
   41540:	dc000015 	stw	r16,0(sp)
   41544:	04000174 	movhi	r16,5
   41548:	dc400115 	stw	r17,4(sp)
   4154c:	8422e104 	addi	r16,r16,-29820
   41550:	2023883a 	mov	r17,r4
   41554:	2809883a 	mov	r4,r5
   41558:	dfc00215 	stw	ra,8(sp)
   4155c:	80000015 	stw	zero,0(r16)
   41560:	0042bf40 	call	42bf4 <sbrk>
   41564:	00ffffc4 	movi	r3,-1
   41568:	10c00526 	beq	r2,r3,41580 <_sbrk_r+0x44>
   4156c:	dfc00217 	ldw	ra,8(sp)
   41570:	dc400117 	ldw	r17,4(sp)
   41574:	dc000017 	ldw	r16,0(sp)
   41578:	dec00304 	addi	sp,sp,12
   4157c:	f800283a 	ret
   41580:	80c00017 	ldw	r3,0(r16)
   41584:	183ff926 	beq	r3,zero,4156c <__alt_data_end+0xfffd082c>
   41588:	88c00015 	stw	r3,0(r17)
   4158c:	003ff706 	br	4156c <__alt_data_end+0xfffd082c>

00041590 <__sread>:
   41590:	defffe04 	addi	sp,sp,-8
   41594:	dc000015 	stw	r16,0(sp)
   41598:	2821883a 	mov	r16,r5
   4159c:	2940038f 	ldh	r5,14(r5)
   415a0:	dfc00115 	stw	ra,4(sp)
   415a4:	004217c0 	call	4217c <_read_r>
   415a8:	10000716 	blt	r2,zero,415c8 <__sread+0x38>
   415ac:	80c01417 	ldw	r3,80(r16)
   415b0:	1887883a 	add	r3,r3,r2
   415b4:	80c01415 	stw	r3,80(r16)
   415b8:	dfc00117 	ldw	ra,4(sp)
   415bc:	dc000017 	ldw	r16,0(sp)
   415c0:	dec00204 	addi	sp,sp,8
   415c4:	f800283a 	ret
   415c8:	80c0030b 	ldhu	r3,12(r16)
   415cc:	18fbffcc 	andi	r3,r3,61439
   415d0:	80c0030d 	sth	r3,12(r16)
   415d4:	dfc00117 	ldw	ra,4(sp)
   415d8:	dc000017 	ldw	r16,0(sp)
   415dc:	dec00204 	addi	sp,sp,8
   415e0:	f800283a 	ret

000415e4 <__seofread>:
   415e4:	0005883a 	mov	r2,zero
   415e8:	f800283a 	ret

000415ec <__swrite>:
   415ec:	2880030b 	ldhu	r2,12(r5)
   415f0:	defffb04 	addi	sp,sp,-20
   415f4:	dcc00315 	stw	r19,12(sp)
   415f8:	dc800215 	stw	r18,8(sp)
   415fc:	dc400115 	stw	r17,4(sp)
   41600:	dc000015 	stw	r16,0(sp)
   41604:	dfc00415 	stw	ra,16(sp)
   41608:	10c0400c 	andi	r3,r2,256
   4160c:	2821883a 	mov	r16,r5
   41610:	2023883a 	mov	r17,r4
   41614:	3025883a 	mov	r18,r6
   41618:	3827883a 	mov	r19,r7
   4161c:	18000526 	beq	r3,zero,41634 <__swrite+0x48>
   41620:	2940038f 	ldh	r5,14(r5)
   41624:	01c00084 	movi	r7,2
   41628:	000d883a 	mov	r6,zero
   4162c:	0041f600 	call	41f60 <_lseek_r>
   41630:	8080030b 	ldhu	r2,12(r16)
   41634:	8140038f 	ldh	r5,14(r16)
   41638:	10bbffcc 	andi	r2,r2,61439
   4163c:	980f883a 	mov	r7,r19
   41640:	900d883a 	mov	r6,r18
   41644:	8809883a 	mov	r4,r17
   41648:	8080030d 	sth	r2,12(r16)
   4164c:	dfc00417 	ldw	ra,16(sp)
   41650:	dcc00317 	ldw	r19,12(sp)
   41654:	dc800217 	ldw	r18,8(sp)
   41658:	dc400117 	ldw	r17,4(sp)
   4165c:	dc000017 	ldw	r16,0(sp)
   41660:	dec00504 	addi	sp,sp,20
   41664:	00416cc1 	jmpi	416cc <_write_r>

00041668 <__sseek>:
   41668:	defffe04 	addi	sp,sp,-8
   4166c:	dc000015 	stw	r16,0(sp)
   41670:	2821883a 	mov	r16,r5
   41674:	2940038f 	ldh	r5,14(r5)
   41678:	dfc00115 	stw	ra,4(sp)
   4167c:	0041f600 	call	41f60 <_lseek_r>
   41680:	00ffffc4 	movi	r3,-1
   41684:	10c00826 	beq	r2,r3,416a8 <__sseek+0x40>
   41688:	80c0030b 	ldhu	r3,12(r16)
   4168c:	80801415 	stw	r2,80(r16)
   41690:	18c40014 	ori	r3,r3,4096
   41694:	80c0030d 	sth	r3,12(r16)
   41698:	dfc00117 	ldw	ra,4(sp)
   4169c:	dc000017 	ldw	r16,0(sp)
   416a0:	dec00204 	addi	sp,sp,8
   416a4:	f800283a 	ret
   416a8:	80c0030b 	ldhu	r3,12(r16)
   416ac:	18fbffcc 	andi	r3,r3,61439
   416b0:	80c0030d 	sth	r3,12(r16)
   416b4:	dfc00117 	ldw	ra,4(sp)
   416b8:	dc000017 	ldw	r16,0(sp)
   416bc:	dec00204 	addi	sp,sp,8
   416c0:	f800283a 	ret

000416c4 <__sclose>:
   416c4:	2940038f 	ldh	r5,14(r5)
   416c8:	004172c1 	jmpi	4172c <_close_r>

000416cc <_write_r>:
   416cc:	defffd04 	addi	sp,sp,-12
   416d0:	2805883a 	mov	r2,r5
   416d4:	dc000015 	stw	r16,0(sp)
   416d8:	04000174 	movhi	r16,5
   416dc:	dc400115 	stw	r17,4(sp)
   416e0:	300b883a 	mov	r5,r6
   416e4:	8422e104 	addi	r16,r16,-29820
   416e8:	2023883a 	mov	r17,r4
   416ec:	380d883a 	mov	r6,r7
   416f0:	1009883a 	mov	r4,r2
   416f4:	dfc00215 	stw	ra,8(sp)
   416f8:	80000015 	stw	zero,0(r16)
   416fc:	0042c400 	call	42c40 <write>
   41700:	00ffffc4 	movi	r3,-1
   41704:	10c00526 	beq	r2,r3,4171c <_write_r+0x50>
   41708:	dfc00217 	ldw	ra,8(sp)
   4170c:	dc400117 	ldw	r17,4(sp)
   41710:	dc000017 	ldw	r16,0(sp)
   41714:	dec00304 	addi	sp,sp,12
   41718:	f800283a 	ret
   4171c:	80c00017 	ldw	r3,0(r16)
   41720:	183ff926 	beq	r3,zero,41708 <__alt_data_end+0xfffd09c8>
   41724:	88c00015 	stw	r3,0(r17)
   41728:	003ff706 	br	41708 <__alt_data_end+0xfffd09c8>

0004172c <_close_r>:
   4172c:	defffd04 	addi	sp,sp,-12
   41730:	dc000015 	stw	r16,0(sp)
   41734:	04000174 	movhi	r16,5
   41738:	dc400115 	stw	r17,4(sp)
   4173c:	8422e104 	addi	r16,r16,-29820
   41740:	2023883a 	mov	r17,r4
   41744:	2809883a 	mov	r4,r5
   41748:	dfc00215 	stw	ra,8(sp)
   4174c:	80000015 	stw	zero,0(r16)
   41750:	00422b40 	call	422b4 <close>
   41754:	00ffffc4 	movi	r3,-1
   41758:	10c00526 	beq	r2,r3,41770 <_close_r+0x44>
   4175c:	dfc00217 	ldw	ra,8(sp)
   41760:	dc400117 	ldw	r17,4(sp)
   41764:	dc000017 	ldw	r16,0(sp)
   41768:	dec00304 	addi	sp,sp,12
   4176c:	f800283a 	ret
   41770:	80c00017 	ldw	r3,0(r16)
   41774:	183ff926 	beq	r3,zero,4175c <__alt_data_end+0xfffd0a1c>
   41778:	88c00015 	stw	r3,0(r17)
   4177c:	003ff706 	br	4175c <__alt_data_end+0xfffd0a1c>

00041780 <_fclose_r>:
   41780:	28003926 	beq	r5,zero,41868 <_fclose_r+0xe8>
   41784:	defffc04 	addi	sp,sp,-16
   41788:	dc400115 	stw	r17,4(sp)
   4178c:	dc000015 	stw	r16,0(sp)
   41790:	dfc00315 	stw	ra,12(sp)
   41794:	dc800215 	stw	r18,8(sp)
   41798:	2023883a 	mov	r17,r4
   4179c:	2821883a 	mov	r16,r5
   417a0:	20000226 	beq	r4,zero,417ac <_fclose_r+0x2c>
   417a4:	20800e17 	ldw	r2,56(r4)
   417a8:	10002726 	beq	r2,zero,41848 <_fclose_r+0xc8>
   417ac:	8080030f 	ldh	r2,12(r16)
   417b0:	1000071e 	bne	r2,zero,417d0 <_fclose_r+0x50>
   417b4:	0005883a 	mov	r2,zero
   417b8:	dfc00317 	ldw	ra,12(sp)
   417bc:	dc800217 	ldw	r18,8(sp)
   417c0:	dc400117 	ldw	r17,4(sp)
   417c4:	dc000017 	ldw	r16,0(sp)
   417c8:	dec00404 	addi	sp,sp,16
   417cc:	f800283a 	ret
   417d0:	800b883a 	mov	r5,r16
   417d4:	8809883a 	mov	r4,r17
   417d8:	00418840 	call	41884 <__sflush_r>
   417dc:	1025883a 	mov	r18,r2
   417e0:	80800b17 	ldw	r2,44(r16)
   417e4:	10000426 	beq	r2,zero,417f8 <_fclose_r+0x78>
   417e8:	81400717 	ldw	r5,28(r16)
   417ec:	8809883a 	mov	r4,r17
   417f0:	103ee83a 	callr	r2
   417f4:	10001616 	blt	r2,zero,41850 <_fclose_r+0xd0>
   417f8:	8080030b 	ldhu	r2,12(r16)
   417fc:	1080200c 	andi	r2,r2,128
   41800:	1000151e 	bne	r2,zero,41858 <_fclose_r+0xd8>
   41804:	81400c17 	ldw	r5,48(r16)
   41808:	28000526 	beq	r5,zero,41820 <_fclose_r+0xa0>
   4180c:	80801004 	addi	r2,r16,64
   41810:	28800226 	beq	r5,r2,4181c <_fclose_r+0x9c>
   41814:	8809883a 	mov	r4,r17
   41818:	0041c500 	call	41c50 <_free_r>
   4181c:	80000c15 	stw	zero,48(r16)
   41820:	81401117 	ldw	r5,68(r16)
   41824:	28000326 	beq	r5,zero,41834 <_fclose_r+0xb4>
   41828:	8809883a 	mov	r4,r17
   4182c:	0041c500 	call	41c50 <_free_r>
   41830:	80001115 	stw	zero,68(r16)
   41834:	00408500 	call	40850 <__sfp_lock_acquire>
   41838:	8000030d 	sth	zero,12(r16)
   4183c:	00408540 	call	40854 <__sfp_lock_release>
   41840:	9005883a 	mov	r2,r18
   41844:	003fdc06 	br	417b8 <__alt_data_end+0xfffd0a78>
   41848:	00408400 	call	40840 <__sinit>
   4184c:	003fd706 	br	417ac <__alt_data_end+0xfffd0a6c>
   41850:	04bfffc4 	movi	r18,-1
   41854:	003fe806 	br	417f8 <__alt_data_end+0xfffd0ab8>
   41858:	81400417 	ldw	r5,16(r16)
   4185c:	8809883a 	mov	r4,r17
   41860:	0041c500 	call	41c50 <_free_r>
   41864:	003fe706 	br	41804 <__alt_data_end+0xfffd0ac4>
   41868:	0005883a 	mov	r2,zero
   4186c:	f800283a 	ret

00041870 <fclose>:
   41870:	00800134 	movhi	r2,4
   41874:	109c3604 	addi	r2,r2,28888
   41878:	200b883a 	mov	r5,r4
   4187c:	11000017 	ldw	r4,0(r2)
   41880:	00417801 	jmpi	41780 <_fclose_r>

00041884 <__sflush_r>:
   41884:	2880030b 	ldhu	r2,12(r5)
   41888:	defffb04 	addi	sp,sp,-20
   4188c:	dcc00315 	stw	r19,12(sp)
   41890:	dc400115 	stw	r17,4(sp)
   41894:	dfc00415 	stw	ra,16(sp)
   41898:	dc800215 	stw	r18,8(sp)
   4189c:	dc000015 	stw	r16,0(sp)
   418a0:	10c0020c 	andi	r3,r2,8
   418a4:	2823883a 	mov	r17,r5
   418a8:	2027883a 	mov	r19,r4
   418ac:	1800311e 	bne	r3,zero,41974 <__sflush_r+0xf0>
   418b0:	28c00117 	ldw	r3,4(r5)
   418b4:	10820014 	ori	r2,r2,2048
   418b8:	2880030d 	sth	r2,12(r5)
   418bc:	00c04b0e 	bge	zero,r3,419ec <__sflush_r+0x168>
   418c0:	8a000a17 	ldw	r8,40(r17)
   418c4:	40002326 	beq	r8,zero,41954 <__sflush_r+0xd0>
   418c8:	9c000017 	ldw	r16,0(r19)
   418cc:	10c4000c 	andi	r3,r2,4096
   418d0:	98000015 	stw	zero,0(r19)
   418d4:	18004826 	beq	r3,zero,419f8 <__sflush_r+0x174>
   418d8:	89801417 	ldw	r6,80(r17)
   418dc:	10c0010c 	andi	r3,r2,4
   418e0:	18000626 	beq	r3,zero,418fc <__sflush_r+0x78>
   418e4:	88c00117 	ldw	r3,4(r17)
   418e8:	88800c17 	ldw	r2,48(r17)
   418ec:	30cdc83a 	sub	r6,r6,r3
   418f0:	10000226 	beq	r2,zero,418fc <__sflush_r+0x78>
   418f4:	88800f17 	ldw	r2,60(r17)
   418f8:	308dc83a 	sub	r6,r6,r2
   418fc:	89400717 	ldw	r5,28(r17)
   41900:	000f883a 	mov	r7,zero
   41904:	9809883a 	mov	r4,r19
   41908:	403ee83a 	callr	r8
   4190c:	00ffffc4 	movi	r3,-1
   41910:	10c04426 	beq	r2,r3,41a24 <__sflush_r+0x1a0>
   41914:	88c0030b 	ldhu	r3,12(r17)
   41918:	89000417 	ldw	r4,16(r17)
   4191c:	88000115 	stw	zero,4(r17)
   41920:	197dffcc 	andi	r5,r3,63487
   41924:	8940030d 	sth	r5,12(r17)
   41928:	89000015 	stw	r4,0(r17)
   4192c:	18c4000c 	andi	r3,r3,4096
   41930:	18002c1e 	bne	r3,zero,419e4 <__sflush_r+0x160>
   41934:	89400c17 	ldw	r5,48(r17)
   41938:	9c000015 	stw	r16,0(r19)
   4193c:	28000526 	beq	r5,zero,41954 <__sflush_r+0xd0>
   41940:	88801004 	addi	r2,r17,64
   41944:	28800226 	beq	r5,r2,41950 <__sflush_r+0xcc>
   41948:	9809883a 	mov	r4,r19
   4194c:	0041c500 	call	41c50 <_free_r>
   41950:	88000c15 	stw	zero,48(r17)
   41954:	0005883a 	mov	r2,zero
   41958:	dfc00417 	ldw	ra,16(sp)
   4195c:	dcc00317 	ldw	r19,12(sp)
   41960:	dc800217 	ldw	r18,8(sp)
   41964:	dc400117 	ldw	r17,4(sp)
   41968:	dc000017 	ldw	r16,0(sp)
   4196c:	dec00504 	addi	sp,sp,20
   41970:	f800283a 	ret
   41974:	2c800417 	ldw	r18,16(r5)
   41978:	903ff626 	beq	r18,zero,41954 <__alt_data_end+0xfffd0c14>
   4197c:	2c000017 	ldw	r16,0(r5)
   41980:	108000cc 	andi	r2,r2,3
   41984:	2c800015 	stw	r18,0(r5)
   41988:	84a1c83a 	sub	r16,r16,r18
   4198c:	1000131e 	bne	r2,zero,419dc <__sflush_r+0x158>
   41990:	28800517 	ldw	r2,20(r5)
   41994:	88800215 	stw	r2,8(r17)
   41998:	04000316 	blt	zero,r16,419a8 <__sflush_r+0x124>
   4199c:	003fed06 	br	41954 <__alt_data_end+0xfffd0c14>
   419a0:	90a5883a 	add	r18,r18,r2
   419a4:	043feb0e 	bge	zero,r16,41954 <__alt_data_end+0xfffd0c14>
   419a8:	88800917 	ldw	r2,36(r17)
   419ac:	89400717 	ldw	r5,28(r17)
   419b0:	800f883a 	mov	r7,r16
   419b4:	900d883a 	mov	r6,r18
   419b8:	9809883a 	mov	r4,r19
   419bc:	103ee83a 	callr	r2
   419c0:	80a1c83a 	sub	r16,r16,r2
   419c4:	00bff616 	blt	zero,r2,419a0 <__alt_data_end+0xfffd0c60>
   419c8:	88c0030b 	ldhu	r3,12(r17)
   419cc:	00bfffc4 	movi	r2,-1
   419d0:	18c01014 	ori	r3,r3,64
   419d4:	88c0030d 	sth	r3,12(r17)
   419d8:	003fdf06 	br	41958 <__alt_data_end+0xfffd0c18>
   419dc:	0005883a 	mov	r2,zero
   419e0:	003fec06 	br	41994 <__alt_data_end+0xfffd0c54>
   419e4:	88801415 	stw	r2,80(r17)
   419e8:	003fd206 	br	41934 <__alt_data_end+0xfffd0bf4>
   419ec:	28c00f17 	ldw	r3,60(r5)
   419f0:	00ffb316 	blt	zero,r3,418c0 <__alt_data_end+0xfffd0b80>
   419f4:	003fd706 	br	41954 <__alt_data_end+0xfffd0c14>
   419f8:	89400717 	ldw	r5,28(r17)
   419fc:	000d883a 	mov	r6,zero
   41a00:	01c00044 	movi	r7,1
   41a04:	9809883a 	mov	r4,r19
   41a08:	403ee83a 	callr	r8
   41a0c:	100d883a 	mov	r6,r2
   41a10:	00bfffc4 	movi	r2,-1
   41a14:	30801426 	beq	r6,r2,41a68 <__sflush_r+0x1e4>
   41a18:	8880030b 	ldhu	r2,12(r17)
   41a1c:	8a000a17 	ldw	r8,40(r17)
   41a20:	003fae06 	br	418dc <__alt_data_end+0xfffd0b9c>
   41a24:	98c00017 	ldw	r3,0(r19)
   41a28:	183fba26 	beq	r3,zero,41914 <__alt_data_end+0xfffd0bd4>
   41a2c:	01000744 	movi	r4,29
   41a30:	19000626 	beq	r3,r4,41a4c <__sflush_r+0x1c8>
   41a34:	01000584 	movi	r4,22
   41a38:	19000426 	beq	r3,r4,41a4c <__sflush_r+0x1c8>
   41a3c:	88c0030b 	ldhu	r3,12(r17)
   41a40:	18c01014 	ori	r3,r3,64
   41a44:	88c0030d 	sth	r3,12(r17)
   41a48:	003fc306 	br	41958 <__alt_data_end+0xfffd0c18>
   41a4c:	8880030b 	ldhu	r2,12(r17)
   41a50:	88c00417 	ldw	r3,16(r17)
   41a54:	88000115 	stw	zero,4(r17)
   41a58:	10bdffcc 	andi	r2,r2,63487
   41a5c:	8880030d 	sth	r2,12(r17)
   41a60:	88c00015 	stw	r3,0(r17)
   41a64:	003fb306 	br	41934 <__alt_data_end+0xfffd0bf4>
   41a68:	98800017 	ldw	r2,0(r19)
   41a6c:	103fea26 	beq	r2,zero,41a18 <__alt_data_end+0xfffd0cd8>
   41a70:	00c00744 	movi	r3,29
   41a74:	10c00226 	beq	r2,r3,41a80 <__sflush_r+0x1fc>
   41a78:	00c00584 	movi	r3,22
   41a7c:	10c0031e 	bne	r2,r3,41a8c <__sflush_r+0x208>
   41a80:	9c000015 	stw	r16,0(r19)
   41a84:	0005883a 	mov	r2,zero
   41a88:	003fb306 	br	41958 <__alt_data_end+0xfffd0c18>
   41a8c:	88c0030b 	ldhu	r3,12(r17)
   41a90:	3005883a 	mov	r2,r6
   41a94:	18c01014 	ori	r3,r3,64
   41a98:	88c0030d 	sth	r3,12(r17)
   41a9c:	003fae06 	br	41958 <__alt_data_end+0xfffd0c18>

00041aa0 <_fflush_r>:
   41aa0:	defffd04 	addi	sp,sp,-12
   41aa4:	dc000115 	stw	r16,4(sp)
   41aa8:	dfc00215 	stw	ra,8(sp)
   41aac:	2021883a 	mov	r16,r4
   41ab0:	20000226 	beq	r4,zero,41abc <_fflush_r+0x1c>
   41ab4:	20800e17 	ldw	r2,56(r4)
   41ab8:	10000c26 	beq	r2,zero,41aec <_fflush_r+0x4c>
   41abc:	2880030f 	ldh	r2,12(r5)
   41ac0:	1000051e 	bne	r2,zero,41ad8 <_fflush_r+0x38>
   41ac4:	0005883a 	mov	r2,zero
   41ac8:	dfc00217 	ldw	ra,8(sp)
   41acc:	dc000117 	ldw	r16,4(sp)
   41ad0:	dec00304 	addi	sp,sp,12
   41ad4:	f800283a 	ret
   41ad8:	8009883a 	mov	r4,r16
   41adc:	dfc00217 	ldw	ra,8(sp)
   41ae0:	dc000117 	ldw	r16,4(sp)
   41ae4:	dec00304 	addi	sp,sp,12
   41ae8:	00418841 	jmpi	41884 <__sflush_r>
   41aec:	d9400015 	stw	r5,0(sp)
   41af0:	00408400 	call	40840 <__sinit>
   41af4:	d9400017 	ldw	r5,0(sp)
   41af8:	003ff006 	br	41abc <__alt_data_end+0xfffd0d7c>

00041afc <fflush>:
   41afc:	20000526 	beq	r4,zero,41b14 <fflush+0x18>
   41b00:	00800134 	movhi	r2,4
   41b04:	109c3604 	addi	r2,r2,28888
   41b08:	200b883a 	mov	r5,r4
   41b0c:	11000017 	ldw	r4,0(r2)
   41b10:	0041aa01 	jmpi	41aa0 <_fflush_r>
   41b14:	00800134 	movhi	r2,4
   41b18:	109c3504 	addi	r2,r2,28884
   41b1c:	11000017 	ldw	r4,0(r2)
   41b20:	01400134 	movhi	r5,4
   41b24:	2946a804 	addi	r5,r5,6816
   41b28:	00409541 	jmpi	40954 <_fwalk_reent>

00041b2c <_malloc_trim_r>:
   41b2c:	defffb04 	addi	sp,sp,-20
   41b30:	dcc00315 	stw	r19,12(sp)
   41b34:	04c00134 	movhi	r19,4
   41b38:	dc800215 	stw	r18,8(sp)
   41b3c:	dc400115 	stw	r17,4(sp)
   41b40:	dc000015 	stw	r16,0(sp)
   41b44:	dfc00415 	stw	ra,16(sp)
   41b48:	2821883a 	mov	r16,r5
   41b4c:	9cd6b104 	addi	r19,r19,23236
   41b50:	2025883a 	mov	r18,r4
   41b54:	00427e00 	call	427e0 <__malloc_lock>
   41b58:	98800217 	ldw	r2,8(r19)
   41b5c:	14400117 	ldw	r17,4(r2)
   41b60:	00bfff04 	movi	r2,-4
   41b64:	88a2703a 	and	r17,r17,r2
   41b68:	8c21c83a 	sub	r16,r17,r16
   41b6c:	8403fbc4 	addi	r16,r16,4079
   41b70:	8020d33a 	srli	r16,r16,12
   41b74:	0083ffc4 	movi	r2,4095
   41b78:	843fffc4 	addi	r16,r16,-1
   41b7c:	8020933a 	slli	r16,r16,12
   41b80:	1400060e 	bge	r2,r16,41b9c <_malloc_trim_r+0x70>
   41b84:	000b883a 	mov	r5,zero
   41b88:	9009883a 	mov	r4,r18
   41b8c:	004153c0 	call	4153c <_sbrk_r>
   41b90:	98c00217 	ldw	r3,8(r19)
   41b94:	1c47883a 	add	r3,r3,r17
   41b98:	10c00a26 	beq	r2,r3,41bc4 <_malloc_trim_r+0x98>
   41b9c:	9009883a 	mov	r4,r18
   41ba0:	00427e40 	call	427e4 <__malloc_unlock>
   41ba4:	0005883a 	mov	r2,zero
   41ba8:	dfc00417 	ldw	ra,16(sp)
   41bac:	dcc00317 	ldw	r19,12(sp)
   41bb0:	dc800217 	ldw	r18,8(sp)
   41bb4:	dc400117 	ldw	r17,4(sp)
   41bb8:	dc000017 	ldw	r16,0(sp)
   41bbc:	dec00504 	addi	sp,sp,20
   41bc0:	f800283a 	ret
   41bc4:	040bc83a 	sub	r5,zero,r16
   41bc8:	9009883a 	mov	r4,r18
   41bcc:	004153c0 	call	4153c <_sbrk_r>
   41bd0:	00ffffc4 	movi	r3,-1
   41bd4:	10c00d26 	beq	r2,r3,41c0c <_malloc_trim_r+0xe0>
   41bd8:	00c00174 	movhi	r3,5
   41bdc:	18e2e804 	addi	r3,r3,-29792
   41be0:	18800017 	ldw	r2,0(r3)
   41be4:	99000217 	ldw	r4,8(r19)
   41be8:	8c23c83a 	sub	r17,r17,r16
   41bec:	8c400054 	ori	r17,r17,1
   41bf0:	1421c83a 	sub	r16,r2,r16
   41bf4:	24400115 	stw	r17,4(r4)
   41bf8:	9009883a 	mov	r4,r18
   41bfc:	1c000015 	stw	r16,0(r3)
   41c00:	00427e40 	call	427e4 <__malloc_unlock>
   41c04:	00800044 	movi	r2,1
   41c08:	003fe706 	br	41ba8 <__alt_data_end+0xfffd0e68>
   41c0c:	000b883a 	mov	r5,zero
   41c10:	9009883a 	mov	r4,r18
   41c14:	004153c0 	call	4153c <_sbrk_r>
   41c18:	99000217 	ldw	r4,8(r19)
   41c1c:	014003c4 	movi	r5,15
   41c20:	1107c83a 	sub	r3,r2,r4
   41c24:	28ffdd0e 	bge	r5,r3,41b9c <__alt_data_end+0xfffd0e5c>
   41c28:	01400134 	movhi	r5,4
   41c2c:	295c3704 	addi	r5,r5,28892
   41c30:	29400017 	ldw	r5,0(r5)
   41c34:	18c00054 	ori	r3,r3,1
   41c38:	20c00115 	stw	r3,4(r4)
   41c3c:	00c00174 	movhi	r3,5
   41c40:	1145c83a 	sub	r2,r2,r5
   41c44:	18e2e804 	addi	r3,r3,-29792
   41c48:	18800015 	stw	r2,0(r3)
   41c4c:	003fd306 	br	41b9c <__alt_data_end+0xfffd0e5c>

00041c50 <_free_r>:
   41c50:	28004126 	beq	r5,zero,41d58 <_free_r+0x108>
   41c54:	defffd04 	addi	sp,sp,-12
   41c58:	dc400115 	stw	r17,4(sp)
   41c5c:	dc000015 	stw	r16,0(sp)
   41c60:	2023883a 	mov	r17,r4
   41c64:	2821883a 	mov	r16,r5
   41c68:	dfc00215 	stw	ra,8(sp)
   41c6c:	00427e00 	call	427e0 <__malloc_lock>
   41c70:	81ffff17 	ldw	r7,-4(r16)
   41c74:	00bfff84 	movi	r2,-2
   41c78:	01000134 	movhi	r4,4
   41c7c:	81bffe04 	addi	r6,r16,-8
   41c80:	3884703a 	and	r2,r7,r2
   41c84:	2116b104 	addi	r4,r4,23236
   41c88:	308b883a 	add	r5,r6,r2
   41c8c:	2a400117 	ldw	r9,4(r5)
   41c90:	22000217 	ldw	r8,8(r4)
   41c94:	00ffff04 	movi	r3,-4
   41c98:	48c6703a 	and	r3,r9,r3
   41c9c:	2a005726 	beq	r5,r8,41dfc <_free_r+0x1ac>
   41ca0:	28c00115 	stw	r3,4(r5)
   41ca4:	39c0004c 	andi	r7,r7,1
   41ca8:	3800091e 	bne	r7,zero,41cd0 <_free_r+0x80>
   41cac:	823ffe17 	ldw	r8,-8(r16)
   41cb0:	22400204 	addi	r9,r4,8
   41cb4:	320dc83a 	sub	r6,r6,r8
   41cb8:	31c00217 	ldw	r7,8(r6)
   41cbc:	1205883a 	add	r2,r2,r8
   41cc0:	3a406526 	beq	r7,r9,41e58 <_free_r+0x208>
   41cc4:	32000317 	ldw	r8,12(r6)
   41cc8:	3a000315 	stw	r8,12(r7)
   41ccc:	41c00215 	stw	r7,8(r8)
   41cd0:	28cf883a 	add	r7,r5,r3
   41cd4:	39c00117 	ldw	r7,4(r7)
   41cd8:	39c0004c 	andi	r7,r7,1
   41cdc:	38003a26 	beq	r7,zero,41dc8 <_free_r+0x178>
   41ce0:	10c00054 	ori	r3,r2,1
   41ce4:	30c00115 	stw	r3,4(r6)
   41ce8:	3087883a 	add	r3,r6,r2
   41cec:	18800015 	stw	r2,0(r3)
   41cf0:	00c07fc4 	movi	r3,511
   41cf4:	18801936 	bltu	r3,r2,41d5c <_free_r+0x10c>
   41cf8:	1004d0fa 	srli	r2,r2,3
   41cfc:	01c00044 	movi	r7,1
   41d00:	21400117 	ldw	r5,4(r4)
   41d04:	10c00044 	addi	r3,r2,1
   41d08:	18c7883a 	add	r3,r3,r3
   41d0c:	1005d0ba 	srai	r2,r2,2
   41d10:	18c7883a 	add	r3,r3,r3
   41d14:	18c7883a 	add	r3,r3,r3
   41d18:	1907883a 	add	r3,r3,r4
   41d1c:	3884983a 	sll	r2,r7,r2
   41d20:	19c00017 	ldw	r7,0(r3)
   41d24:	1a3ffe04 	addi	r8,r3,-8
   41d28:	1144b03a 	or	r2,r2,r5
   41d2c:	32000315 	stw	r8,12(r6)
   41d30:	31c00215 	stw	r7,8(r6)
   41d34:	20800115 	stw	r2,4(r4)
   41d38:	19800015 	stw	r6,0(r3)
   41d3c:	39800315 	stw	r6,12(r7)
   41d40:	8809883a 	mov	r4,r17
   41d44:	dfc00217 	ldw	ra,8(sp)
   41d48:	dc400117 	ldw	r17,4(sp)
   41d4c:	dc000017 	ldw	r16,0(sp)
   41d50:	dec00304 	addi	sp,sp,12
   41d54:	00427e41 	jmpi	427e4 <__malloc_unlock>
   41d58:	f800283a 	ret
   41d5c:	100ad27a 	srli	r5,r2,9
   41d60:	00c00104 	movi	r3,4
   41d64:	19404a36 	bltu	r3,r5,41e90 <_free_r+0x240>
   41d68:	100ad1ba 	srli	r5,r2,6
   41d6c:	28c00e44 	addi	r3,r5,57
   41d70:	18c7883a 	add	r3,r3,r3
   41d74:	29400e04 	addi	r5,r5,56
   41d78:	18c7883a 	add	r3,r3,r3
   41d7c:	18c7883a 	add	r3,r3,r3
   41d80:	1909883a 	add	r4,r3,r4
   41d84:	20c00017 	ldw	r3,0(r4)
   41d88:	01c00134 	movhi	r7,4
   41d8c:	213ffe04 	addi	r4,r4,-8
   41d90:	39d6b104 	addi	r7,r7,23236
   41d94:	20c04426 	beq	r4,r3,41ea8 <_free_r+0x258>
   41d98:	01ffff04 	movi	r7,-4
   41d9c:	19400117 	ldw	r5,4(r3)
   41da0:	29ca703a 	and	r5,r5,r7
   41da4:	1140022e 	bgeu	r2,r5,41db0 <_free_r+0x160>
   41da8:	18c00217 	ldw	r3,8(r3)
   41dac:	20fffb1e 	bne	r4,r3,41d9c <__alt_data_end+0xfffd105c>
   41db0:	19000317 	ldw	r4,12(r3)
   41db4:	31000315 	stw	r4,12(r6)
   41db8:	30c00215 	stw	r3,8(r6)
   41dbc:	21800215 	stw	r6,8(r4)
   41dc0:	19800315 	stw	r6,12(r3)
   41dc4:	003fde06 	br	41d40 <__alt_data_end+0xfffd1000>
   41dc8:	29c00217 	ldw	r7,8(r5)
   41dcc:	10c5883a 	add	r2,r2,r3
   41dd0:	00c00134 	movhi	r3,4
   41dd4:	18d6b304 	addi	r3,r3,23244
   41dd8:	38c03b26 	beq	r7,r3,41ec8 <_free_r+0x278>
   41ddc:	2a000317 	ldw	r8,12(r5)
   41de0:	11400054 	ori	r5,r2,1
   41de4:	3087883a 	add	r3,r6,r2
   41de8:	3a000315 	stw	r8,12(r7)
   41dec:	41c00215 	stw	r7,8(r8)
   41df0:	31400115 	stw	r5,4(r6)
   41df4:	18800015 	stw	r2,0(r3)
   41df8:	003fbd06 	br	41cf0 <__alt_data_end+0xfffd0fb0>
   41dfc:	39c0004c 	andi	r7,r7,1
   41e00:	10c5883a 	add	r2,r2,r3
   41e04:	3800071e 	bne	r7,zero,41e24 <_free_r+0x1d4>
   41e08:	81fffe17 	ldw	r7,-8(r16)
   41e0c:	31cdc83a 	sub	r6,r6,r7
   41e10:	30c00317 	ldw	r3,12(r6)
   41e14:	31400217 	ldw	r5,8(r6)
   41e18:	11c5883a 	add	r2,r2,r7
   41e1c:	28c00315 	stw	r3,12(r5)
   41e20:	19400215 	stw	r5,8(r3)
   41e24:	10c00054 	ori	r3,r2,1
   41e28:	30c00115 	stw	r3,4(r6)
   41e2c:	00c00134 	movhi	r3,4
   41e30:	18dc3804 	addi	r3,r3,28896
   41e34:	18c00017 	ldw	r3,0(r3)
   41e38:	21800215 	stw	r6,8(r4)
   41e3c:	10ffc036 	bltu	r2,r3,41d40 <__alt_data_end+0xfffd1000>
   41e40:	00800174 	movhi	r2,5
   41e44:	10a2e004 	addi	r2,r2,-29824
   41e48:	11400017 	ldw	r5,0(r2)
   41e4c:	8809883a 	mov	r4,r17
   41e50:	0041b2c0 	call	41b2c <_malloc_trim_r>
   41e54:	003fba06 	br	41d40 <__alt_data_end+0xfffd1000>
   41e58:	28c9883a 	add	r4,r5,r3
   41e5c:	21000117 	ldw	r4,4(r4)
   41e60:	2100004c 	andi	r4,r4,1
   41e64:	2000391e 	bne	r4,zero,41f4c <_free_r+0x2fc>
   41e68:	29c00217 	ldw	r7,8(r5)
   41e6c:	29000317 	ldw	r4,12(r5)
   41e70:	1885883a 	add	r2,r3,r2
   41e74:	10c00054 	ori	r3,r2,1
   41e78:	39000315 	stw	r4,12(r7)
   41e7c:	21c00215 	stw	r7,8(r4)
   41e80:	30c00115 	stw	r3,4(r6)
   41e84:	308d883a 	add	r6,r6,r2
   41e88:	30800015 	stw	r2,0(r6)
   41e8c:	003fac06 	br	41d40 <__alt_data_end+0xfffd1000>
   41e90:	00c00504 	movi	r3,20
   41e94:	19401536 	bltu	r3,r5,41eec <_free_r+0x29c>
   41e98:	28c01704 	addi	r3,r5,92
   41e9c:	18c7883a 	add	r3,r3,r3
   41ea0:	294016c4 	addi	r5,r5,91
   41ea4:	003fb406 	br	41d78 <__alt_data_end+0xfffd1038>
   41ea8:	280bd0ba 	srai	r5,r5,2
   41eac:	00c00044 	movi	r3,1
   41eb0:	38800117 	ldw	r2,4(r7)
   41eb4:	194a983a 	sll	r5,r3,r5
   41eb8:	2007883a 	mov	r3,r4
   41ebc:	2884b03a 	or	r2,r5,r2
   41ec0:	38800115 	stw	r2,4(r7)
   41ec4:	003fbb06 	br	41db4 <__alt_data_end+0xfffd1074>
   41ec8:	21800515 	stw	r6,20(r4)
   41ecc:	21800415 	stw	r6,16(r4)
   41ed0:	10c00054 	ori	r3,r2,1
   41ed4:	31c00315 	stw	r7,12(r6)
   41ed8:	31c00215 	stw	r7,8(r6)
   41edc:	30c00115 	stw	r3,4(r6)
   41ee0:	308d883a 	add	r6,r6,r2
   41ee4:	30800015 	stw	r2,0(r6)
   41ee8:	003f9506 	br	41d40 <__alt_data_end+0xfffd1000>
   41eec:	00c01504 	movi	r3,84
   41ef0:	19400536 	bltu	r3,r5,41f08 <_free_r+0x2b8>
   41ef4:	100ad33a 	srli	r5,r2,12
   41ef8:	28c01bc4 	addi	r3,r5,111
   41efc:	18c7883a 	add	r3,r3,r3
   41f00:	29401b84 	addi	r5,r5,110
   41f04:	003f9c06 	br	41d78 <__alt_data_end+0xfffd1038>
   41f08:	00c05504 	movi	r3,340
   41f0c:	19400536 	bltu	r3,r5,41f24 <_free_r+0x2d4>
   41f10:	100ad3fa 	srli	r5,r2,15
   41f14:	28c01e04 	addi	r3,r5,120
   41f18:	18c7883a 	add	r3,r3,r3
   41f1c:	29401dc4 	addi	r5,r5,119
   41f20:	003f9506 	br	41d78 <__alt_data_end+0xfffd1038>
   41f24:	00c15504 	movi	r3,1364
   41f28:	19400536 	bltu	r3,r5,41f40 <_free_r+0x2f0>
   41f2c:	100ad4ba 	srli	r5,r2,18
   41f30:	28c01f44 	addi	r3,r5,125
   41f34:	18c7883a 	add	r3,r3,r3
   41f38:	29401f04 	addi	r5,r5,124
   41f3c:	003f8e06 	br	41d78 <__alt_data_end+0xfffd1038>
   41f40:	00c03f84 	movi	r3,254
   41f44:	01401f84 	movi	r5,126
   41f48:	003f8b06 	br	41d78 <__alt_data_end+0xfffd1038>
   41f4c:	10c00054 	ori	r3,r2,1
   41f50:	30c00115 	stw	r3,4(r6)
   41f54:	308d883a 	add	r6,r6,r2
   41f58:	30800015 	stw	r2,0(r6)
   41f5c:	003f7806 	br	41d40 <__alt_data_end+0xfffd1000>

00041f60 <_lseek_r>:
   41f60:	defffd04 	addi	sp,sp,-12
   41f64:	2805883a 	mov	r2,r5
   41f68:	dc000015 	stw	r16,0(sp)
   41f6c:	04000174 	movhi	r16,5
   41f70:	dc400115 	stw	r17,4(sp)
   41f74:	300b883a 	mov	r5,r6
   41f78:	8422e104 	addi	r16,r16,-29820
   41f7c:	2023883a 	mov	r17,r4
   41f80:	380d883a 	mov	r6,r7
   41f84:	1009883a 	mov	r4,r2
   41f88:	dfc00215 	stw	ra,8(sp)
   41f8c:	80000015 	stw	zero,0(r16)
   41f90:	004269c0 	call	4269c <lseek>
   41f94:	00ffffc4 	movi	r3,-1
   41f98:	10c00526 	beq	r2,r3,41fb0 <_lseek_r+0x50>
   41f9c:	dfc00217 	ldw	ra,8(sp)
   41fa0:	dc400117 	ldw	r17,4(sp)
   41fa4:	dc000017 	ldw	r16,0(sp)
   41fa8:	dec00304 	addi	sp,sp,12
   41fac:	f800283a 	ret
   41fb0:	80c00017 	ldw	r3,0(r16)
   41fb4:	183ff926 	beq	r3,zero,41f9c <__alt_data_end+0xfffd125c>
   41fb8:	88c00015 	stw	r3,0(r17)
   41fbc:	003ff706 	br	41f9c <__alt_data_end+0xfffd125c>

00041fc0 <__smakebuf_r>:
   41fc0:	2880030b 	ldhu	r2,12(r5)
   41fc4:	10c0008c 	andi	r3,r2,2
   41fc8:	1800411e 	bne	r3,zero,420d0 <__smakebuf_r+0x110>
   41fcc:	deffec04 	addi	sp,sp,-80
   41fd0:	dc000f15 	stw	r16,60(sp)
   41fd4:	2821883a 	mov	r16,r5
   41fd8:	2940038f 	ldh	r5,14(r5)
   41fdc:	dc401015 	stw	r17,64(sp)
   41fe0:	dfc01315 	stw	ra,76(sp)
   41fe4:	dcc01215 	stw	r19,72(sp)
   41fe8:	dc801115 	stw	r18,68(sp)
   41fec:	2023883a 	mov	r17,r4
   41ff0:	28001c16 	blt	r5,zero,42064 <__smakebuf_r+0xa4>
   41ff4:	d80d883a 	mov	r6,sp
   41ff8:	00421dc0 	call	421dc <_fstat_r>
   41ffc:	10001816 	blt	r2,zero,42060 <__smakebuf_r+0xa0>
   42000:	d8800117 	ldw	r2,4(sp)
   42004:	00e00014 	movui	r3,32768
   42008:	10bc000c 	andi	r2,r2,61440
   4200c:	14c80020 	cmpeqi	r19,r2,8192
   42010:	10c03726 	beq	r2,r3,420f0 <__smakebuf_r+0x130>
   42014:	80c0030b 	ldhu	r3,12(r16)
   42018:	18c20014 	ori	r3,r3,2048
   4201c:	80c0030d 	sth	r3,12(r16)
   42020:	00c80004 	movi	r3,8192
   42024:	10c0521e 	bne	r2,r3,42170 <__smakebuf_r+0x1b0>
   42028:	8140038f 	ldh	r5,14(r16)
   4202c:	8809883a 	mov	r4,r17
   42030:	00422380 	call	42238 <_isatty_r>
   42034:	10004c26 	beq	r2,zero,42168 <__smakebuf_r+0x1a8>
   42038:	8080030b 	ldhu	r2,12(r16)
   4203c:	80c010c4 	addi	r3,r16,67
   42040:	80c00015 	stw	r3,0(r16)
   42044:	10800054 	ori	r2,r2,1
   42048:	8080030d 	sth	r2,12(r16)
   4204c:	00800044 	movi	r2,1
   42050:	80c00415 	stw	r3,16(r16)
   42054:	80800515 	stw	r2,20(r16)
   42058:	04810004 	movi	r18,1024
   4205c:	00000706 	br	4207c <__smakebuf_r+0xbc>
   42060:	8080030b 	ldhu	r2,12(r16)
   42064:	10c0200c 	andi	r3,r2,128
   42068:	18001f1e 	bne	r3,zero,420e8 <__smakebuf_r+0x128>
   4206c:	04810004 	movi	r18,1024
   42070:	10820014 	ori	r2,r2,2048
   42074:	8080030d 	sth	r2,12(r16)
   42078:	0027883a 	mov	r19,zero
   4207c:	900b883a 	mov	r5,r18
   42080:	8809883a 	mov	r4,r17
   42084:	0040a180 	call	40a18 <_malloc_r>
   42088:	10002c26 	beq	r2,zero,4213c <__smakebuf_r+0x17c>
   4208c:	80c0030b 	ldhu	r3,12(r16)
   42090:	01000134 	movhi	r4,4
   42094:	21013a04 	addi	r4,r4,1256
   42098:	89000f15 	stw	r4,60(r17)
   4209c:	18c02014 	ori	r3,r3,128
   420a0:	80c0030d 	sth	r3,12(r16)
   420a4:	80800015 	stw	r2,0(r16)
   420a8:	80800415 	stw	r2,16(r16)
   420ac:	84800515 	stw	r18,20(r16)
   420b0:	98001a1e 	bne	r19,zero,4211c <__smakebuf_r+0x15c>
   420b4:	dfc01317 	ldw	ra,76(sp)
   420b8:	dcc01217 	ldw	r19,72(sp)
   420bc:	dc801117 	ldw	r18,68(sp)
   420c0:	dc401017 	ldw	r17,64(sp)
   420c4:	dc000f17 	ldw	r16,60(sp)
   420c8:	dec01404 	addi	sp,sp,80
   420cc:	f800283a 	ret
   420d0:	288010c4 	addi	r2,r5,67
   420d4:	28800015 	stw	r2,0(r5)
   420d8:	28800415 	stw	r2,16(r5)
   420dc:	00800044 	movi	r2,1
   420e0:	28800515 	stw	r2,20(r5)
   420e4:	f800283a 	ret
   420e8:	04801004 	movi	r18,64
   420ec:	003fe006 	br	42070 <__alt_data_end+0xfffd1330>
   420f0:	81000a17 	ldw	r4,40(r16)
   420f4:	00c00134 	movhi	r3,4
   420f8:	18c59a04 	addi	r3,r3,5736
   420fc:	20ffc51e 	bne	r4,r3,42014 <__alt_data_end+0xfffd12d4>
   42100:	8080030b 	ldhu	r2,12(r16)
   42104:	04810004 	movi	r18,1024
   42108:	84801315 	stw	r18,76(r16)
   4210c:	1484b03a 	or	r2,r2,r18
   42110:	8080030d 	sth	r2,12(r16)
   42114:	0027883a 	mov	r19,zero
   42118:	003fd806 	br	4207c <__alt_data_end+0xfffd133c>
   4211c:	8140038f 	ldh	r5,14(r16)
   42120:	8809883a 	mov	r4,r17
   42124:	00422380 	call	42238 <_isatty_r>
   42128:	103fe226 	beq	r2,zero,420b4 <__alt_data_end+0xfffd1374>
   4212c:	8080030b 	ldhu	r2,12(r16)
   42130:	10800054 	ori	r2,r2,1
   42134:	8080030d 	sth	r2,12(r16)
   42138:	003fde06 	br	420b4 <__alt_data_end+0xfffd1374>
   4213c:	8080030b 	ldhu	r2,12(r16)
   42140:	10c0800c 	andi	r3,r2,512
   42144:	183fdb1e 	bne	r3,zero,420b4 <__alt_data_end+0xfffd1374>
   42148:	10800094 	ori	r2,r2,2
   4214c:	80c010c4 	addi	r3,r16,67
   42150:	8080030d 	sth	r2,12(r16)
   42154:	00800044 	movi	r2,1
   42158:	80c00015 	stw	r3,0(r16)
   4215c:	80c00415 	stw	r3,16(r16)
   42160:	80800515 	stw	r2,20(r16)
   42164:	003fd306 	br	420b4 <__alt_data_end+0xfffd1374>
   42168:	04810004 	movi	r18,1024
   4216c:	003fc306 	br	4207c <__alt_data_end+0xfffd133c>
   42170:	0027883a 	mov	r19,zero
   42174:	04810004 	movi	r18,1024
   42178:	003fc006 	br	4207c <__alt_data_end+0xfffd133c>

0004217c <_read_r>:
   4217c:	defffd04 	addi	sp,sp,-12
   42180:	2805883a 	mov	r2,r5
   42184:	dc000015 	stw	r16,0(sp)
   42188:	04000174 	movhi	r16,5
   4218c:	dc400115 	stw	r17,4(sp)
   42190:	300b883a 	mov	r5,r6
   42194:	8422e104 	addi	r16,r16,-29820
   42198:	2023883a 	mov	r17,r4
   4219c:	380d883a 	mov	r6,r7
   421a0:	1009883a 	mov	r4,r2
   421a4:	dfc00215 	stw	ra,8(sp)
   421a8:	80000015 	stw	zero,0(r16)
   421ac:	0042a4c0 	call	42a4c <read>
   421b0:	00ffffc4 	movi	r3,-1
   421b4:	10c00526 	beq	r2,r3,421cc <_read_r+0x50>
   421b8:	dfc00217 	ldw	ra,8(sp)
   421bc:	dc400117 	ldw	r17,4(sp)
   421c0:	dc000017 	ldw	r16,0(sp)
   421c4:	dec00304 	addi	sp,sp,12
   421c8:	f800283a 	ret
   421cc:	80c00017 	ldw	r3,0(r16)
   421d0:	183ff926 	beq	r3,zero,421b8 <__alt_data_end+0xfffd1478>
   421d4:	88c00015 	stw	r3,0(r17)
   421d8:	003ff706 	br	421b8 <__alt_data_end+0xfffd1478>

000421dc <_fstat_r>:
   421dc:	defffd04 	addi	sp,sp,-12
   421e0:	2805883a 	mov	r2,r5
   421e4:	dc000015 	stw	r16,0(sp)
   421e8:	04000174 	movhi	r16,5
   421ec:	dc400115 	stw	r17,4(sp)
   421f0:	8422e104 	addi	r16,r16,-29820
   421f4:	2023883a 	mov	r17,r4
   421f8:	300b883a 	mov	r5,r6
   421fc:	1009883a 	mov	r4,r2
   42200:	dfc00215 	stw	ra,8(sp)
   42204:	80000015 	stw	zero,0(r16)
   42208:	00423ac0 	call	423ac <fstat>
   4220c:	00ffffc4 	movi	r3,-1
   42210:	10c00526 	beq	r2,r3,42228 <_fstat_r+0x4c>
   42214:	dfc00217 	ldw	ra,8(sp)
   42218:	dc400117 	ldw	r17,4(sp)
   4221c:	dc000017 	ldw	r16,0(sp)
   42220:	dec00304 	addi	sp,sp,12
   42224:	f800283a 	ret
   42228:	80c00017 	ldw	r3,0(r16)
   4222c:	183ff926 	beq	r3,zero,42214 <__alt_data_end+0xfffd14d4>
   42230:	88c00015 	stw	r3,0(r17)
   42234:	003ff706 	br	42214 <__alt_data_end+0xfffd14d4>

00042238 <_isatty_r>:
   42238:	defffd04 	addi	sp,sp,-12
   4223c:	dc000015 	stw	r16,0(sp)
   42240:	04000174 	movhi	r16,5
   42244:	dc400115 	stw	r17,4(sp)
   42248:	8422e104 	addi	r16,r16,-29820
   4224c:	2023883a 	mov	r17,r4
   42250:	2809883a 	mov	r4,r5
   42254:	dfc00215 	stw	ra,8(sp)
   42258:	80000015 	stw	zero,0(r16)
   4225c:	004246c0 	call	4246c <isatty>
   42260:	00ffffc4 	movi	r3,-1
   42264:	10c00526 	beq	r2,r3,4227c <_isatty_r+0x44>
   42268:	dfc00217 	ldw	ra,8(sp)
   4226c:	dc400117 	ldw	r17,4(sp)
   42270:	dc000017 	ldw	r16,0(sp)
   42274:	dec00304 	addi	sp,sp,12
   42278:	f800283a 	ret
   4227c:	80c00017 	ldw	r3,0(r16)
   42280:	183ff926 	beq	r3,zero,42268 <__alt_data_end+0xfffd1528>
   42284:	88c00015 	stw	r3,0(r17)
   42288:	003ff706 	br	42268 <__alt_data_end+0xfffd1528>

0004228c <__mulsi3>:
   4228c:	0005883a 	mov	r2,zero
   42290:	20000726 	beq	r4,zero,422b0 <__mulsi3+0x24>
   42294:	20c0004c 	andi	r3,r4,1
   42298:	2008d07a 	srli	r4,r4,1
   4229c:	18000126 	beq	r3,zero,422a4 <__mulsi3+0x18>
   422a0:	1145883a 	add	r2,r2,r5
   422a4:	294b883a 	add	r5,r5,r5
   422a8:	203ffa1e 	bne	r4,zero,42294 <__alt_data_end+0xfffd1554>
   422ac:	f800283a 	ret
   422b0:	f800283a 	ret

000422b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   422b4:	defffd04 	addi	sp,sp,-12
   422b8:	dfc00215 	stw	ra,8(sp)
   422bc:	dc400115 	stw	r17,4(sp)
   422c0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   422c4:	20002316 	blt	r4,zero,42354 <close+0xa0>
   422c8:	2021883a 	mov	r16,r4
   422cc:	01400304 	movi	r5,12
   422d0:	004228c0 	call	4228c <__mulsi3>
   422d4:	04400134 	movhi	r17,4
   422d8:	8c57b304 	addi	r17,r17,24268
   422dc:	1463883a 	add	r17,r2,r17

  if (fd)
   422e0:	88001c26 	beq	r17,zero,42354 <close+0xa0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   422e4:	01400304 	movi	r5,12
   422e8:	8009883a 	mov	r4,r16
   422ec:	004228c0 	call	4228c <__mulsi3>
   422f0:	00c00134 	movhi	r3,4
   422f4:	18d7b304 	addi	r3,r3,24268
   422f8:	1885883a 	add	r2,r3,r2
   422fc:	10800017 	ldw	r2,0(r2)
   42300:	10800417 	ldw	r2,16(r2)
   42304:	10001f26 	beq	r2,zero,42384 <close+0xd0>
   42308:	8809883a 	mov	r4,r17
   4230c:	103ee83a 	callr	r2
   42310:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   42314:	8009883a 	mov	r4,r16
   42318:	0042b980 	call	42b98 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
   4231c:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
   42320:	88001b0e 	bge	r17,zero,42390 <close+0xdc>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   42324:	00800134 	movhi	r2,4
   42328:	109c3e04 	addi	r2,r2,28920
   4232c:	10800017 	ldw	r2,0(r2)
   42330:	10000226 	beq	r2,zero,4233c <close+0x88>
   42334:	103ee83a 	callr	r2
   42338:	00000206 	br	42344 <close+0x90>
   4233c:	00800174 	movhi	r2,5
   42340:	10a2e104 	addi	r2,r2,-29820
    {
      ALT_ERRNO = -rval;
   42344:	0463c83a 	sub	r17,zero,r17
   42348:	14400015 	stw	r17,0(r2)
      return -1;
   4234c:	00bfffc4 	movi	r2,-1
   42350:	00000f06 	br	42390 <close+0xdc>
   42354:	00800134 	movhi	r2,4
   42358:	109c3e04 	addi	r2,r2,28920
   4235c:	10800017 	ldw	r2,0(r2)
   42360:	10000226 	beq	r2,zero,4236c <close+0xb8>
   42364:	103ee83a 	callr	r2
   42368:	00000206 	br	42374 <close+0xc0>
   4236c:	00800174 	movhi	r2,5
   42370:	10a2e104 	addi	r2,r2,-29820
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
   42374:	00c01444 	movi	r3,81
   42378:	10c00015 	stw	r3,0(r2)
    return -1;
   4237c:	00bfffc4 	movi	r2,-1
   42380:	00000306 	br	42390 <close+0xdc>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   42384:	8009883a 	mov	r4,r16
   42388:	0042b980 	call	42b98 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
   4238c:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
   42390:	dfc00217 	ldw	ra,8(sp)
   42394:	dc400117 	ldw	r17,4(sp)
   42398:	dc000017 	ldw	r16,0(sp)
   4239c:	dec00304 	addi	sp,sp,12
   423a0:	f800283a 	ret

000423a4 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   423a4:	3005883a 	mov	r2,r6
   423a8:	f800283a 	ret

000423ac <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   423ac:	defffc04 	addi	sp,sp,-16
   423b0:	dfc00315 	stw	ra,12(sp)
   423b4:	dc800215 	stw	r18,8(sp)
   423b8:	dc400115 	stw	r17,4(sp)
   423bc:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   423c0:	20001916 	blt	r4,zero,42428 <fstat+0x7c>
   423c4:	2021883a 	mov	r16,r4
   423c8:	2825883a 	mov	r18,r5
   423cc:	01400304 	movi	r5,12
   423d0:	004228c0 	call	4228c <__mulsi3>
   423d4:	04400134 	movhi	r17,4
   423d8:	8c57b304 	addi	r17,r17,24268
   423dc:	1463883a 	add	r17,r2,r17
  
  if (fd)
   423e0:	88001126 	beq	r17,zero,42428 <fstat+0x7c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   423e4:	01400304 	movi	r5,12
   423e8:	8009883a 	mov	r4,r16
   423ec:	004228c0 	call	4228c <__mulsi3>
   423f0:	00c00134 	movhi	r3,4
   423f4:	18d7b304 	addi	r3,r3,24268
   423f8:	1885883a 	add	r2,r3,r2
   423fc:	10800017 	ldw	r2,0(r2)
   42400:	10800817 	ldw	r2,32(r2)
   42404:	10000426 	beq	r2,zero,42418 <fstat+0x6c>
    {
      return fd->dev->fstat(fd, st);
   42408:	900b883a 	mov	r5,r18
   4240c:	8809883a 	mov	r4,r17
   42410:	103ee83a 	callr	r2
   42414:	00000f06 	br	42454 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   42418:	00880004 	movi	r2,8192
   4241c:	90800115 	stw	r2,4(r18)
      return 0;
   42420:	0005883a 	mov	r2,zero
   42424:	00000b06 	br	42454 <fstat+0xa8>
   42428:	00800134 	movhi	r2,4
   4242c:	109c3e04 	addi	r2,r2,28920
   42430:	10800017 	ldw	r2,0(r2)
   42434:	10000226 	beq	r2,zero,42440 <fstat+0x94>
   42438:	103ee83a 	callr	r2
   4243c:	00000206 	br	42448 <fstat+0x9c>
   42440:	00800174 	movhi	r2,5
   42444:	10a2e104 	addi	r2,r2,-29820
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   42448:	00c01444 	movi	r3,81
   4244c:	10c00015 	stw	r3,0(r2)
    return -1;
   42450:	00bfffc4 	movi	r2,-1
  }
}
   42454:	dfc00317 	ldw	ra,12(sp)
   42458:	dc800217 	ldw	r18,8(sp)
   4245c:	dc400117 	ldw	r17,4(sp)
   42460:	dc000017 	ldw	r16,0(sp)
   42464:	dec00404 	addi	sp,sp,16
   42468:	f800283a 	ret

0004246c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4246c:	deffef04 	addi	sp,sp,-68
   42470:	dfc01015 	stw	ra,64(sp)
   42474:	dc000f15 	stw	r16,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   42478:	20001616 	blt	r4,zero,424d4 <isatty+0x68>
   4247c:	2021883a 	mov	r16,r4
   42480:	01400304 	movi	r5,12
   42484:	004228c0 	call	4228c <__mulsi3>
   42488:	00c00134 	movhi	r3,4
   4248c:	18d7b304 	addi	r3,r3,24268
   42490:	10c5883a 	add	r2,r2,r3
  
  if (fd)
   42494:	10000f26 	beq	r2,zero,424d4 <isatty+0x68>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   42498:	01400304 	movi	r5,12
   4249c:	8009883a 	mov	r4,r16
   424a0:	004228c0 	call	4228c <__mulsi3>
   424a4:	00c00134 	movhi	r3,4
   424a8:	18d7b304 	addi	r3,r3,24268
   424ac:	1885883a 	add	r2,r3,r2
   424b0:	10800017 	ldw	r2,0(r2)
   424b4:	10800817 	ldw	r2,32(r2)
   424b8:	10001226 	beq	r2,zero,42504 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   424bc:	d80b883a 	mov	r5,sp
   424c0:	8009883a 	mov	r4,r16
   424c4:	00423ac0 	call	423ac <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   424c8:	d8800117 	ldw	r2,4(sp)
   424cc:	10880020 	cmpeqi	r2,r2,8192
   424d0:	00000d06 	br	42508 <isatty+0x9c>
   424d4:	00800134 	movhi	r2,4
   424d8:	109c3e04 	addi	r2,r2,28920
   424dc:	10800017 	ldw	r2,0(r2)
   424e0:	10000226 	beq	r2,zero,424ec <isatty+0x80>
   424e4:	103ee83a 	callr	r2
   424e8:	00000206 	br	424f4 <isatty+0x88>
   424ec:	00800174 	movhi	r2,5
   424f0:	10a2e104 	addi	r2,r2,-29820
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   424f4:	00c01444 	movi	r3,81
   424f8:	10c00015 	stw	r3,0(r2)
    return 0;
   424fc:	0005883a 	mov	r2,zero
   42500:	00000106 	br	42508 <isatty+0x9c>
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
   42504:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
   42508:	dfc01017 	ldw	ra,64(sp)
   4250c:	dc000f17 	ldw	r16,60(sp)
   42510:	dec01104 	addi	sp,sp,68
   42514:	f800283a 	ret

00042518 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   42518:	deffff04 	addi	sp,sp,-4
   4251c:	dfc00015 	stw	ra,0(sp)

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   42520:	00800134 	movhi	r2,4
   42524:	109c4304 	addi	r2,r2,28940
   42528:	00c00134 	movhi	r3,4
   4252c:	18d5a804 	addi	r3,r3,22176
   42530:	18801926 	beq	r3,r2,42598 <alt_load+0x80>
  {
    while( to != end )
   42534:	00800134 	movhi	r2,4
   42538:	109c4304 	addi	r2,r2,28940
   4253c:	00c00134 	movhi	r3,4
   42540:	18d5a804 	addi	r3,r3,22176
   42544:	18801426 	beq	r3,r2,42598 <alt_load+0x80>
   42548:	00c00134 	movhi	r3,4
   4254c:	18d5a904 	addi	r3,r3,22180
   42550:	00800134 	movhi	r2,4
   42554:	109c4304 	addi	r2,r2,28940
   42558:	10c7c83a 	sub	r3,r2,r3
   4255c:	1806d0ba 	srli	r3,r3,2
   42560:	18c00044 	addi	r3,r3,1
   42564:	18c7883a 	add	r3,r3,r3
   42568:	18c7883a 	add	r3,r3,r3
   4256c:	0005883a 	mov	r2,zero
    {
      *to++ = *from++;
   42570:	01c00134 	movhi	r7,4
   42574:	39d5a804 	addi	r7,r7,22176
   42578:	01800134 	movhi	r6,4
   4257c:	319c4304 	addi	r6,r6,28940
   42580:	11c9883a 	add	r4,r2,r7
   42584:	118b883a 	add	r5,r2,r6
   42588:	29400017 	ldw	r5,0(r5)
   4258c:	21400015 	stw	r5,0(r4)
   42590:	10800104 	addi	r2,r2,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   42594:	10fffa1e 	bne	r2,r3,42580 <__alt_data_end+0xfffd1840>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   42598:	00800134 	movhi	r2,4
   4259c:	10800804 	addi	r2,r2,32
   425a0:	00c00134 	movhi	r3,4
   425a4:	18c00804 	addi	r3,r3,32
   425a8:	18801926 	beq	r3,r2,42610 <alt_load+0xf8>
  {
    while( to != end )
   425ac:	00800134 	movhi	r2,4
   425b0:	10805704 	addi	r2,r2,348
   425b4:	00c00134 	movhi	r3,4
   425b8:	18c00804 	addi	r3,r3,32
   425bc:	18801426 	beq	r3,r2,42610 <alt_load+0xf8>
   425c0:	00c00134 	movhi	r3,4
   425c4:	18c00904 	addi	r3,r3,36
   425c8:	00800134 	movhi	r2,4
   425cc:	10805704 	addi	r2,r2,348
   425d0:	10c7c83a 	sub	r3,r2,r3
   425d4:	1806d0ba 	srli	r3,r3,2
   425d8:	18c00044 	addi	r3,r3,1
   425dc:	18c7883a 	add	r3,r3,r3
   425e0:	18c7883a 	add	r3,r3,r3
   425e4:	0005883a 	mov	r2,zero
    {
      *to++ = *from++;
   425e8:	01c00134 	movhi	r7,4
   425ec:	39c00804 	addi	r7,r7,32
   425f0:	01800134 	movhi	r6,4
   425f4:	31800804 	addi	r6,r6,32
   425f8:	11c9883a 	add	r4,r2,r7
   425fc:	118b883a 	add	r5,r2,r6
   42600:	29400017 	ldw	r5,0(r5)
   42604:	21400015 	stw	r5,0(r4)
   42608:	10800104 	addi	r2,r2,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4260c:	18bffa1e 	bne	r3,r2,425f8 <__alt_data_end+0xfffd18b8>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   42610:	00800134 	movhi	r2,4
   42614:	10955604 	addi	r2,r2,21848
   42618:	00c00134 	movhi	r3,4
   4261c:	18d55604 	addi	r3,r3,21848
   42620:	18801926 	beq	r3,r2,42688 <alt_load+0x170>
  {
    while( to != end )
   42624:	00800134 	movhi	r2,4
   42628:	1095a804 	addi	r2,r2,22176
   4262c:	00c00134 	movhi	r3,4
   42630:	18d55604 	addi	r3,r3,21848
   42634:	18801426 	beq	r3,r2,42688 <alt_load+0x170>
   42638:	00c00134 	movhi	r3,4
   4263c:	18d55704 	addi	r3,r3,21852
   42640:	00800134 	movhi	r2,4
   42644:	1095a804 	addi	r2,r2,22176
   42648:	10c7c83a 	sub	r3,r2,r3
   4264c:	1806d0ba 	srli	r3,r3,2
   42650:	18c00044 	addi	r3,r3,1
   42654:	18c7883a 	add	r3,r3,r3
   42658:	18c7883a 	add	r3,r3,r3
   4265c:	0005883a 	mov	r2,zero
    {
      *to++ = *from++;
   42660:	01c00134 	movhi	r7,4
   42664:	39d55604 	addi	r7,r7,21848
   42668:	01800134 	movhi	r6,4
   4266c:	31955604 	addi	r6,r6,21848
   42670:	11c9883a 	add	r4,r2,r7
   42674:	118b883a 	add	r5,r2,r6
   42678:	29400017 	ldw	r5,0(r5)
   4267c:	21400015 	stw	r5,0(r4)
   42680:	10800104 	addi	r2,r2,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   42684:	18bffa1e 	bne	r3,r2,42670 <__alt_data_end+0xfffd1930>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   42688:	004349c0 	call	4349c <alt_dcache_flush_all>
  alt_icache_flush_all();
   4268c:	00436100 	call	43610 <alt_icache_flush_all>
}
   42690:	dfc00017 	ldw	ra,0(sp)
   42694:	dec00104 	addi	sp,sp,4
   42698:	f800283a 	ret

0004269c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4269c:	defffb04 	addi	sp,sp,-20
   426a0:	dfc00415 	stw	ra,16(sp)
   426a4:	dcc00315 	stw	r19,12(sp)
   426a8:	dc800215 	stw	r18,8(sp)
   426ac:	dc400115 	stw	r17,4(sp)
   426b0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   426b4:	20001916 	blt	r4,zero,4271c <lseek+0x80>
   426b8:	2021883a 	mov	r16,r4
   426bc:	2825883a 	mov	r18,r5
   426c0:	3027883a 	mov	r19,r6
   426c4:	01400304 	movi	r5,12
   426c8:	004228c0 	call	4228c <__mulsi3>
   426cc:	04400134 	movhi	r17,4
   426d0:	8c57b304 	addi	r17,r17,24268
   426d4:	1463883a 	add	r17,r2,r17
  
  if (fd) 
   426d8:	88001d26 	beq	r17,zero,42750 <lseek+0xb4>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   426dc:	01400304 	movi	r5,12
   426e0:	8009883a 	mov	r4,r16
   426e4:	004228c0 	call	4228c <__mulsi3>
   426e8:	00c00134 	movhi	r3,4
   426ec:	18d7b304 	addi	r3,r3,24268
   426f0:	1885883a 	add	r2,r3,r2
   426f4:	10800017 	ldw	r2,0(r2)
   426f8:	10800717 	ldw	r2,28(r2)
   426fc:	10001626 	beq	r2,zero,42758 <lseek+0xbc>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   42700:	980d883a 	mov	r6,r19
   42704:	900b883a 	mov	r5,r18
   42708:	8809883a 	mov	r4,r17
   4270c:	103ee83a 	callr	r2
   42710:	1021883a 	mov	r16,r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
   42714:	1000120e 	bge	r2,zero,42760 <lseek+0xc4>
   42718:	00000106 	br	42720 <lseek+0x84>
      rc = -ENOTSUP;
    }
  }
  else  
  {
    rc = -EBADFD;
   4271c:	043febc4 	movi	r16,-81
   42720:	00800134 	movhi	r2,4
   42724:	109c3e04 	addi	r2,r2,28920
   42728:	10800017 	ldw	r2,0(r2)
   4272c:	10000226 	beq	r2,zero,42738 <lseek+0x9c>
   42730:	103ee83a 	callr	r2
   42734:	00000206 	br	42740 <lseek+0xa4>
   42738:	00800174 	movhi	r2,5
   4273c:	10a2e104 	addi	r2,r2,-29820
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
   42740:	0421c83a 	sub	r16,zero,r16
   42744:	14000015 	stw	r16,0(r2)
    rc = -1;
   42748:	043fffc4 	movi	r16,-1
  }

  return rc;
   4274c:	00000406 	br	42760 <lseek+0xc4>
      rc = -ENOTSUP;
    }
  }
  else  
  {
    rc = -EBADFD;
   42750:	043febc4 	movi	r16,-81
   42754:	003ff206 	br	42720 <__alt_data_end+0xfffd19e0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   42758:	043fde84 	movi	r16,-134
   4275c:	003ff006 	br	42720 <__alt_data_end+0xfffd19e0>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
   42760:	8005883a 	mov	r2,r16
   42764:	dfc00417 	ldw	ra,16(sp)
   42768:	dcc00317 	ldw	r19,12(sp)
   4276c:	dc800217 	ldw	r18,8(sp)
   42770:	dc400117 	ldw	r17,4(sp)
   42774:	dc000017 	ldw	r16,0(sp)
   42778:	dec00504 	addi	sp,sp,20
   4277c:	f800283a 	ret

00042780 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   42780:	defffe04 	addi	sp,sp,-8
   42784:	dfc00115 	stw	ra,4(sp)
   42788:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4278c:	0009883a 	mov	r4,zero
   42790:	0042d880 	call	42d88 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   42794:	0042da80 	call	42da8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   42798:	01000134 	movhi	r4,4
   4279c:	2115a404 	addi	r4,r4,22160
   427a0:	200d883a 	mov	r6,r4
   427a4:	200b883a 	mov	r5,r4
   427a8:	00437b80 	call	437b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   427ac:	00435200 	call	43520 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   427b0:	01000134 	movhi	r4,4
   427b4:	210d6604 	addi	r4,r4,13720
   427b8:	0043d1c0 	call	43d1c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   427bc:	d1a6ad17 	ldw	r6,-25932(gp)
   427c0:	d166ae17 	ldw	r5,-25928(gp)
   427c4:	d126af17 	ldw	r4,-25924(gp)
   427c8:	00401980 	call	40198 <main>
   427cc:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
   427d0:	01000044 	movi	r4,1
   427d4:	00422b40 	call	422b4 <close>
  exit (result);
   427d8:	8009883a 	mov	r4,r16
   427dc:	0043d300 	call	43d30 <exit>

000427e0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   427e0:	f800283a 	ret

000427e4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   427e4:	f800283a 	ret

000427e8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   427e8:	defff304 	addi	sp,sp,-52
   427ec:	dfc00915 	stw	ra,36(sp)
   427f0:	df000815 	stw	fp,32(sp)
   427f4:	ddc00715 	stw	r23,28(sp)
   427f8:	dd800615 	stw	r22,24(sp)
   427fc:	dd400515 	stw	r21,20(sp)
   42800:	dd000415 	stw	r20,16(sp)
   42804:	dcc00315 	stw	r19,12(sp)
   42808:	dc800215 	stw	r18,8(sp)
   4280c:	dc400115 	stw	r17,4(sp)
   42810:	dc000015 	stw	r16,0(sp)
   42814:	2021883a 	mov	r16,r4
   42818:	d9400a15 	stw	r5,40(sp)
   4281c:	d9800b15 	stw	r6,44(sp)
   42820:	d9c00c15 	stw	r7,48(sp)
	va_list args;
	va_start(args, fmt);
   42824:	dd800a04 	addi	r22,sp,40
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   42828:	04800944 	movi	r18,37
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   4282c:	05c018c4 	movi	r23,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   42830:	07001e04 	movi	fp,120
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   42834:	04c003c4 	movi	r19,15
                        if (digit <= 9)
   42838:	05400244 	movi	r21,9
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   4283c:	00005e06 	br	429b8 <alt_printf+0x1d0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   42840:	20803fcc 	andi	r2,r4,255
   42844:	1080201c 	xori	r2,r2,128
   42848:	10bfe004 	addi	r2,r2,-128
   4284c:	14800426 	beq	r2,r18,42860 <alt_printf+0x78>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   42850:	84000044 	addi	r16,r16,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
        {
            alt_putchar(c);
   42854:	1009883a 	mov	r4,r2
   42858:	00429fc0 	call	429fc <alt_putchar>
   4285c:	00005606 	br	429b8 <alt_printf+0x1d0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   42860:	85000084 	addi	r20,r16,2
   42864:	80800043 	ldbu	r2,1(r16)
   42868:	10c03fcc 	andi	r3,r2,255
   4286c:	18c0201c 	xori	r3,r3,128
   42870:	18ffe004 	addi	r3,r3,-128
   42874:	18005526 	beq	r3,zero,429cc <alt_printf+0x1e4>
            {
                if (c == '%')
   42878:	1c80041e 	bne	r3,r18,4288c <alt_printf+0xa4>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   4287c:	9009883a 	mov	r4,r18
   42880:	00429fc0 	call	429fc <alt_putchar>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   42884:	a021883a 	mov	r16,r20
   42888:	00004b06 	br	429b8 <alt_printf+0x1d0>
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   4288c:	10c03fcc 	andi	r3,r2,255
   42890:	18c0201c 	xori	r3,r3,128
   42894:	18ffe004 	addi	r3,r3,-128
   42898:	1dc0061e 	bne	r3,r23,428b4 <alt_printf+0xcc>
                {
                    int v = va_arg(args, int);
   4289c:	b4000104 	addi	r16,r22,4
                    alt_putchar(v);
   428a0:	b1000017 	ldw	r4,0(r22)
   428a4:	00429fc0 	call	429fc <alt_putchar>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   428a8:	802d883a 	mov	r22,r16
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   428ac:	a021883a 	mov	r16,r20
   428b0:	00004106 	br	429b8 <alt_printf+0x1d0>
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   428b4:	10c03fcc 	andi	r3,r2,255
   428b8:	18c0201c 	xori	r3,r3,128
   428bc:	18ffe004 	addi	r3,r3,-128
   428c0:	1f00201e 	bne	r3,fp,42944 <alt_printf+0x15c>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   428c4:	b4400017 	ldw	r17,0(r22)
   428c8:	b5800104 	addi	r22,r22,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   428cc:	88000426 	beq	r17,zero,428e0 <alt_printf+0xf8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   428d0:	88bc002c 	andhi	r2,r17,61440
   428d4:	10000626 	beq	r2,zero,428f0 <alt_printf+0x108>
   428d8:	04000704 	movi	r16,28
   428dc:	00000a06 	br	42908 <alt_printf+0x120>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   428e0:	01000c04 	movi	r4,48
   428e4:	00429fc0 	call	429fc <alt_putchar>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   428e8:	a021883a 	mov	r16,r20

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
                        continue;
   428ec:	00003206 	br	429b8 <alt_printf+0x1d0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   428f0:	04000704 	movi	r16,28
                        digit_shift -= 4;
   428f4:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   428f8:	9c04983a 	sll	r2,r19,r16
   428fc:	1444703a 	and	r2,r2,r17
   42900:	103ffc26 	beq	r2,zero,428f4 <__alt_data_end+0xfffd1bb4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   42904:	80002716 	blt	r16,zero,429a4 <alt_printf+0x1bc>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   42908:	9c08983a 	sll	r4,r19,r16
   4290c:	2448703a 	and	r4,r4,r17
   42910:	2408d83a 	srl	r4,r4,r16
                        if (digit <= 9)
   42914:	a9000236 	bltu	r21,r4,42920 <alt_printf+0x138>
                            c = '0' + digit;
   42918:	21000c04 	addi	r4,r4,48
   4291c:	00000106 	br	42924 <alt_printf+0x13c>
                        else
                            c = 'a' + digit - 10;
   42920:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
   42924:	21003fcc 	andi	r4,r4,255
   42928:	2100201c 	xori	r4,r4,128
   4292c:	213fe004 	addi	r4,r4,-128
   42930:	00429fc0 	call	429fc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   42934:	843fff04 	addi	r16,r16,-4
   42938:	803ff30e 	bge	r16,zero,42908 <__alt_data_end+0xfffd1bc8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   4293c:	a021883a 	mov	r16,r20
   42940:	00001d06 	br	429b8 <alt_printf+0x1d0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   42944:	10803fcc 	andi	r2,r2,255
   42948:	1080201c 	xori	r2,r2,128
   4294c:	10bfe004 	addi	r2,r2,-128
   42950:	00c01cc4 	movi	r3,115
   42954:	10c0151e 	bne	r2,r3,429ac <alt_printf+0x1c4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   42958:	b4000017 	ldw	r16,0(r22)
   4295c:	b5800104 	addi	r22,r22,4

                    while(*s)
   42960:	81000003 	ldbu	r4,0(r16)
   42964:	20803fcc 	andi	r2,r4,255
   42968:	1080201c 	xori	r2,r2,128
   4296c:	10bfe004 	addi	r2,r2,-128
   42970:	10001026 	beq	r2,zero,429b4 <alt_printf+0x1cc>
                      alt_putchar(*s++);
   42974:	84000044 	addi	r16,r16,1
   42978:	21003fcc 	andi	r4,r4,255
   4297c:	2100201c 	xori	r4,r4,128
   42980:	213fe004 	addi	r4,r4,-128
   42984:	00429fc0 	call	429fc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   42988:	81000003 	ldbu	r4,0(r16)
   4298c:	20803fcc 	andi	r2,r4,255
   42990:	1080201c 	xori	r2,r2,128
   42994:	10bfe004 	addi	r2,r2,-128
   42998:	103ff61e 	bne	r2,zero,42974 <__alt_data_end+0xfffd1c34>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   4299c:	a021883a 	mov	r16,r20
   429a0:	00000506 	br	429b8 <alt_printf+0x1d0>
   429a4:	a021883a 	mov	r16,r20
   429a8:	00000306 	br	429b8 <alt_printf+0x1d0>
   429ac:	a021883a 	mov	r16,r20
   429b0:	00000106 	br	429b8 <alt_printf+0x1d0>
   429b4:	a021883a 	mov	r16,r20
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   429b8:	81000003 	ldbu	r4,0(r16)
   429bc:	20803fcc 	andi	r2,r4,255
   429c0:	1080201c 	xori	r2,r2,128
   429c4:	10bfe004 	addi	r2,r2,-128
   429c8:	103f9d1e 	bne	r2,zero,42840 <__alt_data_end+0xfffd1b00>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   429cc:	dfc00917 	ldw	ra,36(sp)
   429d0:	df000817 	ldw	fp,32(sp)
   429d4:	ddc00717 	ldw	r23,28(sp)
   429d8:	dd800617 	ldw	r22,24(sp)
   429dc:	dd400517 	ldw	r21,20(sp)
   429e0:	dd000417 	ldw	r20,16(sp)
   429e4:	dcc00317 	ldw	r19,12(sp)
   429e8:	dc800217 	ldw	r18,8(sp)
   429ec:	dc400117 	ldw	r17,4(sp)
   429f0:	dc000017 	ldw	r16,0(sp)
   429f4:	dec00d04 	addi	sp,sp,52
   429f8:	f800283a 	ret

000429fc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   429fc:	deffff04 	addi	sp,sp,-4
   42a00:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   42a04:	00800134 	movhi	r2,4
   42a08:	109c3604 	addi	r2,r2,28888
   42a0c:	10800017 	ldw	r2,0(r2)
   42a10:	11400217 	ldw	r5,8(r2)
   42a14:	00447880 	call	44788 <putc>
#endif
#endif
}
   42a18:	dfc00017 	ldw	ra,0(sp)
   42a1c:	dec00104 	addi	sp,sp,4
   42a20:	f800283a 	ret

00042a24 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   42a24:	deffff04 	addi	sp,sp,-4
   42a28:	dfc00015 	stw	ra,0(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   42a2c:	00800134 	movhi	r2,4
   42a30:	109c3604 	addi	r2,r2,28888
   42a34:	10800017 	ldw	r2,0(r2)
   42a38:	11400217 	ldw	r5,8(r2)
   42a3c:	0043e040 	call	43e04 <fputs>
#endif
#endif
}
   42a40:	dfc00017 	ldw	ra,0(sp)
   42a44:	dec00104 	addi	sp,sp,4
   42a48:	f800283a 	ret

00042a4c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   42a4c:	defffb04 	addi	sp,sp,-20
   42a50:	dfc00415 	stw	ra,16(sp)
   42a54:	dcc00315 	stw	r19,12(sp)
   42a58:	dc800215 	stw	r18,8(sp)
   42a5c:	dc400115 	stw	r17,4(sp)
   42a60:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   42a64:	20003a16 	blt	r4,zero,42b50 <read+0x104>
   42a68:	2021883a 	mov	r16,r4
   42a6c:	2825883a 	mov	r18,r5
   42a70:	3027883a 	mov	r19,r6
   42a74:	01400304 	movi	r5,12
   42a78:	004228c0 	call	4228c <__mulsi3>
   42a7c:	04400134 	movhi	r17,4
   42a80:	8c57b304 	addi	r17,r17,24268
   42a84:	1463883a 	add	r17,r2,r17
  
  if (fd)
   42a88:	88003126 	beq	r17,zero,42b50 <read+0x104>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   42a8c:	01400304 	movi	r5,12
   42a90:	8009883a 	mov	r4,r16
   42a94:	004228c0 	call	4228c <__mulsi3>
   42a98:	00c00134 	movhi	r3,4
   42a9c:	18d7b504 	addi	r3,r3,24276
   42aa0:	10c5883a 	add	r2,r2,r3
   42aa4:	10800017 	ldw	r2,0(r2)
   42aa8:	108000cc 	andi	r2,r2,3
   42aac:	00c00044 	movi	r3,1
   42ab0:	10c01b26 	beq	r2,r3,42b20 <read+0xd4>
        (fd->dev->read))
   42ab4:	01400304 	movi	r5,12
   42ab8:	8009883a 	mov	r4,r16
   42abc:	004228c0 	call	4228c <__mulsi3>
   42ac0:	00c00134 	movhi	r3,4
   42ac4:	18d7b304 	addi	r3,r3,24268
   42ac8:	1885883a 	add	r2,r3,r2
   42acc:	10800017 	ldw	r2,0(r2)
   42ad0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   42ad4:	10001226 	beq	r2,zero,42b20 <read+0xd4>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   42ad8:	980d883a 	mov	r6,r19
   42adc:	900b883a 	mov	r5,r18
   42ae0:	8809883a 	mov	r4,r17
   42ae4:	103ee83a 	callr	r2
   42ae8:	1021883a 	mov	r16,r2
   42aec:	1000230e 	bge	r2,zero,42b7c <read+0x130>
   42af0:	00800134 	movhi	r2,4
   42af4:	109c3e04 	addi	r2,r2,28920
   42af8:	10800017 	ldw	r2,0(r2)
   42afc:	10000226 	beq	r2,zero,42b08 <read+0xbc>
   42b00:	103ee83a 	callr	r2
   42b04:	00000206 	br	42b10 <read+0xc4>
   42b08:	00800174 	movhi	r2,5
   42b0c:	10a2e104 	addi	r2,r2,-29820
        {
          ALT_ERRNO = -rval;
   42b10:	0421c83a 	sub	r16,zero,r16
   42b14:	14000015 	stw	r16,0(r2)
          return -1;
   42b18:	00bfffc4 	movi	r2,-1
   42b1c:	00001706 	br	42b7c <read+0x130>
   42b20:	00800134 	movhi	r2,4
   42b24:	109c3e04 	addi	r2,r2,28920
   42b28:	10800017 	ldw	r2,0(r2)
   42b2c:	10000226 	beq	r2,zero,42b38 <read+0xec>
   42b30:	103ee83a 	callr	r2
   42b34:	00000206 	br	42b40 <read+0xf4>
   42b38:	00800174 	movhi	r2,5
   42b3c:	10a2e104 	addi	r2,r2,-29820
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
   42b40:	00c00344 	movi	r3,13
   42b44:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
   42b48:	00bfffc4 	movi	r2,-1
   42b4c:	00000b06 	br	42b7c <read+0x130>
   42b50:	00800134 	movhi	r2,4
   42b54:	109c3e04 	addi	r2,r2,28920
   42b58:	10800017 	ldw	r2,0(r2)
   42b5c:	10000226 	beq	r2,zero,42b68 <read+0x11c>
   42b60:	103ee83a 	callr	r2
   42b64:	00000206 	br	42b70 <read+0x124>
   42b68:	00800174 	movhi	r2,5
   42b6c:	10a2e104 	addi	r2,r2,-29820
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   42b70:	00c01444 	movi	r3,81
   42b74:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   42b78:	00bfffc4 	movi	r2,-1
}
   42b7c:	dfc00417 	ldw	ra,16(sp)
   42b80:	dcc00317 	ldw	r19,12(sp)
   42b84:	dc800217 	ldw	r18,8(sp)
   42b88:	dc400117 	ldw	r17,4(sp)
   42b8c:	dc000017 	ldw	r16,0(sp)
   42b90:	dec00504 	addi	sp,sp,20
   42b94:	f800283a 	ret

00042b98 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
   42b98:	00800084 	movi	r2,2
   42b9c:	1100140e 	bge	r2,r4,42bf0 <alt_release_fd+0x58>
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   42ba0:	defffd04 	addi	sp,sp,-12
   42ba4:	dfc00215 	stw	ra,8(sp)
   42ba8:	dc400115 	stw	r17,4(sp)
   42bac:	dc000015 	stw	r16,0(sp)
   42bb0:	2021883a 	mov	r16,r4
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
   42bb4:	04400134 	movhi	r17,4
   42bb8:	8c57b304 	addi	r17,r17,24268
   42bbc:	01400304 	movi	r5,12
   42bc0:	004228c0 	call	4228c <__mulsi3>
   42bc4:	8885883a 	add	r2,r17,r2
   42bc8:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
   42bcc:	01400304 	movi	r5,12
   42bd0:	8009883a 	mov	r4,r16
   42bd4:	004228c0 	call	4228c <__mulsi3>
   42bd8:	8885883a 	add	r2,r17,r2
   42bdc:	10000015 	stw	zero,0(r2)
  }
}
   42be0:	dfc00217 	ldw	ra,8(sp)
   42be4:	dc400117 	ldw	r17,4(sp)
   42be8:	dc000017 	ldw	r16,0(sp)
   42bec:	dec00304 	addi	sp,sp,12
   42bf0:	f800283a 	ret

00042bf4 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   42bf4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42bf8:	00bfff84 	movi	r2,-2
   42bfc:	2884703a 	and	r2,r5,r2
   42c00:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   42c04:	d0a00a17 	ldw	r2,-32728(gp)
   42c08:	108000c4 	addi	r2,r2,3
   42c0c:	00ffff04 	movi	r3,-4
   42c10:	10c4703a 	and	r2,r2,r3
   42c14:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   42c18:	1109883a 	add	r4,r2,r4
   42c1c:	00c001f4 	movhi	r3,7
   42c20:	18c35004 	addi	r3,r3,3392
   42c24:	1900032e 	bgeu	r3,r4,42c34 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42c28:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   42c2c:	00bfffc4 	movi	r2,-1
   42c30:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   42c34:	d1200a15 	stw	r4,-32728(gp)
   42c38:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   42c3c:	f800283a 	ret

00042c40 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   42c40:	defffb04 	addi	sp,sp,-20
   42c44:	dfc00415 	stw	ra,16(sp)
   42c48:	dcc00315 	stw	r19,12(sp)
   42c4c:	dc800215 	stw	r18,8(sp)
   42c50:	dc400115 	stw	r17,4(sp)
   42c54:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   42c58:	20003916 	blt	r4,zero,42d40 <write+0x100>
   42c5c:	2021883a 	mov	r16,r4
   42c60:	2825883a 	mov	r18,r5
   42c64:	3027883a 	mov	r19,r6
   42c68:	01400304 	movi	r5,12
   42c6c:	004228c0 	call	4228c <__mulsi3>
   42c70:	04400134 	movhi	r17,4
   42c74:	8c57b304 	addi	r17,r17,24268
   42c78:	1463883a 	add	r17,r2,r17
  
  if (fd)
   42c7c:	88003026 	beq	r17,zero,42d40 <write+0x100>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   42c80:	01400304 	movi	r5,12
   42c84:	8009883a 	mov	r4,r16
   42c88:	004228c0 	call	4228c <__mulsi3>
   42c8c:	00c00134 	movhi	r3,4
   42c90:	18d7b504 	addi	r3,r3,24276
   42c94:	10c5883a 	add	r2,r2,r3
   42c98:	10800017 	ldw	r2,0(r2)
   42c9c:	108000cc 	andi	r2,r2,3
   42ca0:	10001b26 	beq	r2,zero,42d10 <write+0xd0>
   42ca4:	01400304 	movi	r5,12
   42ca8:	8009883a 	mov	r4,r16
   42cac:	004228c0 	call	4228c <__mulsi3>
   42cb0:	00c00134 	movhi	r3,4
   42cb4:	18d7b304 	addi	r3,r3,24268
   42cb8:	1885883a 	add	r2,r3,r2
   42cbc:	10800017 	ldw	r2,0(r2)
   42cc0:	10800617 	ldw	r2,24(r2)
   42cc4:	10001226 	beq	r2,zero,42d10 <write+0xd0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   42cc8:	980d883a 	mov	r6,r19
   42ccc:	900b883a 	mov	r5,r18
   42cd0:	8809883a 	mov	r4,r17
   42cd4:	103ee83a 	callr	r2
   42cd8:	1021883a 	mov	r16,r2
   42cdc:	1000230e 	bge	r2,zero,42d6c <write+0x12c>
   42ce0:	00800134 	movhi	r2,4
   42ce4:	109c3e04 	addi	r2,r2,28920
   42ce8:	10800017 	ldw	r2,0(r2)
   42cec:	10000226 	beq	r2,zero,42cf8 <write+0xb8>
   42cf0:	103ee83a 	callr	r2
   42cf4:	00000206 	br	42d00 <write+0xc0>
   42cf8:	00800174 	movhi	r2,5
   42cfc:	10a2e104 	addi	r2,r2,-29820
      {
        ALT_ERRNO = -rval;
   42d00:	0421c83a 	sub	r16,zero,r16
   42d04:	14000015 	stw	r16,0(r2)
        return -1;
   42d08:	00bfffc4 	movi	r2,-1
   42d0c:	00001706 	br	42d6c <write+0x12c>
   42d10:	00800134 	movhi	r2,4
   42d14:	109c3e04 	addi	r2,r2,28920
   42d18:	10800017 	ldw	r2,0(r2)
   42d1c:	10000226 	beq	r2,zero,42d28 <write+0xe8>
   42d20:	103ee83a 	callr	r2
   42d24:	00000206 	br	42d30 <write+0xf0>
   42d28:	00800174 	movhi	r2,5
   42d2c:	10a2e104 	addi	r2,r2,-29820
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
   42d30:	00c00344 	movi	r3,13
   42d34:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
   42d38:	00bfffc4 	movi	r2,-1
   42d3c:	00000b06 	br	42d6c <write+0x12c>
   42d40:	00800134 	movhi	r2,4
   42d44:	109c3e04 	addi	r2,r2,28920
   42d48:	10800017 	ldw	r2,0(r2)
   42d4c:	10000226 	beq	r2,zero,42d58 <write+0x118>
   42d50:	103ee83a 	callr	r2
   42d54:	00000206 	br	42d60 <write+0x120>
   42d58:	00800174 	movhi	r2,5
   42d5c:	10a2e104 	addi	r2,r2,-29820
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   42d60:	00c01444 	movi	r3,81
   42d64:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   42d68:	00bfffc4 	movi	r2,-1
}
   42d6c:	dfc00417 	ldw	ra,16(sp)
   42d70:	dcc00317 	ldw	r19,12(sp)
   42d74:	dc800217 	ldw	r18,8(sp)
   42d78:	dc400117 	ldw	r17,4(sp)
   42d7c:	dc000017 	ldw	r16,0(sp)
   42d80:	dec00504 	addi	sp,sp,20
   42d84:	f800283a 	ret

00042d88 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   42d88:	deffff04 	addi	sp,sp,-4
   42d8c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   42d90:	0043b240 	call	43b24 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   42d94:	00800044 	movi	r2,1
   42d98:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   42d9c:	dfc00017 	ldw	ra,0(sp)
   42da0:	dec00104 	addi	sp,sp,4
   42da4:	f800283a 	ret

00042da8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   42da8:	defffe04 	addi	sp,sp,-8
   42dac:	dfc00115 	stw	ra,4(sp)
   42db0:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   42db4:	04000134 	movhi	r16,4
   42db8:	84182704 	addi	r16,r16,24732
   42dbc:	01800144 	movi	r6,5
   42dc0:	000b883a 	mov	r5,zero
   42dc4:	8009883a 	mov	r4,r16
   42dc8:	0042fd00 	call	42fd0 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   42dcc:	01400134 	movhi	r5,4
   42dd0:	295c3a04 	addi	r5,r5,28904
   42dd4:	813ff604 	addi	r4,r16,-40
   42dd8:	00434a00 	call	434a0 <alt_dev_llist_insert>
}
   42ddc:	dfc00117 	ldw	ra,4(sp)
   42de0:	dc000017 	ldw	r16,0(sp)
   42de4:	dec00204 	addi	sp,sp,8
   42de8:	f800283a 	ret

00042dec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   42dec:	deffff04 	addi	sp,sp,-4
   42df0:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   42df4:	20800017 	ldw	r2,0(r4)
   42df8:	21c00217 	ldw	r7,8(r4)
   42dfc:	11000a04 	addi	r4,r2,40
   42e00:	00431140 	call	43114 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   42e04:	dfc00017 	ldw	ra,0(sp)
   42e08:	dec00104 	addi	sp,sp,4
   42e0c:	f800283a 	ret

00042e10 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   42e10:	deffff04 	addi	sp,sp,-4
   42e14:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   42e18:	20800017 	ldw	r2,0(r4)
   42e1c:	21c00217 	ldw	r7,8(r4)
   42e20:	11000a04 	addi	r4,r2,40
   42e24:	004326c0 	call	4326c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   42e28:	dfc00017 	ldw	ra,0(sp)
   42e2c:	dec00104 	addi	sp,sp,4
   42e30:	f800283a 	ret

00042e34 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   42e34:	deffff04 	addi	sp,sp,-4
   42e38:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   42e3c:	20800017 	ldw	r2,0(r4)
   42e40:	21400217 	ldw	r5,8(r4)
   42e44:	11000a04 	addi	r4,r2,40
   42e48:	00430500 	call	43050 <altera_avalon_jtag_uart_close>
}
   42e4c:	dfc00017 	ldw	ra,0(sp)
   42e50:	dec00104 	addi	sp,sp,4
   42e54:	f800283a 	ret

00042e58 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   42e58:	deffff04 	addi	sp,sp,-4
   42e5c:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   42e60:	21000017 	ldw	r4,0(r4)
   42e64:	21000a04 	addi	r4,r4,40
   42e68:	004308c0 	call	4308c <altera_avalon_jtag_uart_ioctl>
}
   42e6c:	dfc00017 	ldw	ra,0(sp)
   42e70:	dec00104 	addi	sp,sp,4
   42e74:	f800283a 	ret

00042e78 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   42e78:	20800017 	ldw	r2,0(r4)
   42e7c:	10800137 	ldwio	r2,4(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   42e80:	1081000c 	andi	r2,r2,1024
   42e84:	10000626 	beq	r2,zero,42ea0 <altera_avalon_jtag_uart_timeout+0x28>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   42e88:	20c00017 	ldw	r3,0(r4)
   42e8c:	20800817 	ldw	r2,32(r4)
   42e90:	10810014 	ori	r2,r2,1024
   42e94:	18800135 	stwio	r2,4(r3)
    sp->host_inactive = 0;
   42e98:	20000915 	stw	zero,36(r4)
   42e9c:	00000606 	br	42eb8 <altera_avalon_jtag_uart_timeout+0x40>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   42ea0:	20800917 	ldw	r2,36(r4)
   42ea4:	00e00034 	movhi	r3,32768
   42ea8:	18ffff04 	addi	r3,r3,-4
   42eac:	18800236 	bltu	r3,r2,42eb8 <altera_avalon_jtag_uart_timeout+0x40>
    sp->host_inactive++;
   42eb0:	10800044 	addi	r2,r2,1
   42eb4:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   42eb8:	00800174 	movhi	r2,5
   42ebc:	10a2e704 	addi	r2,r2,-29796
   42ec0:	10800017 	ldw	r2,0(r2)
   42ec4:	f800283a 	ret

00042ec8 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
   42ec8:	21800017 	ldw	r6,0(r4)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   42ecc:	32000104 	addi	r8,r6,4
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   42ed0:	02bfff84 	movi	r10,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   42ed4:	02ffff44 	movi	r11,-3
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   42ed8:	4013883a 	mov	r9,r8
   42edc:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   42ee0:	3880c00c 	andi	r2,r7,768
   42ee4:	10003926 	beq	r2,zero,42fcc <altera_avalon_jtag_uart_irq+0x104>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   42ee8:	3880400c 	andi	r2,r7,256
   42eec:	10001c26 	beq	r2,zero,42f60 <altera_avalon_jtag_uart_irq+0x98>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   42ef0:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   42ef4:	10800044 	addi	r2,r2,1
   42ef8:	1081ffcc 	andi	r2,r2,2047
   42efc:	20c00b17 	ldw	r3,44(r4)
   42f00:	10c01226 	beq	r2,r3,42f4c <altera_avalon_jtag_uart_irq+0x84>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   42f04:	30800037 	ldwio	r2,0(r6)
   42f08:	100b883a 	mov	r5,r2
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   42f0c:	10e0000c 	andi	r3,r2,32768
   42f10:	18000c26 	beq	r3,zero,42f44 <altera_avalon_jtag_uart_irq+0x7c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   42f14:	20c00a17 	ldw	r3,40(r4)
   42f18:	20c7883a 	add	r3,r4,r3
   42f1c:	18800e05 	stb	r2,56(r3)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   42f20:	20800a17 	ldw	r2,40(r4)
   42f24:	10800044 	addi	r2,r2,1
   42f28:	1081ffcc 	andi	r2,r2,2047
   42f2c:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   42f30:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   42f34:	10800044 	addi	r2,r2,1
   42f38:	1081ffcc 	andi	r2,r2,2047
   42f3c:	20c00b17 	ldw	r3,44(r4)
   42f40:	10fff01e 	bne	r2,r3,42f04 <__alt_data_end+0xfffd21c4>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   42f44:	297fffec 	andhi	r5,r5,65535
   42f48:	28000526 	beq	r5,zero,42f60 <altera_avalon_jtag_uart_irq+0x98>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   42f4c:	20800817 	ldw	r2,32(r4)
   42f50:	1284703a 	and	r2,r2,r10
   42f54:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   42f58:	40800035 	stwio	r2,0(r8)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   42f5c:	40800037 	ldwio	r2,0(r8)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   42f60:	3880800c 	andi	r2,r7,512
   42f64:	103fdc26 	beq	r2,zero,42ed8 <__alt_data_end+0xfffd2198>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   42f68:	380ed43a 	srli	r7,r7,16

      while (space > 0 && sp->tx_out != sp->tx_in)
   42f6c:	383fda26 	beq	r7,zero,42ed8 <__alt_data_end+0xfffd2198>
   42f70:	20c00d17 	ldw	r3,52(r4)
   42f74:	20800c17 	ldw	r2,48(r4)
   42f78:	18800d26 	beq	r3,r2,42fb0 <altera_avalon_jtag_uart_irq+0xe8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   42f7c:	20800d17 	ldw	r2,52(r4)
   42f80:	2085883a 	add	r2,r4,r2
   42f84:	10820e07 	ldb	r2,2104(r2)
   42f88:	30800035 	stwio	r2,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   42f8c:	20800d17 	ldw	r2,52(r4)
   42f90:	10800044 	addi	r2,r2,1
   42f94:	1081ffcc 	andi	r2,r2,2047
   42f98:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   42f9c:	39ffffc4 	addi	r7,r7,-1
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   42fa0:	383fcd26 	beq	r7,zero,42ed8 <__alt_data_end+0xfffd2198>
   42fa4:	20c00d17 	ldw	r3,52(r4)
   42fa8:	20800c17 	ldw	r2,48(r4)
   42fac:	18bff31e 	bne	r3,r2,42f7c <__alt_data_end+0xfffd223c>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   42fb0:	20800817 	ldw	r2,32(r4)
   42fb4:	12c4703a 	and	r2,r2,r11
   42fb8:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   42fbc:	20c00017 	ldw	r3,0(r4)
   42fc0:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   42fc4:	48800037 	ldwio	r2,0(r9)
   42fc8:	003fc306 	br	42ed8 <__alt_data_end+0xfffd2198>
   42fcc:	f800283a 	ret

00042fd0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   42fd0:	defffd04 	addi	sp,sp,-12
   42fd4:	dfc00215 	stw	ra,8(sp)
   42fd8:	dc000115 	stw	r16,4(sp)
   42fdc:	2021883a 	mov	r16,r4
   42fe0:	2809883a 	mov	r4,r5
   42fe4:	300b883a 	mov	r5,r6
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   42fe8:	00800044 	movi	r2,1
   42fec:	80800815 	stw	r2,32(r16)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   42ff0:	80c00017 	ldw	r3,0(r16)
   42ff4:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   42ff8:	d8000015 	stw	zero,0(sp)
   42ffc:	800f883a 	mov	r7,r16
   43000:	01800134 	movhi	r6,4
   43004:	318bb204 	addi	r6,r6,11976
   43008:	00436140 	call	43614 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4300c:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   43010:	800f883a 	mov	r7,r16
   43014:	01800134 	movhi	r6,4
   43018:	318b9e04 	addi	r6,r6,11896
   4301c:	00800174 	movhi	r2,5
   43020:	10a2e704 	addi	r2,r2,-29796
   43024:	11400017 	ldw	r5,0(r2)
   43028:	81000204 	addi	r4,r16,8
   4302c:	00434080 	call	43408 <alt_alarm_start>
   43030:	1000030e 	bge	r2,zero,43040 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   43034:	00a00034 	movhi	r2,32768
   43038:	10bfffc4 	addi	r2,r2,-1
   4303c:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   43040:	dfc00217 	ldw	ra,8(sp)
   43044:	dc000117 	ldw	r16,4(sp)
   43048:	dec00304 	addi	sp,sp,12
   4304c:	f800283a 	ret

00043050 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   43050:	21800c17 	ldw	r6,48(r4)
    if (flags & O_NONBLOCK) {
   43054:	2950000c 	andi	r5,r5,16384
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   43058:	00000106 	br	43060 <altera_avalon_jtag_uart_close+0x10>
    if (flags & O_NONBLOCK) {
   4305c:	2800071e 	bne	r5,zero,4307c <altera_avalon_jtag_uart_close+0x2c>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   43060:	20800d17 	ldw	r2,52(r4)
   43064:	11800726 	beq	r2,r6,43084 <altera_avalon_jtag_uart_close+0x34>
   43068:	20c00917 	ldw	r3,36(r4)
   4306c:	20800117 	ldw	r2,4(r4)
   43070:	18bffa36 	bltu	r3,r2,4305c <__alt_data_end+0xfffd231c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   43074:	0005883a 	mov	r2,zero
   43078:	f800283a 	ret
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
   4307c:	00bffd44 	movi	r2,-11
   43080:	f800283a 	ret
    }
  }

  return 0;
   43084:	0005883a 	mov	r2,zero
}
   43088:	f800283a 	ret

0004308c <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
   4308c:	009a8044 	movi	r2,27137
   43090:	28800326 	beq	r5,r2,430a0 <altera_avalon_jtag_uart_ioctl+0x14>
   43094:	009a8084 	movi	r2,27138
   43098:	28800f26 	beq	r5,r2,430d8 <altera_avalon_jtag_uart_ioctl+0x4c>
   4309c:	00001706 	br	430fc <altera_avalon_jtag_uart_ioctl+0x70>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   430a0:	20c00117 	ldw	r3,4(r4)
   430a4:	00a00034 	movhi	r2,32768
   430a8:	10bfffc4 	addi	r2,r2,-1
   430ac:	18801526 	beq	r3,r2,43104 <altera_avalon_jtag_uart_ioctl+0x78>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   430b0:	30800017 	ldw	r2,0(r6)
   430b4:	10ffff84 	addi	r3,r2,-2
   430b8:	01600034 	movhi	r5,32768
   430bc:	297fff04 	addi	r5,r5,-4
   430c0:	28c0022e 	bgeu	r5,r3,430cc <altera_avalon_jtag_uart_ioctl+0x40>
   430c4:	00a00034 	movhi	r2,32768
   430c8:	10bfff84 	addi	r2,r2,-2
   430cc:	20800115 	stw	r2,4(r4)
      rc = 0;
   430d0:	0005883a 	mov	r2,zero
   430d4:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   430d8:	20c00117 	ldw	r3,4(r4)
   430dc:	00a00034 	movhi	r2,32768
   430e0:	10bfffc4 	addi	r2,r2,-1
   430e4:	18800926 	beq	r3,r2,4310c <altera_avalon_jtag_uart_ioctl+0x80>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   430e8:	20800917 	ldw	r2,36(r4)
   430ec:	10c5803a 	cmpltu	r2,r2,r3
   430f0:	30800015 	stw	r2,0(r6)
      rc = 0;
   430f4:	0005883a 	mov	r2,zero
   430f8:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
   430fc:	00bff9c4 	movi	r2,-25
   43100:	f800283a 	ret
   43104:	00bff9c4 	movi	r2,-25
   43108:	f800283a 	ret
   4310c:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
   43110:	f800283a 	ret

00043114 <altera_avalon_jtag_uart_read>:
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   43114:	0180450e 	bge	zero,r6,4322c <altera_avalon_jtag_uart_read+0x118>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   43118:	defff504 	addi	sp,sp,-44
   4311c:	dfc00a15 	stw	ra,40(sp)
   43120:	df000915 	stw	fp,36(sp)
   43124:	ddc00815 	stw	r23,32(sp)
   43128:	dd800715 	stw	r22,28(sp)
   4312c:	dd400615 	stw	r21,24(sp)
   43130:	dd000515 	stw	r20,20(sp)
   43134:	dcc00415 	stw	r19,16(sp)
   43138:	dc800315 	stw	r18,12(sp)
   4313c:	dc400215 	stw	r17,8(sp)
   43140:	dc000115 	stw	r16,4(sp)
   43144:	2023883a 	mov	r17,r4
   43148:	2839883a 	mov	fp,r5
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4314c:	05c20004 	movi	r23,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   43150:	25800e04 	addi	r22,r4,56
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   43154:	39d0000c 	andi	r7,r7,16384
   43158:	d9c00015 	stw	r7,0(sp)
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4315c:	e029883a 	mov	r20,fp
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   43160:	8cc00a17 	ldw	r19,40(r17)
      out = sp->rx_out;
   43164:	8c800b17 	ldw	r18,44(r17)

      if (in >= out)
   43168:	9c800236 	bltu	r19,r18,43174 <altera_avalon_jtag_uart_read+0x60>
        n = in - out;
   4316c:	9ca1c83a 	sub	r16,r19,r18
   43170:	00000106 	br	43178 <altera_avalon_jtag_uart_read+0x64>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   43174:	bca1c83a 	sub	r16,r23,r18

      if (n == 0)
   43178:	80000d26 	beq	r16,zero,431b0 <altera_avalon_jtag_uart_read+0x9c>
        break; /* No more data available */

      if (n > space)
   4317c:	302b883a 	mov	r21,r6
   43180:	3400012e 	bgeu	r6,r16,43188 <altera_avalon_jtag_uart_read+0x74>
   43184:	3021883a 	mov	r16,r6
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   43188:	800d883a 	mov	r6,r16
   4318c:	b48b883a 	add	r5,r22,r18
   43190:	a009883a 	mov	r4,r20
   43194:	00444440 	call	44444 <memcpy>
      ptr   += n;
   43198:	a429883a 	add	r20,r20,r16
      space -= n;
   4319c:	ac0dc83a 	sub	r6,r21,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   431a0:	9421883a 	add	r16,r18,r16
   431a4:	8401ffcc 	andi	r16,r16,2047
   431a8:	8c000b15 	stw	r16,44(r17)
    }
    while (space > 0);
   431ac:	01bfec16 	blt	zero,r6,43160 <__alt_data_end+0xfffd2420>

    /* If we read any data then return it */
    if (ptr != buffer)
   431b0:	a700121e 	bne	r20,fp,431fc <altera_avalon_jtag_uart_read+0xe8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   431b4:	d8800017 	ldw	r2,0(sp)
   431b8:	10000a1e 	bne	r2,zero,431e4 <altera_avalon_jtag_uart_read+0xd0>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   431bc:	88800a17 	ldw	r2,40(r17)
   431c0:	9880031e 	bne	r19,r2,431d0 <altera_avalon_jtag_uart_read+0xbc>
   431c4:	88c00917 	ldw	r3,36(r17)
   431c8:	88800117 	ldw	r2,4(r17)
   431cc:	18bffb36 	bltu	r3,r2,431bc <__alt_data_end+0xfffd247c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   431d0:	88800a17 	ldw	r2,40(r17)
   431d4:	98800526 	beq	r19,r2,431ec <altera_avalon_jtag_uart_read+0xd8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   431d8:	01bfe016 	blt	zero,r6,4315c <__alt_data_end+0xfffd241c>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
   431dc:	00bffec4 	movi	r2,-5
   431e0:	00001606 	br	4323c <altera_avalon_jtag_uart_read+0x128>
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   431e4:	00bffd44 	movi	r2,-11
   431e8:	00001406 	br	4323c <altera_avalon_jtag_uart_read+0x128>
  else
    return -EIO;
   431ec:	00bffec4 	movi	r2,-5
   431f0:	00001206 	br	4323c <altera_avalon_jtag_uart_read+0x128>
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   431f4:	00bffd44 	movi	r2,-11
   431f8:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   431fc:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43200:	00bfff84 	movi	r2,-2
   43204:	1884703a 	and	r2,r3,r2
   43208:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4320c:	88800817 	ldw	r2,32(r17)
   43210:	10800054 	ori	r2,r2,1
   43214:	88800815 	stw	r2,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   43218:	89000017 	ldw	r4,0(r17)
   4321c:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43220:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
   43224:	a705c83a 	sub	r2,r20,fp
   43228:	00000406 	br	4323c <altera_avalon_jtag_uart_read+0x128>
  else if (flags & O_NONBLOCK)
   4322c:	39d0000c 	andi	r7,r7,16384
   43230:	383ff01e 	bne	r7,zero,431f4 <__alt_data_end+0xfffd24b4>
    return -EWOULDBLOCK;
  else
    return -EIO;
   43234:	00bffec4 	movi	r2,-5
   43238:	f800283a 	ret
}
   4323c:	dfc00a17 	ldw	ra,40(sp)
   43240:	df000917 	ldw	fp,36(sp)
   43244:	ddc00817 	ldw	r23,32(sp)
   43248:	dd800717 	ldw	r22,28(sp)
   4324c:	dd400617 	ldw	r21,24(sp)
   43250:	dd000517 	ldw	r20,20(sp)
   43254:	dcc00417 	ldw	r19,16(sp)
   43258:	dc800317 	ldw	r18,12(sp)
   4325c:	dc400217 	ldw	r17,8(sp)
   43260:	dc000117 	ldw	r16,4(sp)
   43264:	dec00b04 	addi	sp,sp,44
   43268:	f800283a 	ret

0004326c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4326c:	defff504 	addi	sp,sp,-44
   43270:	dfc00a15 	stw	ra,40(sp)
   43274:	df000915 	stw	fp,36(sp)
   43278:	ddc00815 	stw	r23,32(sp)
   4327c:	dd800715 	stw	r22,28(sp)
   43280:	dd400615 	stw	r21,24(sp)
   43284:	dd000515 	stw	r20,20(sp)
   43288:	dcc00415 	stw	r19,16(sp)
   4328c:	dc800315 	stw	r18,12(sp)
   43290:	dc400215 	stw	r17,8(sp)
   43294:	dc000115 	stw	r16,4(sp)
   43298:	2021883a 	mov	r16,r4
   4329c:	282f883a 	mov	r23,r5
   432a0:	d9c00015 	stw	r7,0(sp)
   432a4:	2827883a 	mov	r19,r5
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   432a8:	05bfff84 	movi	r22,-2
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   432ac:	3d50000c 	andi	r21,r7,16384
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   432b0:	27020e04 	addi	fp,r4,2104
   432b4:	00001906 	br	4331c <altera_avalon_jtag_uart_write+0xb0>
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   432b8:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
   432bc:	81000d17 	ldw	r4,52(r16)

      if (in < out)
   432c0:	9100032e 	bgeu	r18,r4,432d0 <altera_avalon_jtag_uart_write+0x64>
        n = out - 1 - in;
   432c4:	247fffc4 	addi	r17,r4,-1
   432c8:	8ca3c83a 	sub	r17,r17,r18
   432cc:	00000606 	br	432e8 <altera_avalon_jtag_uart_write+0x7c>
      else if (out > 0)
   432d0:	20000326 	beq	r4,zero,432e0 <altera_avalon_jtag_uart_write+0x74>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   432d4:	00820004 	movi	r2,2048
   432d8:	14a3c83a 	sub	r17,r2,r18
   432dc:	00000206 	br	432e8 <altera_avalon_jtag_uart_write+0x7c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   432e0:	00c1ffc4 	movi	r3,2047
   432e4:	1ca3c83a 	sub	r17,r3,r18

      if (n == 0)
   432e8:	88002b26 	beq	r17,zero,43398 <altera_avalon_jtag_uart_write+0x12c>
        break;

      if (n > count)
   432ec:	3029883a 	mov	r20,r6
   432f0:	3440012e 	bgeu	r6,r17,432f8 <altera_avalon_jtag_uart_write+0x8c>
   432f4:	3023883a 	mov	r17,r6
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   432f8:	880d883a 	mov	r6,r17
   432fc:	980b883a 	mov	r5,r19
   43300:	e489883a 	add	r4,fp,r18
   43304:	00444440 	call	44444 <memcpy>
      ptr   += n;
   43308:	9c67883a 	add	r19,r19,r17
      count -= n;
   4330c:	a44dc83a 	sub	r6,r20,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43310:	9463883a 	add	r17,r18,r17
   43314:	8c41ffcc 	andi	r17,r17,2047
   43318:	84400c15 	stw	r17,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4331c:	01bfe616 	blt	zero,r6,432b8 <__alt_data_end+0xfffd2578>
   43320:	00001106 	br	43368 <altera_avalon_jtag_uart_write+0xfc>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   43324:	80800d17 	ldw	r2,52(r16)
   43328:	2080031e 	bne	r4,r2,43338 <altera_avalon_jtag_uart_write+0xcc>
   4332c:	80c00917 	ldw	r3,36(r16)
   43330:	80800117 	ldw	r2,4(r16)
   43334:	18bffb36 	bltu	r3,r2,43324 <__alt_data_end+0xfffd25e4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   43338:	80800917 	ldw	r2,36(r16)
   4333c:	103ff726 	beq	r2,zero,4331c <__alt_data_end+0xfffd25dc>
   43340:	00002006 	br	433c4 <altera_avalon_jtag_uart_write+0x158>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
   43344:	9dc5c83a 	sub	r2,r19,r23
   43348:	00002306 	br	433d8 <altera_avalon_jtag_uart_write+0x16c>
  else if (flags & O_NONBLOCK)
   4334c:	d8c00017 	ldw	r3,0(sp)
   43350:	1890000c 	andi	r2,r3,16384
   43354:	1000021e 	bne	r2,zero,43360 <altera_avalon_jtag_uart_write+0xf4>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   43358:	00bffec4 	movi	r2,-5
   4335c:	00001e06 	br	433d8 <altera_avalon_jtag_uart_write+0x16c>
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   43360:	00bffd44 	movi	r2,-11
   43364:	00001c06 	br	433d8 <altera_avalon_jtag_uart_write+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43368:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4336c:	00bfff84 	movi	r2,-2
   43370:	1884703a 	and	r2,r3,r2
   43374:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   43378:	80800817 	ldw	r2,32(r16)
   4337c:	10800094 	ori	r2,r2,2
   43380:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   43384:	81000017 	ldw	r4,0(r16)
   43388:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4338c:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   43390:	9dffec1e 	bne	r19,r23,43344 <__alt_data_end+0xfffd2604>
   43394:	003fed06 	br	4334c <__alt_data_end+0xfffd260c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43398:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4339c:	1d84703a 	and	r2,r3,r22
   433a0:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   433a4:	80800817 	ldw	r2,32(r16)
   433a8:	10800094 	ori	r2,r2,2
   433ac:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   433b0:	81400017 	ldw	r5,0(r16)
   433b4:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   433b8:	1801703a 	wrctl	status,r3
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   433bc:	a83fd926 	beq	r21,zero,43324 <__alt_data_end+0xfffd25e4>
   433c0:	00000306 	br	433d0 <altera_avalon_jtag_uart_write+0x164>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   433c4:	9dffdf1e 	bne	r19,r23,43344 <__alt_data_end+0xfffd2604>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   433c8:	00bffec4 	movi	r2,-5
   433cc:	00000206 	br	433d8 <altera_avalon_jtag_uart_write+0x16c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   433d0:	9dffdc1e 	bne	r19,r23,43344 <__alt_data_end+0xfffd2604>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   433d4:	00bffd44 	movi	r2,-11
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
   433d8:	dfc00a17 	ldw	ra,40(sp)
   433dc:	df000917 	ldw	fp,36(sp)
   433e0:	ddc00817 	ldw	r23,32(sp)
   433e4:	dd800717 	ldw	r22,28(sp)
   433e8:	dd400617 	ldw	r21,24(sp)
   433ec:	dd000517 	ldw	r20,20(sp)
   433f0:	dcc00417 	ldw	r19,16(sp)
   433f4:	dc800317 	ldw	r18,12(sp)
   433f8:	dc400217 	ldw	r17,8(sp)
   433fc:	dc000117 	ldw	r16,4(sp)
   43400:	dec00b04 	addi	sp,sp,44
   43404:	f800283a 	ret

00043408 <alt_alarm_start>:
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   43408:	00800174 	movhi	r2,5
   4340c:	10a2e704 	addi	r2,r2,-29796
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
   43410:	10800017 	ldw	r2,0(r2)
   43414:	10001d26 	beq	r2,zero,4348c <alt_alarm_start+0x84>
  {
    if (alarm)
   43418:	20001e26 	beq	r4,zero,43494 <alt_alarm_start+0x8c>
    {
      alarm->callback = callback;
   4341c:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
   43420:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43424:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43428:	00bfff84 	movi	r2,-2
   4342c:	1884703a 	and	r2,r3,r2
   43430:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   43434:	00800174 	movhi	r2,5
   43438:	10a2e604 	addi	r2,r2,-29800
   4343c:	10800017 	ldw	r2,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
   43440:	11800044 	addi	r6,r2,1
   43444:	314b883a 	add	r5,r6,r5
   43448:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4344c:	2880032e 	bgeu	r5,r2,4345c <alt_alarm_start+0x54>
      {
        alarm->rollover = 1;
   43450:	00800044 	movi	r2,1
   43454:	20800405 	stb	r2,16(r4)
   43458:	00000106 	br	43460 <alt_alarm_start+0x58>
      }
      else
      {
        alarm->rollover = 0;
   4345c:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   43460:	00800134 	movhi	r2,4
   43464:	109c4104 	addi	r2,r2,28932
   43468:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
   4346c:	11400017 	ldw	r5,0(r2)
   43470:	21400015 	stw	r5,0(r4)

  list->next->previous = entry;
   43474:	11400017 	ldw	r5,0(r2)
   43478:	29000115 	stw	r4,4(r5)
  list->next           = entry;
   4347c:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43480:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
   43484:	0005883a 	mov	r2,zero
   43488:	f800283a 	ret
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
   4348c:	00bfde84 	movi	r2,-134
   43490:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
   43494:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
   43498:	f800283a 	ret

0004349c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4349c:	f800283a 	ret

000434a0 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   434a0:	20000226 	beq	r4,zero,434ac <alt_dev_llist_insert+0xc>
   434a4:	20800217 	ldw	r2,8(r4)
   434a8:	1000121e 	bne	r2,zero,434f4 <alt_dev_llist_insert+0x54>
   434ac:	00800134 	movhi	r2,4
   434b0:	109c3e04 	addi	r2,r2,28920
   434b4:	10800017 	ldw	r2,0(r2)
   434b8:	10000426 	beq	r2,zero,434cc <alt_dev_llist_insert+0x2c>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   434bc:	deffff04 	addi	sp,sp,-4
   434c0:	dfc00015 	stw	ra,0(sp)
   434c4:	103ee83a 	callr	r2
   434c8:	00000606 	br	434e4 <alt_dev_llist_insert+0x44>
   434cc:	00800174 	movhi	r2,5
   434d0:	10a2e104 	addi	r2,r2,-29820
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   434d4:	00c00584 	movi	r3,22
   434d8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   434dc:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   434e0:	f800283a 	ret
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   434e4:	00c00584 	movi	r3,22
   434e8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   434ec:	00bffa84 	movi	r2,-22
   434f0:	00000806 	br	43514 <alt_dev_llist_insert+0x74>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   434f4:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   434f8:	28800017 	ldw	r2,0(r5)
   434fc:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   43500:	28800017 	ldw	r2,0(r5)
   43504:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   43508:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   4350c:	0005883a 	mov	r2,zero
   43510:	f800283a 	ret
}
   43514:	dfc00017 	ldw	ra,0(sp)
   43518:	dec00104 	addi	sp,sp,4
   4351c:	f800283a 	ret

00043520 <_do_ctors>:

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   43520:	00800134 	movhi	r2,4
   43524:	10955604 	addi	r2,r2,21848
   43528:	00c00134 	movhi	r3,4
   4352c:	18d55504 	addi	r3,r3,21844
   43530:	18801836 	bltu	r3,r2,43594 <_do_ctors+0x74>
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   43534:	defffc04 	addi	sp,sp,-16
   43538:	dfc00315 	stw	ra,12(sp)
   4353c:	dc800215 	stw	r18,8(sp)
   43540:	dc400115 	stw	r17,4(sp)
   43544:	dc000015 	stw	r16,0(sp)
   43548:	00c00134 	movhi	r3,4
   4354c:	18d55504 	addi	r3,r3,21844
   43550:	1821883a 	mov	r16,r3
   43554:	00800134 	movhi	r2,4
   43558:	10955604 	addi	r2,r2,21848
   4355c:	18a5c83a 	sub	r18,r3,r2
   43560:	9024d0ba 	srli	r18,r18,2
   43564:	94800044 	addi	r18,r18,1
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   43568:	0023883a 	mov	r17,zero
        (*ctor) (); 
   4356c:	80800017 	ldw	r2,0(r16)
   43570:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   43574:	843fff04 	addi	r16,r16,-4
   43578:	8c400044 	addi	r17,r17,1
   4357c:	8cbffb1e 	bne	r17,r18,4356c <__alt_data_end+0xfffd282c>
        (*ctor) (); 
}
   43580:	dfc00317 	ldw	ra,12(sp)
   43584:	dc800217 	ldw	r18,8(sp)
   43588:	dc400117 	ldw	r17,4(sp)
   4358c:	dc000017 	ldw	r16,0(sp)
   43590:	dec00404 	addi	sp,sp,16
   43594:	f800283a 	ret

00043598 <_do_dtors>:

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   43598:	00800134 	movhi	r2,4
   4359c:	10955604 	addi	r2,r2,21848
   435a0:	00c00134 	movhi	r3,4
   435a4:	18d55504 	addi	r3,r3,21844
   435a8:	18801836 	bltu	r3,r2,4360c <_do_dtors+0x74>
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   435ac:	defffc04 	addi	sp,sp,-16
   435b0:	dfc00315 	stw	ra,12(sp)
   435b4:	dc800215 	stw	r18,8(sp)
   435b8:	dc400115 	stw	r17,4(sp)
   435bc:	dc000015 	stw	r16,0(sp)
   435c0:	00c00134 	movhi	r3,4
   435c4:	18d55504 	addi	r3,r3,21844
   435c8:	1821883a 	mov	r16,r3
   435cc:	00800134 	movhi	r2,4
   435d0:	10955604 	addi	r2,r2,21848
   435d4:	18a5c83a 	sub	r18,r3,r2
   435d8:	9024d0ba 	srli	r18,r18,2
   435dc:	94800044 	addi	r18,r18,1
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   435e0:	0023883a 	mov	r17,zero
        (*dtor) (); 
   435e4:	80800017 	ldw	r2,0(r16)
   435e8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   435ec:	843fff04 	addi	r16,r16,-4
   435f0:	8c400044 	addi	r17,r17,1
   435f4:	8cbffb1e 	bne	r17,r18,435e4 <__alt_data_end+0xfffd28a4>
        (*dtor) (); 
}
   435f8:	dfc00317 	ldw	ra,12(sp)
   435fc:	dc800217 	ldw	r18,8(sp)
   43600:	dc400117 	ldw	r17,4(sp)
   43604:	dc000017 	ldw	r16,0(sp)
   43608:	dec00404 	addi	sp,sp,16
   4360c:	f800283a 	ret

00043610 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   43610:	f800283a 	ret

00043614 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   43614:	defffe04 	addi	sp,sp,-8
   43618:	dfc00115 	stw	ra,4(sp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4361c:	d8800217 	ldw	r2,8(sp)
   43620:	d8800015 	stw	r2,0(sp)
   43624:	00436cc0 	call	436cc <alt_iic_isr_register>
}  
   43628:	dfc00117 	ldw	ra,4(sp)
   4362c:	dec00204 	addi	sp,sp,8
   43630:	f800283a 	ret

00043634 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43634:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43638:	00bfff84 	movi	r2,-2
   4363c:	3084703a 	and	r2,r6,r2
   43640:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   43644:	00800174 	movhi	r2,5
   43648:	10a2e504 	addi	r2,r2,-29804
   4364c:	10c00017 	ldw	r3,0(r2)
   43650:	01000044 	movi	r4,1
   43654:	214a983a 	sll	r5,r4,r5
   43658:	28cab03a 	or	r5,r5,r3
   4365c:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   43660:	10800017 	ldw	r2,0(r2)
   43664:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43668:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   4366c:	0005883a 	mov	r2,zero
   43670:	f800283a 	ret

00043674 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43674:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43678:	00bfff84 	movi	r2,-2
   4367c:	3084703a 	and	r2,r6,r2
   43680:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   43684:	00800174 	movhi	r2,5
   43688:	10a2e504 	addi	r2,r2,-29804
   4368c:	10c00017 	ldw	r3,0(r2)
   43690:	013fff84 	movi	r4,-2
   43694:	214a183a 	rol	r5,r4,r5
   43698:	28ca703a 	and	r5,r5,r3
   4369c:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   436a0:	10800017 	ldw	r2,0(r2)
   436a4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   436a8:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   436ac:	0005883a 	mov	r2,zero
   436b0:	f800283a 	ret

000436b4 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   436b4:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   436b8:	00800044 	movi	r2,1
   436bc:	1144983a 	sll	r2,r2,r5
   436c0:	10c4703a 	and	r2,r2,r3
}
   436c4:	1004c03a 	cmpne	r2,r2,zero
   436c8:	f800283a 	ret

000436cc <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   436cc:	008007c4 	movi	r2,31
   436d0:	11401316 	blt	r2,r5,43720 <alt_iic_isr_register+0x54>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   436d4:	defffe04 	addi	sp,sp,-8
   436d8:	dfc00115 	stw	ra,4(sp)
   436dc:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   436e0:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   436e4:	00bfff84 	movi	r2,-2
   436e8:	8084703a 	and	r2,r16,r2
   436ec:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   436f0:	280490fa 	slli	r2,r5,3
   436f4:	00c00174 	movhi	r3,5
   436f8:	18e2f204 	addi	r3,r3,-29752
   436fc:	1885883a 	add	r2,r3,r2
   43700:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   43704:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   43708:	30000226 	beq	r6,zero,43714 <alt_iic_isr_register+0x48>
   4370c:	00436340 	call	43634 <alt_ic_irq_enable>
   43710:	00000106 	br	43718 <alt_iic_isr_register+0x4c>
   43714:	00436740 	call	43674 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43718:	8001703a 	wrctl	status,r16
   4371c:	00000206 	br	43728 <alt_iic_isr_register+0x5c>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
   43720:	00bffa84 	movi	r2,-22
   43724:	f800283a 	ret

    alt_irq_enable_all(status);
  }

  return rc; 
}
   43728:	dfc00117 	ldw	ra,4(sp)
   4372c:	dc000017 	ldw	r16,0(sp)
   43730:	dec00204 	addi	sp,sp,8
   43734:	f800283a 	ret

00043738 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   43738:	defffc04 	addi	sp,sp,-16
   4373c:	dfc00315 	stw	ra,12(sp)
   43740:	dc800215 	stw	r18,8(sp)
   43744:	dc400115 	stw	r17,4(sp)
   43748:	dc000015 	stw	r16,0(sp)
   4374c:	2025883a 	mov	r18,r4
   43750:	2809883a 	mov	r4,r5
   43754:	300b883a 	mov	r5,r6
  int old;

  old = open (name, flags, mode);
   43758:	380d883a 	mov	r6,r7
   4375c:	004384c0 	call	4384c <open>

  if (old >= 0)
   43760:	10000f16 	blt	r2,zero,437a0 <alt_open_fd+0x68>
   43764:	1021883a 	mov	r16,r2
  {
    fd->dev      = alt_fd_list[old].dev;
   43768:	01400304 	movi	r5,12
   4376c:	1009883a 	mov	r4,r2
   43770:	004228c0 	call	4228c <__mulsi3>
   43774:	04400134 	movhi	r17,4
   43778:	8c57b304 	addi	r17,r17,24268
   4377c:	88a3883a 	add	r17,r17,r2
   43780:	88800017 	ldw	r2,0(r17)
   43784:	90800015 	stw	r2,0(r18)
    fd->priv     = alt_fd_list[old].priv;
   43788:	88800117 	ldw	r2,4(r17)
   4378c:	90800115 	stw	r2,4(r18)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   43790:	88800217 	ldw	r2,8(r17)
   43794:	90800215 	stw	r2,8(r18)

    alt_release_fd (old);
   43798:	8009883a 	mov	r4,r16
   4379c:	0042b980 	call	42b98 <alt_release_fd>
  }
} 
   437a0:	dfc00317 	ldw	ra,12(sp)
   437a4:	dc800217 	ldw	r18,8(sp)
   437a8:	dc400117 	ldw	r17,4(sp)
   437ac:	dc000017 	ldw	r16,0(sp)
   437b0:	dec00404 	addi	sp,sp,16
   437b4:	f800283a 	ret

000437b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   437b8:	defffa04 	addi	sp,sp,-24
   437bc:	dfc00515 	stw	ra,20(sp)
   437c0:	dd000415 	stw	r20,16(sp)
   437c4:	dcc00315 	stw	r19,12(sp)
   437c8:	dc800215 	stw	r18,8(sp)
   437cc:	dc400115 	stw	r17,4(sp)
   437d0:	dc000015 	stw	r16,0(sp)
   437d4:	2829883a 	mov	r20,r5
   437d8:	3027883a 	mov	r19,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   437dc:	04407fc4 	movi	r17,511
   437e0:	04800044 	movi	r18,1
   437e4:	04000134 	movhi	r16,4
   437e8:	8417b604 	addi	r16,r16,24280
   437ec:	880f883a 	mov	r7,r17
   437f0:	900d883a 	mov	r6,r18
   437f4:	200b883a 	mov	r5,r4
   437f8:	8009883a 	mov	r4,r16
   437fc:	00437380 	call	43738 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   43800:	843ffd04 	addi	r16,r16,-12
   43804:	880f883a 	mov	r7,r17
   43808:	000d883a 	mov	r6,zero
   4380c:	a00b883a 	mov	r5,r20
   43810:	8009883a 	mov	r4,r16
   43814:	00437380 	call	43738 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   43818:	880f883a 	mov	r7,r17
   4381c:	900d883a 	mov	r6,r18
   43820:	980b883a 	mov	r5,r19
   43824:	81000604 	addi	r4,r16,24
   43828:	00437380 	call	43738 <alt_open_fd>
}  
   4382c:	dfc00517 	ldw	ra,20(sp)
   43830:	dd000417 	ldw	r20,16(sp)
   43834:	dcc00317 	ldw	r19,12(sp)
   43838:	dc800217 	ldw	r18,8(sp)
   4383c:	dc400117 	ldw	r17,4(sp)
   43840:	dc000017 	ldw	r16,0(sp)
   43844:	dec00604 	addi	sp,sp,24
   43848:	f800283a 	ret

0004384c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4384c:	defff704 	addi	sp,sp,-36
   43850:	dfc00815 	stw	ra,32(sp)
   43854:	ddc00715 	stw	r23,28(sp)
   43858:	dd800615 	stw	r22,24(sp)
   4385c:	dd400515 	stw	r21,20(sp)
   43860:	dd000415 	stw	r20,16(sp)
   43864:	dcc00315 	stw	r19,12(sp)
   43868:	dc800215 	stw	r18,8(sp)
   4386c:	dc400115 	stw	r17,4(sp)
   43870:	dc000015 	stw	r16,0(sp)
   43874:	202b883a 	mov	r21,r4
   43878:	2829883a 	mov	r20,r5
   4387c:	302d883a 	mov	r22,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   43880:	01400134 	movhi	r5,4
   43884:	295c3a04 	addi	r5,r5,28904
   43888:	0043b2c0 	call	43b2c <alt_find_dev>
   4388c:	1000431e 	bne	r2,zero,4399c <open+0x150>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   43890:	a809883a 	mov	r4,r21
   43894:	0043ba80 	call	43ba8 <alt_find_file>
   43898:	1023883a 	mov	r17,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4389c:	1000501e 	bne	r2,zero,439e0 <open+0x194>
      }
    }
  }
  else
  {
    status = -ENODEV;
   438a0:	047ffb44 	movi	r17,-19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   438a4:	043fffc4 	movi	r16,-1
   438a8:	00001506 	br	43900 <open+0xb4>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   438ac:	11400017 	ldw	r5,0(r2)
   438b0:	2980031e 	bne	r5,r6,438c0 <open+0x74>
   438b4:	21400017 	ldw	r5,0(r4)
   438b8:	2800010e 	bge	r5,zero,438c0 <open+0x74>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   438bc:	98800f1e 	bne	r19,r2,438fc <open+0xb0>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   438c0:	18c00044 	addi	r3,r3,1
   438c4:	10800304 	addi	r2,r2,12
   438c8:	21000304 	addi	r4,r4,12
   438cc:	90fff72e 	bgeu	r18,r3,438ac <__alt_data_end+0xfffd2b6c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   438d0:	88800317 	ldw	r2,12(r17)
   438d4:	10001826 	beq	r2,zero,43938 <open+0xec>
   438d8:	b00f883a 	mov	r7,r22
   438dc:	a00d883a 	mov	r6,r20
   438e0:	a80b883a 	mov	r5,r21
   438e4:	9809883a 	mov	r4,r19
   438e8:	103ee83a 	callr	r2
   438ec:	1023883a 	mov	r17,r2
   438f0:	8005883a 	mov	r2,r16
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   438f4:	88003f0e 	bge	r17,zero,439f4 <open+0x1a8>
   438f8:	00000106 	br	43900 <open+0xb4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   438fc:	047ffcc4 	movi	r17,-13

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
   43900:	8009883a 	mov	r4,r16
   43904:	0042b980 	call	42b98 <alt_release_fd>
   43908:	00800134 	movhi	r2,4
   4390c:	109c3e04 	addi	r2,r2,28920
   43910:	10800017 	ldw	r2,0(r2)
   43914:	10000226 	beq	r2,zero,43920 <open+0xd4>
   43918:	103ee83a 	callr	r2
   4391c:	00000206 	br	43928 <open+0xdc>
   43920:	00800174 	movhi	r2,5
   43924:	10a2e104 	addi	r2,r2,-29820
    ALT_ERRNO = -status;
   43928:	0463c83a 	sub	r17,zero,r17
   4392c:	14400015 	stw	r17,0(r2)
    return -1;
   43930:	00bfffc4 	movi	r2,-1
   43934:	00002f06 	br	439f4 <open+0x1a8>
   43938:	8005883a 	mov	r2,r16
   4393c:	00002d06 	br	439f4 <open+0x1a8>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
   43940:	8023883a 	mov	r17,r16
   43944:	003fee06 	br	43900 <__alt_data_end+0xfffd2bc0>
   43948:	8023883a 	mov	r17,r16
   4394c:	003fec06 	br	43900 <__alt_data_end+0xfffd2bc0>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   43950:	01400304 	movi	r5,12
   43954:	8009883a 	mov	r4,r16
   43958:	004228c0 	call	4228c <__mulsi3>
   4395c:	05c00134 	movhi	r23,4
   43960:	bdd7b304 	addi	r23,r23,24268
   43964:	15e7883a 	add	r19,r2,r23

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   43968:	00900034 	movhi	r2,16384
   4396c:	10bfffc4 	addi	r2,r2,-1
   43970:	a084703a 	and	r2,r20,r2
   43974:	10900034 	orhi	r2,r2,16384
   43978:	98800215 	stw	r2,8(r19)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4397c:	00800134 	movhi	r2,4
   43980:	109c3904 	addi	r2,r2,28900
   43984:	14800017 	ldw	r18,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   43988:	99800017 	ldw	r6,0(r19)
   4398c:	b805883a 	mov	r2,r23
   43990:	b9000204 	addi	r4,r23,8
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   43994:	0007883a 	mov	r3,zero
   43998:	003fc406 	br	438ac <__alt_data_end+0xfffd2b6c>
   4399c:	1023883a 	mov	r17,r2
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
   439a0:	1009883a 	mov	r4,r2
   439a4:	0043c740 	call	43c74 <alt_get_fd>
   439a8:	1021883a 	mov	r16,r2
   439ac:	103fe416 	blt	r2,zero,43940 <__alt_data_end+0xfffd2c00>
   439b0:	003fe706 	br	43950 <__alt_data_end+0xfffd2c10>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   439b4:	01400304 	movi	r5,12
   439b8:	8009883a 	mov	r4,r16
   439bc:	004228c0 	call	4228c <__mulsi3>
   439c0:	04c00134 	movhi	r19,4
   439c4:	9cd7b304 	addi	r19,r19,24268
   439c8:	14e7883a 	add	r19,r2,r19
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   439cc:	00900034 	movhi	r2,16384
   439d0:	10bfffc4 	addi	r2,r2,-1
   439d4:	a084703a 	and	r2,r20,r2
   439d8:	98800215 	stw	r2,8(r19)
   439dc:	003fbc06 	br	438d0 <__alt_data_end+0xfffd2b90>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
   439e0:	1009883a 	mov	r4,r2
   439e4:	0043c740 	call	43c74 <alt_get_fd>
   439e8:	1021883a 	mov	r16,r2
   439ec:	103ff10e 	bge	r2,zero,439b4 <__alt_data_end+0xfffd2c74>
   439f0:	003fd506 	br	43948 <__alt_data_end+0xfffd2c08>
  }
  
  /* return the reference upon success */

  return index;
}
   439f4:	dfc00817 	ldw	ra,32(sp)
   439f8:	ddc00717 	ldw	r23,28(sp)
   439fc:	dd800617 	ldw	r22,24(sp)
   43a00:	dd400517 	ldw	r21,20(sp)
   43a04:	dd000417 	ldw	r20,16(sp)
   43a08:	dcc00317 	ldw	r19,12(sp)
   43a0c:	dc800217 	ldw	r18,8(sp)
   43a10:	dc400117 	ldw	r17,4(sp)
   43a14:	dc000017 	ldw	r16,0(sp)
   43a18:	dec00904 	addi	sp,sp,36
   43a1c:	f800283a 	ret

00043a20 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43a20:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43a24:	00bfff84 	movi	r2,-2
   43a28:	1884703a 	and	r2,r3,r2
   43a2c:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   43a30:	20800017 	ldw	r2,0(r4)
   43a34:	21400117 	ldw	r5,4(r4)
   43a38:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
   43a3c:	20800117 	ldw	r2,4(r4)
   43a40:	21400017 	ldw	r5,0(r4)
   43a44:	11400015 	stw	r5,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   43a48:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   43a4c:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43a50:	1801703a 	wrctl	status,r3
   43a54:	f800283a 	ret

00043a58 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   43a58:	defffb04 	addi	sp,sp,-20
   43a5c:	dfc00415 	stw	ra,16(sp)
   43a60:	dcc00315 	stw	r19,12(sp)
   43a64:	dc800215 	stw	r18,8(sp)
   43a68:	dc400115 	stw	r17,4(sp)
   43a6c:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   43a70:	d0e00c04 	addi	r3,gp,-32720
   43a74:	1c000017 	ldw	r16,0(r3)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   43a78:	d0a6b117 	ldw	r2,-25916(gp)
   43a7c:	10800044 	addi	r2,r2,1
   43a80:	d0a6b115 	stw	r2,-25916(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   43a84:	80c02026 	beq	r16,r3,43b08 <alt_tick+0xb0>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   43a88:	04c00044 	movi	r19,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   43a8c:	1825883a 	mov	r18,r3
  {
    next = (alt_alarm*) alarm->llist.next;
   43a90:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   43a94:	80800403 	ldbu	r2,16(r16)
   43a98:	10001526 	beq	r2,zero,43af0 <alt_tick+0x98>
   43a9c:	d0a6b117 	ldw	r2,-25916(gp)
   43aa0:	1000171e 	bne	r2,zero,43b00 <alt_tick+0xa8>
    {
      alarm->rollover = 0;
   43aa4:	80000405 	stb	zero,16(r16)
   43aa8:	00001106 	br	43af0 <alt_tick+0x98>

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
      {
        alt_alarm_stop (alarm);
   43aac:	8009883a 	mov	r4,r16
   43ab0:	0043a200 	call	43a20 <alt_alarm_stop>
   43ab4:	00000606 	br	43ad0 <alt_tick+0x78>
      }
      else
      {
        alarm->time += next_callback;
   43ab8:	80c00217 	ldw	r3,8(r16)
   43abc:	10c5883a 	add	r2,r2,r3
   43ac0:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   43ac4:	d0e6b117 	ldw	r3,-25916(gp)
   43ac8:	10c0012e 	bgeu	r2,r3,43ad0 <alt_tick+0x78>
        {
          alarm->rollover = 1;
   43acc:	84c00405 	stb	r19,16(r16)
   43ad0:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   43ad4:	8cbfee1e 	bne	r17,r18,43a90 <__alt_data_end+0xfffd2d50>
   43ad8:	00000b06 	br	43b08 <alt_tick+0xb0>
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
   43adc:	80800317 	ldw	r2,12(r16)
   43ae0:	81000517 	ldw	r4,20(r16)
   43ae4:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   43ae8:	103ff31e 	bne	r2,zero,43ab8 <__alt_data_end+0xfffd2d78>
   43aec:	003fef06 	br	43aac <__alt_data_end+0xfffd2d6c>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   43af0:	d0e6b117 	ldw	r3,-25916(gp)
   43af4:	80800217 	ldw	r2,8(r16)
   43af8:	18bff536 	bltu	r3,r2,43ad0 <__alt_data_end+0xfffd2d90>
   43afc:	003ff706 	br	43adc <__alt_data_end+0xfffd2d9c>
   43b00:	d0a6b117 	ldw	r2,-25916(gp)
   43b04:	003ff206 	br	43ad0 <__alt_data_end+0xfffd2d90>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   43b08:	dfc00417 	ldw	ra,16(sp)
   43b0c:	dcc00317 	ldw	r19,12(sp)
   43b10:	dc800217 	ldw	r18,8(sp)
   43b14:	dc400117 	ldw	r17,4(sp)
   43b18:	dc000017 	ldw	r16,0(sp)
   43b1c:	dec00504 	addi	sp,sp,20
   43b20:	f800283a 	ret

00043b24 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   43b24:	000170fa 	wrctl	ienable,zero
   43b28:	f800283a 	ret

00043b2c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   43b2c:	defffb04 	addi	sp,sp,-20
   43b30:	dfc00415 	stw	ra,16(sp)
   43b34:	dcc00315 	stw	r19,12(sp)
   43b38:	dc800215 	stw	r18,8(sp)
   43b3c:	dc400115 	stw	r17,4(sp)
   43b40:	dc000015 	stw	r16,0(sp)
   43b44:	2027883a 	mov	r19,r4
   43b48:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   43b4c:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   43b50:	0044db40 	call	44db4 <strlen>
   43b54:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   43b58:	8c000926 	beq	r17,r16,43b80 <alt_find_dev+0x54>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   43b5c:	900d883a 	mov	r6,r18
   43b60:	980b883a 	mov	r5,r19
   43b64:	81000217 	ldw	r4,8(r16)
   43b68:	00443c80 	call	443c8 <memcmp>
   43b6c:	10000626 	beq	r2,zero,43b88 <alt_find_dev+0x5c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   43b70:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   43b74:	8c3ff91e 	bne	r17,r16,43b5c <__alt_data_end+0xfffd2e1c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   43b78:	0005883a 	mov	r2,zero
   43b7c:	00000306 	br	43b8c <alt_find_dev+0x60>
   43b80:	0005883a 	mov	r2,zero
   43b84:	00000106 	br	43b8c <alt_find_dev+0x60>
   43b88:	8005883a 	mov	r2,r16
}
   43b8c:	dfc00417 	ldw	ra,16(sp)
   43b90:	dcc00317 	ldw	r19,12(sp)
   43b94:	dc800217 	ldw	r18,8(sp)
   43b98:	dc400117 	ldw	r17,4(sp)
   43b9c:	dc000017 	ldw	r16,0(sp)
   43ba0:	dec00504 	addi	sp,sp,20
   43ba4:	f800283a 	ret

00043ba8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   43ba8:	defffa04 	addi	sp,sp,-24
   43bac:	dfc00515 	stw	ra,20(sp)
   43bb0:	dd000415 	stw	r20,16(sp)
   43bb4:	dcc00315 	stw	r19,12(sp)
   43bb8:	dc800215 	stw	r18,8(sp)
   43bbc:	dc400115 	stw	r17,4(sp)
   43bc0:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   43bc4:	00800134 	movhi	r2,4
   43bc8:	109c3c04 	addi	r2,r2,28912
   43bcc:	14000017 	ldw	r16,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   43bd0:	80801d26 	beq	r16,r2,43c48 <alt_find_file+0xa0>
   43bd4:	2027883a 	mov	r19,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
   43bd8:	04800bc4 	movi	r18,47
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   43bdc:	00800134 	movhi	r2,4
   43be0:	109c3c04 	addi	r2,r2,28912
   43be4:	1029883a 	mov	r20,r2
  {
    len = strlen(next->name);
   43be8:	84400217 	ldw	r17,8(r16)
   43bec:	8809883a 	mov	r4,r17
   43bf0:	0044db40 	call	44db4 <strlen>
   43bf4:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
   43bf8:	8889883a 	add	r4,r17,r2
   43bfc:	213fffc7 	ldb	r4,-1(r4)
   43c00:	2480011e 	bne	r4,r18,43c08 <alt_find_file+0x60>
    {
      len -= 1;
   43c04:	10ffffc4 	addi	r3,r2,-1
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   43c08:	180d883a 	mov	r6,r3
   43c0c:	98c7883a 	add	r3,r19,r3
   43c10:	18800003 	ldbu	r2,0(r3)
   43c14:	10c03fcc 	andi	r3,r2,255
   43c18:	18c0201c 	xori	r3,r3,128
   43c1c:	18ffe004 	addi	r3,r3,-128
   43c20:	1c800126 	beq	r3,r18,43c28 <alt_find_file+0x80>
   43c24:	1800041e 	bne	r3,zero,43c38 <alt_find_file+0x90>
        !memcmp (next->name, name, len))
   43c28:	980b883a 	mov	r5,r19
   43c2c:	8809883a 	mov	r4,r17
   43c30:	00443c80 	call	443c8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   43c34:	10000626 	beq	r2,zero,43c50 <alt_find_file+0xa8>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   43c38:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   43c3c:	853fea1e 	bne	r16,r20,43be8 <__alt_data_end+0xfffd2ea8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   43c40:	0005883a 	mov	r2,zero
   43c44:	00000306 	br	43c54 <alt_find_file+0xac>
   43c48:	0005883a 	mov	r2,zero
   43c4c:	00000106 	br	43c54 <alt_find_file+0xac>
   43c50:	8005883a 	mov	r2,r16
}
   43c54:	dfc00517 	ldw	ra,20(sp)
   43c58:	dd000417 	ldw	r20,16(sp)
   43c5c:	dcc00317 	ldw	r19,12(sp)
   43c60:	dc800217 	ldw	r18,8(sp)
   43c64:	dc400117 	ldw	r17,4(sp)
   43c68:	dc000017 	ldw	r16,0(sp)
   43c6c:	dec00604 	addi	sp,sp,24
   43c70:	f800283a 	ret

00043c74 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   43c74:	defffd04 	addi	sp,sp,-12
   43c78:	dfc00215 	stw	ra,8(sp)
   43c7c:	dc400115 	stw	r17,4(sp)
   43c80:	dc000015 	stw	r16,0(sp)
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
   43c84:	00800134 	movhi	r2,4
   43c88:	1097b304 	addi	r2,r2,24268
   43c8c:	10800017 	ldw	r2,0(r2)
   43c90:	10000726 	beq	r2,zero,43cb0 <alt_get_fd+0x3c>
   43c94:	00800134 	movhi	r2,4
   43c98:	1097b604 	addi	r2,r2,24280
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   43c9c:	04000044 	movi	r16,1
   43ca0:	01400804 	movi	r5,32
  {
    if (!alt_fd_list[i].dev)
   43ca4:	10c00017 	ldw	r3,0(r2)
   43ca8:	1800121e 	bne	r3,zero,43cf4 <alt_get_fd+0x80>
   43cac:	00000106 	br	43cb4 <alt_get_fd+0x40>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   43cb0:	0021883a 	mov	r16,zero
   43cb4:	2023883a 	mov	r17,r4
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
   43cb8:	01400304 	movi	r5,12
   43cbc:	8009883a 	mov	r4,r16
   43cc0:	004228c0 	call	4228c <__mulsi3>
   43cc4:	00c00134 	movhi	r3,4
   43cc8:	18d7b304 	addi	r3,r3,24268
   43ccc:	1885883a 	add	r2,r3,r2
   43cd0:	14400015 	stw	r17,0(r2)
      if (i > alt_max_fd)
   43cd4:	00800134 	movhi	r2,4
   43cd8:	109c3904 	addi	r2,r2,28900
   43cdc:	10800017 	ldw	r2,0(r2)
   43ce0:	1400080e 	bge	r2,r16,43d04 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   43ce4:	00800134 	movhi	r2,4
   43ce8:	109c3904 	addi	r2,r2,28900
   43cec:	14000015 	stw	r16,0(r2)
   43cf0:	00000406 	br	43d04 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   43cf4:	84000044 	addi	r16,r16,1
   43cf8:	10800304 	addi	r2,r2,12
   43cfc:	817fe91e 	bne	r16,r5,43ca4 <__alt_data_end+0xfffd2f64>
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
   43d00:	043ffa04 	movi	r16,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
   43d04:	8005883a 	mov	r2,r16
   43d08:	dfc00217 	ldw	ra,8(sp)
   43d0c:	dc400117 	ldw	r17,4(sp)
   43d10:	dc000017 	ldw	r16,0(sp)
   43d14:	dec00304 	addi	sp,sp,12
   43d18:	f800283a 	ret

00043d1c <atexit>:
   43d1c:	200b883a 	mov	r5,r4
   43d20:	000f883a 	mov	r7,zero
   43d24:	000d883a 	mov	r6,zero
   43d28:	0009883a 	mov	r4,zero
   43d2c:	00450f81 	jmpi	450f8 <__register_exitproc>

00043d30 <exit>:
   43d30:	defffe04 	addi	sp,sp,-8
   43d34:	000b883a 	mov	r5,zero
   43d38:	dc000015 	stw	r16,0(sp)
   43d3c:	dfc00115 	stw	ra,4(sp)
   43d40:	2021883a 	mov	r16,r4
   43d44:	00452100 	call	45210 <__call_exitprocs>
   43d48:	00800134 	movhi	r2,4
   43d4c:	109c3504 	addi	r2,r2,28884
   43d50:	11000017 	ldw	r4,0(r2)
   43d54:	20800f17 	ldw	r2,60(r4)
   43d58:	10000126 	beq	r2,zero,43d60 <exit+0x30>
   43d5c:	103ee83a 	callr	r2
   43d60:	8009883a 	mov	r4,r16
   43d64:	00455440 	call	45544 <_exit>

00043d68 <_fputs_r>:
   43d68:	defff804 	addi	sp,sp,-32
   43d6c:	dc400615 	stw	r17,24(sp)
   43d70:	2023883a 	mov	r17,r4
   43d74:	2809883a 	mov	r4,r5
   43d78:	dc000515 	stw	r16,20(sp)
   43d7c:	dfc00715 	stw	ra,28(sp)
   43d80:	3021883a 	mov	r16,r6
   43d84:	d9400315 	stw	r5,12(sp)
   43d88:	0044db40 	call	44db4 <strlen>
   43d8c:	d8800215 	stw	r2,8(sp)
   43d90:	d8800415 	stw	r2,16(sp)
   43d94:	d8800304 	addi	r2,sp,12
   43d98:	d8800015 	stw	r2,0(sp)
   43d9c:	00800044 	movi	r2,1
   43da0:	d8800115 	stw	r2,4(sp)
   43da4:	88000226 	beq	r17,zero,43db0 <_fputs_r+0x48>
   43da8:	88800e17 	ldw	r2,56(r17)
   43dac:	10001226 	beq	r2,zero,43df8 <_fputs_r+0x90>
   43db0:	8080030b 	ldhu	r2,12(r16)
   43db4:	10c8000c 	andi	r3,r2,8192
   43db8:	1800061e 	bne	r3,zero,43dd4 <_fputs_r+0x6c>
   43dbc:	81001917 	ldw	r4,100(r16)
   43dc0:	00f7ffc4 	movi	r3,-8193
   43dc4:	10880014 	ori	r2,r2,8192
   43dc8:	20c6703a 	and	r3,r4,r3
   43dcc:	8080030d 	sth	r2,12(r16)
   43dd0:	80c01915 	stw	r3,100(r16)
   43dd4:	d80d883a 	mov	r6,sp
   43dd8:	800b883a 	mov	r5,r16
   43ddc:	8809883a 	mov	r4,r17
   43de0:	0043e1c0 	call	43e1c <__sfvwrite_r>
   43de4:	dfc00717 	ldw	ra,28(sp)
   43de8:	dc400617 	ldw	r17,24(sp)
   43dec:	dc000517 	ldw	r16,20(sp)
   43df0:	dec00804 	addi	sp,sp,32
   43df4:	f800283a 	ret
   43df8:	8809883a 	mov	r4,r17
   43dfc:	00408400 	call	40840 <__sinit>
   43e00:	003feb06 	br	43db0 <__alt_data_end+0xfffd3070>

00043e04 <fputs>:
   43e04:	00800134 	movhi	r2,4
   43e08:	109c3604 	addi	r2,r2,28888
   43e0c:	280d883a 	mov	r6,r5
   43e10:	200b883a 	mov	r5,r4
   43e14:	11000017 	ldw	r4,0(r2)
   43e18:	0043d681 	jmpi	43d68 <_fputs_r>

00043e1c <__sfvwrite_r>:
   43e1c:	30800217 	ldw	r2,8(r6)
   43e20:	10006726 	beq	r2,zero,43fc0 <__sfvwrite_r+0x1a4>
   43e24:	28c0030b 	ldhu	r3,12(r5)
   43e28:	defff404 	addi	sp,sp,-48
   43e2c:	dd400715 	stw	r21,28(sp)
   43e30:	dd000615 	stw	r20,24(sp)
   43e34:	dc000215 	stw	r16,8(sp)
   43e38:	dfc00b15 	stw	ra,44(sp)
   43e3c:	df000a15 	stw	fp,40(sp)
   43e40:	ddc00915 	stw	r23,36(sp)
   43e44:	dd800815 	stw	r22,32(sp)
   43e48:	dcc00515 	stw	r19,20(sp)
   43e4c:	dc800415 	stw	r18,16(sp)
   43e50:	dc400315 	stw	r17,12(sp)
   43e54:	1880020c 	andi	r2,r3,8
   43e58:	2821883a 	mov	r16,r5
   43e5c:	202b883a 	mov	r21,r4
   43e60:	3029883a 	mov	r20,r6
   43e64:	10002726 	beq	r2,zero,43f04 <__sfvwrite_r+0xe8>
   43e68:	28800417 	ldw	r2,16(r5)
   43e6c:	10002526 	beq	r2,zero,43f04 <__sfvwrite_r+0xe8>
   43e70:	1880008c 	andi	r2,r3,2
   43e74:	a4400017 	ldw	r17,0(r20)
   43e78:	10002a26 	beq	r2,zero,43f24 <__sfvwrite_r+0x108>
   43e7c:	05a00034 	movhi	r22,32768
   43e80:	0027883a 	mov	r19,zero
   43e84:	0025883a 	mov	r18,zero
   43e88:	b5bf0004 	addi	r22,r22,-1024
   43e8c:	980d883a 	mov	r6,r19
   43e90:	a809883a 	mov	r4,r21
   43e94:	90004626 	beq	r18,zero,43fb0 <__sfvwrite_r+0x194>
   43e98:	900f883a 	mov	r7,r18
   43e9c:	b480022e 	bgeu	r22,r18,43ea8 <__sfvwrite_r+0x8c>
   43ea0:	01e00034 	movhi	r7,32768
   43ea4:	39ff0004 	addi	r7,r7,-1024
   43ea8:	80800917 	ldw	r2,36(r16)
   43eac:	81400717 	ldw	r5,28(r16)
   43eb0:	103ee83a 	callr	r2
   43eb4:	00805a0e 	bge	zero,r2,44020 <__sfvwrite_r+0x204>
   43eb8:	a0c00217 	ldw	r3,8(r20)
   43ebc:	98a7883a 	add	r19,r19,r2
   43ec0:	90a5c83a 	sub	r18,r18,r2
   43ec4:	1885c83a 	sub	r2,r3,r2
   43ec8:	a0800215 	stw	r2,8(r20)
   43ecc:	103fef1e 	bne	r2,zero,43e8c <__alt_data_end+0xfffd314c>
   43ed0:	0005883a 	mov	r2,zero
   43ed4:	dfc00b17 	ldw	ra,44(sp)
   43ed8:	df000a17 	ldw	fp,40(sp)
   43edc:	ddc00917 	ldw	r23,36(sp)
   43ee0:	dd800817 	ldw	r22,32(sp)
   43ee4:	dd400717 	ldw	r21,28(sp)
   43ee8:	dd000617 	ldw	r20,24(sp)
   43eec:	dcc00517 	ldw	r19,20(sp)
   43ef0:	dc800417 	ldw	r18,16(sp)
   43ef4:	dc400317 	ldw	r17,12(sp)
   43ef8:	dc000217 	ldw	r16,8(sp)
   43efc:	dec00c04 	addi	sp,sp,48
   43f00:	f800283a 	ret
   43f04:	800b883a 	mov	r5,r16
   43f08:	a809883a 	mov	r4,r21
   43f0c:	0044fa40 	call	44fa4 <__swsetup_r>
   43f10:	1000ee1e 	bne	r2,zero,442cc <__sfvwrite_r+0x4b0>
   43f14:	80c0030b 	ldhu	r3,12(r16)
   43f18:	a4400017 	ldw	r17,0(r20)
   43f1c:	1880008c 	andi	r2,r3,2
   43f20:	103fd61e 	bne	r2,zero,43e7c <__alt_data_end+0xfffd313c>
   43f24:	1880004c 	andi	r2,r3,1
   43f28:	1000421e 	bne	r2,zero,44034 <__sfvwrite_r+0x218>
   43f2c:	0039883a 	mov	fp,zero
   43f30:	0025883a 	mov	r18,zero
   43f34:	90001a26 	beq	r18,zero,43fa0 <__sfvwrite_r+0x184>
   43f38:	1880800c 	andi	r2,r3,512
   43f3c:	84c00217 	ldw	r19,8(r16)
   43f40:	10002126 	beq	r2,zero,43fc8 <__sfvwrite_r+0x1ac>
   43f44:	982f883a 	mov	r23,r19
   43f48:	94c09636 	bltu	r18,r19,441a4 <__sfvwrite_r+0x388>
   43f4c:	1881200c 	andi	r2,r3,1152
   43f50:	1000a11e 	bne	r2,zero,441d8 <__sfvwrite_r+0x3bc>
   43f54:	81000017 	ldw	r4,0(r16)
   43f58:	b80d883a 	mov	r6,r23
   43f5c:	e00b883a 	mov	r5,fp
   43f60:	004458c0 	call	4458c <memmove>
   43f64:	80c00217 	ldw	r3,8(r16)
   43f68:	81000017 	ldw	r4,0(r16)
   43f6c:	9005883a 	mov	r2,r18
   43f70:	1ce7c83a 	sub	r19,r3,r19
   43f74:	25cf883a 	add	r7,r4,r23
   43f78:	84c00215 	stw	r19,8(r16)
   43f7c:	81c00015 	stw	r7,0(r16)
   43f80:	a0c00217 	ldw	r3,8(r20)
   43f84:	e0b9883a 	add	fp,fp,r2
   43f88:	90a5c83a 	sub	r18,r18,r2
   43f8c:	18a7c83a 	sub	r19,r3,r2
   43f90:	a4c00215 	stw	r19,8(r20)
   43f94:	983fce26 	beq	r19,zero,43ed0 <__alt_data_end+0xfffd3190>
   43f98:	80c0030b 	ldhu	r3,12(r16)
   43f9c:	903fe61e 	bne	r18,zero,43f38 <__alt_data_end+0xfffd31f8>
   43fa0:	8f000017 	ldw	fp,0(r17)
   43fa4:	8c800117 	ldw	r18,4(r17)
   43fa8:	8c400204 	addi	r17,r17,8
   43fac:	003fe106 	br	43f34 <__alt_data_end+0xfffd31f4>
   43fb0:	8cc00017 	ldw	r19,0(r17)
   43fb4:	8c800117 	ldw	r18,4(r17)
   43fb8:	8c400204 	addi	r17,r17,8
   43fbc:	003fb306 	br	43e8c <__alt_data_end+0xfffd314c>
   43fc0:	0005883a 	mov	r2,zero
   43fc4:	f800283a 	ret
   43fc8:	81000017 	ldw	r4,0(r16)
   43fcc:	80800417 	ldw	r2,16(r16)
   43fd0:	11005a36 	bltu	r2,r4,4413c <__sfvwrite_r+0x320>
   43fd4:	85c00517 	ldw	r23,20(r16)
   43fd8:	95c05836 	bltu	r18,r23,4413c <__sfvwrite_r+0x320>
   43fdc:	00a00034 	movhi	r2,32768
   43fe0:	10bfffc4 	addi	r2,r2,-1
   43fe4:	9009883a 	mov	r4,r18
   43fe8:	1480012e 	bgeu	r2,r18,43ff0 <__sfvwrite_r+0x1d4>
   43fec:	1009883a 	mov	r4,r2
   43ff0:	b80b883a 	mov	r5,r23
   43ff4:	00453900 	call	45390 <__divsi3>
   43ff8:	b80b883a 	mov	r5,r23
   43ffc:	1009883a 	mov	r4,r2
   44000:	004228c0 	call	4228c <__mulsi3>
   44004:	81400717 	ldw	r5,28(r16)
   44008:	80c00917 	ldw	r3,36(r16)
   4400c:	100f883a 	mov	r7,r2
   44010:	e00d883a 	mov	r6,fp
   44014:	a809883a 	mov	r4,r21
   44018:	183ee83a 	callr	r3
   4401c:	00bfd816 	blt	zero,r2,43f80 <__alt_data_end+0xfffd3240>
   44020:	8080030b 	ldhu	r2,12(r16)
   44024:	10801014 	ori	r2,r2,64
   44028:	8080030d 	sth	r2,12(r16)
   4402c:	00bfffc4 	movi	r2,-1
   44030:	003fa806 	br	43ed4 <__alt_data_end+0xfffd3194>
   44034:	0027883a 	mov	r19,zero
   44038:	0011883a 	mov	r8,zero
   4403c:	0039883a 	mov	fp,zero
   44040:	0025883a 	mov	r18,zero
   44044:	90001f26 	beq	r18,zero,440c4 <__sfvwrite_r+0x2a8>
   44048:	40005a26 	beq	r8,zero,441b4 <__sfvwrite_r+0x398>
   4404c:	982d883a 	mov	r22,r19
   44050:	94c0012e 	bgeu	r18,r19,44058 <__sfvwrite_r+0x23c>
   44054:	902d883a 	mov	r22,r18
   44058:	81000017 	ldw	r4,0(r16)
   4405c:	80800417 	ldw	r2,16(r16)
   44060:	b02f883a 	mov	r23,r22
   44064:	81c00517 	ldw	r7,20(r16)
   44068:	1100032e 	bgeu	r2,r4,44078 <__sfvwrite_r+0x25c>
   4406c:	80c00217 	ldw	r3,8(r16)
   44070:	38c7883a 	add	r3,r7,r3
   44074:	1d801816 	blt	r3,r22,440d8 <__sfvwrite_r+0x2bc>
   44078:	b1c03e16 	blt	r22,r7,44174 <__sfvwrite_r+0x358>
   4407c:	80800917 	ldw	r2,36(r16)
   44080:	81400717 	ldw	r5,28(r16)
   44084:	e00d883a 	mov	r6,fp
   44088:	da000115 	stw	r8,4(sp)
   4408c:	a809883a 	mov	r4,r21
   44090:	103ee83a 	callr	r2
   44094:	102f883a 	mov	r23,r2
   44098:	da000117 	ldw	r8,4(sp)
   4409c:	00bfe00e 	bge	zero,r2,44020 <__alt_data_end+0xfffd32e0>
   440a0:	9de7c83a 	sub	r19,r19,r23
   440a4:	98001f26 	beq	r19,zero,44124 <__sfvwrite_r+0x308>
   440a8:	a0800217 	ldw	r2,8(r20)
   440ac:	e5f9883a 	add	fp,fp,r23
   440b0:	95e5c83a 	sub	r18,r18,r23
   440b4:	15efc83a 	sub	r23,r2,r23
   440b8:	a5c00215 	stw	r23,8(r20)
   440bc:	b83f8426 	beq	r23,zero,43ed0 <__alt_data_end+0xfffd3190>
   440c0:	903fe11e 	bne	r18,zero,44048 <__alt_data_end+0xfffd3308>
   440c4:	8f000017 	ldw	fp,0(r17)
   440c8:	8c800117 	ldw	r18,4(r17)
   440cc:	0011883a 	mov	r8,zero
   440d0:	8c400204 	addi	r17,r17,8
   440d4:	003fdb06 	br	44044 <__alt_data_end+0xfffd3304>
   440d8:	180d883a 	mov	r6,r3
   440dc:	e00b883a 	mov	r5,fp
   440e0:	da000115 	stw	r8,4(sp)
   440e4:	d8c00015 	stw	r3,0(sp)
   440e8:	004458c0 	call	4458c <memmove>
   440ec:	d8c00017 	ldw	r3,0(sp)
   440f0:	80800017 	ldw	r2,0(r16)
   440f4:	800b883a 	mov	r5,r16
   440f8:	a809883a 	mov	r4,r21
   440fc:	10c5883a 	add	r2,r2,r3
   44100:	80800015 	stw	r2,0(r16)
   44104:	d8c00015 	stw	r3,0(sp)
   44108:	0041aa00 	call	41aa0 <_fflush_r>
   4410c:	d8c00017 	ldw	r3,0(sp)
   44110:	da000117 	ldw	r8,4(sp)
   44114:	103fc21e 	bne	r2,zero,44020 <__alt_data_end+0xfffd32e0>
   44118:	182f883a 	mov	r23,r3
   4411c:	9de7c83a 	sub	r19,r19,r23
   44120:	983fe11e 	bne	r19,zero,440a8 <__alt_data_end+0xfffd3368>
   44124:	800b883a 	mov	r5,r16
   44128:	a809883a 	mov	r4,r21
   4412c:	0041aa00 	call	41aa0 <_fflush_r>
   44130:	103fbb1e 	bne	r2,zero,44020 <__alt_data_end+0xfffd32e0>
   44134:	0011883a 	mov	r8,zero
   44138:	003fdb06 	br	440a8 <__alt_data_end+0xfffd3368>
   4413c:	94c0012e 	bgeu	r18,r19,44144 <__sfvwrite_r+0x328>
   44140:	9027883a 	mov	r19,r18
   44144:	980d883a 	mov	r6,r19
   44148:	e00b883a 	mov	r5,fp
   4414c:	004458c0 	call	4458c <memmove>
   44150:	80800217 	ldw	r2,8(r16)
   44154:	80c00017 	ldw	r3,0(r16)
   44158:	14c5c83a 	sub	r2,r2,r19
   4415c:	1cc7883a 	add	r3,r3,r19
   44160:	80800215 	stw	r2,8(r16)
   44164:	80c00015 	stw	r3,0(r16)
   44168:	10004326 	beq	r2,zero,44278 <__sfvwrite_r+0x45c>
   4416c:	9805883a 	mov	r2,r19
   44170:	003f8306 	br	43f80 <__alt_data_end+0xfffd3240>
   44174:	b00d883a 	mov	r6,r22
   44178:	e00b883a 	mov	r5,fp
   4417c:	da000115 	stw	r8,4(sp)
   44180:	004458c0 	call	4458c <memmove>
   44184:	80800217 	ldw	r2,8(r16)
   44188:	80c00017 	ldw	r3,0(r16)
   4418c:	da000117 	ldw	r8,4(sp)
   44190:	1585c83a 	sub	r2,r2,r22
   44194:	1dad883a 	add	r22,r3,r22
   44198:	80800215 	stw	r2,8(r16)
   4419c:	85800015 	stw	r22,0(r16)
   441a0:	003fbf06 	br	440a0 <__alt_data_end+0xfffd3360>
   441a4:	81000017 	ldw	r4,0(r16)
   441a8:	9027883a 	mov	r19,r18
   441ac:	902f883a 	mov	r23,r18
   441b0:	003f6906 	br	43f58 <__alt_data_end+0xfffd3218>
   441b4:	900d883a 	mov	r6,r18
   441b8:	01400284 	movi	r5,10
   441bc:	e009883a 	mov	r4,fp
   441c0:	00442e40 	call	442e4 <memchr>
   441c4:	10003e26 	beq	r2,zero,442c0 <__sfvwrite_r+0x4a4>
   441c8:	10800044 	addi	r2,r2,1
   441cc:	1727c83a 	sub	r19,r2,fp
   441d0:	02000044 	movi	r8,1
   441d4:	003f9d06 	br	4404c <__alt_data_end+0xfffd330c>
   441d8:	80800517 	ldw	r2,20(r16)
   441dc:	81400417 	ldw	r5,16(r16)
   441e0:	81c00017 	ldw	r7,0(r16)
   441e4:	10a7883a 	add	r19,r2,r2
   441e8:	9885883a 	add	r2,r19,r2
   441ec:	1026d7fa 	srli	r19,r2,31
   441f0:	396dc83a 	sub	r22,r7,r5
   441f4:	b1000044 	addi	r4,r22,1
   441f8:	9885883a 	add	r2,r19,r2
   441fc:	1027d07a 	srai	r19,r2,1
   44200:	2485883a 	add	r2,r4,r18
   44204:	980d883a 	mov	r6,r19
   44208:	9880022e 	bgeu	r19,r2,44214 <__sfvwrite_r+0x3f8>
   4420c:	1027883a 	mov	r19,r2
   44210:	100d883a 	mov	r6,r2
   44214:	18c1000c 	andi	r3,r3,1024
   44218:	18001c26 	beq	r3,zero,4428c <__sfvwrite_r+0x470>
   4421c:	300b883a 	mov	r5,r6
   44220:	a809883a 	mov	r4,r21
   44224:	0040a180 	call	40a18 <_malloc_r>
   44228:	102f883a 	mov	r23,r2
   4422c:	10002926 	beq	r2,zero,442d4 <__sfvwrite_r+0x4b8>
   44230:	81400417 	ldw	r5,16(r16)
   44234:	b00d883a 	mov	r6,r22
   44238:	1009883a 	mov	r4,r2
   4423c:	00444440 	call	44444 <memcpy>
   44240:	8080030b 	ldhu	r2,12(r16)
   44244:	00fedfc4 	movi	r3,-1153
   44248:	10c4703a 	and	r2,r2,r3
   4424c:	10802014 	ori	r2,r2,128
   44250:	8080030d 	sth	r2,12(r16)
   44254:	bd89883a 	add	r4,r23,r22
   44258:	9d8fc83a 	sub	r7,r19,r22
   4425c:	85c00415 	stw	r23,16(r16)
   44260:	84c00515 	stw	r19,20(r16)
   44264:	81000015 	stw	r4,0(r16)
   44268:	9027883a 	mov	r19,r18
   4426c:	81c00215 	stw	r7,8(r16)
   44270:	902f883a 	mov	r23,r18
   44274:	003f3806 	br	43f58 <__alt_data_end+0xfffd3218>
   44278:	800b883a 	mov	r5,r16
   4427c:	a809883a 	mov	r4,r21
   44280:	0041aa00 	call	41aa0 <_fflush_r>
   44284:	103fb926 	beq	r2,zero,4416c <__alt_data_end+0xfffd342c>
   44288:	003f6506 	br	44020 <__alt_data_end+0xfffd32e0>
   4428c:	a809883a 	mov	r4,r21
   44290:	00448500 	call	44850 <_realloc_r>
   44294:	102f883a 	mov	r23,r2
   44298:	103fee1e 	bne	r2,zero,44254 <__alt_data_end+0xfffd3514>
   4429c:	81400417 	ldw	r5,16(r16)
   442a0:	a809883a 	mov	r4,r21
   442a4:	0041c500 	call	41c50 <_free_r>
   442a8:	8080030b 	ldhu	r2,12(r16)
   442ac:	00ffdfc4 	movi	r3,-129
   442b0:	1884703a 	and	r2,r3,r2
   442b4:	00c00304 	movi	r3,12
   442b8:	a8c00015 	stw	r3,0(r21)
   442bc:	003f5906 	br	44024 <__alt_data_end+0xfffd32e4>
   442c0:	94c00044 	addi	r19,r18,1
   442c4:	02000044 	movi	r8,1
   442c8:	003f6006 	br	4404c <__alt_data_end+0xfffd330c>
   442cc:	00bfffc4 	movi	r2,-1
   442d0:	003f0006 	br	43ed4 <__alt_data_end+0xfffd3194>
   442d4:	00800304 	movi	r2,12
   442d8:	a8800015 	stw	r2,0(r21)
   442dc:	8080030b 	ldhu	r2,12(r16)
   442e0:	003f5006 	br	44024 <__alt_data_end+0xfffd32e4>

000442e4 <memchr>:
   442e4:	208000cc 	andi	r2,r4,3
   442e8:	280f883a 	mov	r7,r5
   442ec:	10003426 	beq	r2,zero,443c0 <memchr+0xdc>
   442f0:	30bfffc4 	addi	r2,r6,-1
   442f4:	30001a26 	beq	r6,zero,44360 <memchr+0x7c>
   442f8:	20c00003 	ldbu	r3,0(r4)
   442fc:	29803fcc 	andi	r6,r5,255
   44300:	30c0051e 	bne	r6,r3,44318 <memchr+0x34>
   44304:	00001806 	br	44368 <memchr+0x84>
   44308:	10001526 	beq	r2,zero,44360 <memchr+0x7c>
   4430c:	20c00003 	ldbu	r3,0(r4)
   44310:	10bfffc4 	addi	r2,r2,-1
   44314:	30c01426 	beq	r6,r3,44368 <memchr+0x84>
   44318:	21000044 	addi	r4,r4,1
   4431c:	20c000cc 	andi	r3,r4,3
   44320:	183ff91e 	bne	r3,zero,44308 <__alt_data_end+0xfffd35c8>
   44324:	020000c4 	movi	r8,3
   44328:	40801136 	bltu	r8,r2,44370 <memchr+0x8c>
   4432c:	10000c26 	beq	r2,zero,44360 <memchr+0x7c>
   44330:	20c00003 	ldbu	r3,0(r4)
   44334:	29403fcc 	andi	r5,r5,255
   44338:	28c00b26 	beq	r5,r3,44368 <memchr+0x84>
   4433c:	20c00044 	addi	r3,r4,1
   44340:	39803fcc 	andi	r6,r7,255
   44344:	2089883a 	add	r4,r4,r2
   44348:	00000306 	br	44358 <memchr+0x74>
   4434c:	18c00044 	addi	r3,r3,1
   44350:	197fffc3 	ldbu	r5,-1(r3)
   44354:	31400526 	beq	r6,r5,4436c <memchr+0x88>
   44358:	1805883a 	mov	r2,r3
   4435c:	20fffb1e 	bne	r4,r3,4434c <__alt_data_end+0xfffd360c>
   44360:	0005883a 	mov	r2,zero
   44364:	f800283a 	ret
   44368:	2005883a 	mov	r2,r4
   4436c:	f800283a 	ret
   44370:	28c03fcc 	andi	r3,r5,255
   44374:	1812923a 	slli	r9,r3,8
   44378:	02ffbff4 	movhi	r11,65279
   4437c:	02a02074 	movhi	r10,32897
   44380:	48d2b03a 	or	r9,r9,r3
   44384:	4806943a 	slli	r3,r9,16
   44388:	5affbfc4 	addi	r11,r11,-257
   4438c:	52a02004 	addi	r10,r10,-32640
   44390:	48d2b03a 	or	r9,r9,r3
   44394:	20c00017 	ldw	r3,0(r4)
   44398:	48c6f03a 	xor	r3,r9,r3
   4439c:	1acd883a 	add	r6,r3,r11
   443a0:	00c6303a 	nor	r3,zero,r3
   443a4:	30c6703a 	and	r3,r6,r3
   443a8:	1a86703a 	and	r3,r3,r10
   443ac:	183fe01e 	bne	r3,zero,44330 <__alt_data_end+0xfffd35f0>
   443b0:	10bfff04 	addi	r2,r2,-4
   443b4:	21000104 	addi	r4,r4,4
   443b8:	40bff636 	bltu	r8,r2,44394 <__alt_data_end+0xfffd3654>
   443bc:	003fdb06 	br	4432c <__alt_data_end+0xfffd35ec>
   443c0:	3005883a 	mov	r2,r6
   443c4:	003fd706 	br	44324 <__alt_data_end+0xfffd35e4>

000443c8 <memcmp>:
   443c8:	01c000c4 	movi	r7,3
   443cc:	3980192e 	bgeu	r7,r6,44434 <memcmp+0x6c>
   443d0:	2144b03a 	or	r2,r4,r5
   443d4:	11c4703a 	and	r2,r2,r7
   443d8:	10000f26 	beq	r2,zero,44418 <memcmp+0x50>
   443dc:	20800003 	ldbu	r2,0(r4)
   443e0:	28c00003 	ldbu	r3,0(r5)
   443e4:	10c0151e 	bne	r2,r3,4443c <memcmp+0x74>
   443e8:	31bfff84 	addi	r6,r6,-2
   443ec:	01ffffc4 	movi	r7,-1
   443f0:	00000406 	br	44404 <memcmp+0x3c>
   443f4:	20800003 	ldbu	r2,0(r4)
   443f8:	28c00003 	ldbu	r3,0(r5)
   443fc:	31bfffc4 	addi	r6,r6,-1
   44400:	10c00e1e 	bne	r2,r3,4443c <memcmp+0x74>
   44404:	21000044 	addi	r4,r4,1
   44408:	29400044 	addi	r5,r5,1
   4440c:	31fff91e 	bne	r6,r7,443f4 <__alt_data_end+0xfffd36b4>
   44410:	0005883a 	mov	r2,zero
   44414:	f800283a 	ret
   44418:	20c00017 	ldw	r3,0(r4)
   4441c:	28800017 	ldw	r2,0(r5)
   44420:	18bfee1e 	bne	r3,r2,443dc <__alt_data_end+0xfffd369c>
   44424:	31bfff04 	addi	r6,r6,-4
   44428:	21000104 	addi	r4,r4,4
   4442c:	29400104 	addi	r5,r5,4
   44430:	39bff936 	bltu	r7,r6,44418 <__alt_data_end+0xfffd36d8>
   44434:	303fe91e 	bne	r6,zero,443dc <__alt_data_end+0xfffd369c>
   44438:	003ff506 	br	44410 <__alt_data_end+0xfffd36d0>
   4443c:	10c5c83a 	sub	r2,r2,r3
   44440:	f800283a 	ret

00044444 <memcpy>:
   44444:	defffd04 	addi	sp,sp,-12
   44448:	dfc00215 	stw	ra,8(sp)
   4444c:	dc400115 	stw	r17,4(sp)
   44450:	dc000015 	stw	r16,0(sp)
   44454:	00c003c4 	movi	r3,15
   44458:	2005883a 	mov	r2,r4
   4445c:	1980452e 	bgeu	r3,r6,44574 <memcpy+0x130>
   44460:	2906b03a 	or	r3,r5,r4
   44464:	18c000cc 	andi	r3,r3,3
   44468:	1800441e 	bne	r3,zero,4457c <memcpy+0x138>
   4446c:	347ffc04 	addi	r17,r6,-16
   44470:	8822d13a 	srli	r17,r17,4
   44474:	28c00104 	addi	r3,r5,4
   44478:	23400104 	addi	r13,r4,4
   4447c:	8820913a 	slli	r16,r17,4
   44480:	2b000204 	addi	r12,r5,8
   44484:	22c00204 	addi	r11,r4,8
   44488:	84000504 	addi	r16,r16,20
   4448c:	2a800304 	addi	r10,r5,12
   44490:	22400304 	addi	r9,r4,12
   44494:	2c21883a 	add	r16,r5,r16
   44498:	2811883a 	mov	r8,r5
   4449c:	200f883a 	mov	r7,r4
   444a0:	41000017 	ldw	r4,0(r8)
   444a4:	1fc00017 	ldw	ra,0(r3)
   444a8:	63c00017 	ldw	r15,0(r12)
   444ac:	39000015 	stw	r4,0(r7)
   444b0:	53800017 	ldw	r14,0(r10)
   444b4:	6fc00015 	stw	ra,0(r13)
   444b8:	5bc00015 	stw	r15,0(r11)
   444bc:	4b800015 	stw	r14,0(r9)
   444c0:	18c00404 	addi	r3,r3,16
   444c4:	39c00404 	addi	r7,r7,16
   444c8:	42000404 	addi	r8,r8,16
   444cc:	6b400404 	addi	r13,r13,16
   444d0:	63000404 	addi	r12,r12,16
   444d4:	5ac00404 	addi	r11,r11,16
   444d8:	52800404 	addi	r10,r10,16
   444dc:	4a400404 	addi	r9,r9,16
   444e0:	1c3fef1e 	bne	r3,r16,444a0 <__alt_data_end+0xfffd3760>
   444e4:	89c00044 	addi	r7,r17,1
   444e8:	380e913a 	slli	r7,r7,4
   444ec:	310003cc 	andi	r4,r6,15
   444f0:	02c000c4 	movi	r11,3
   444f4:	11c7883a 	add	r3,r2,r7
   444f8:	29cb883a 	add	r5,r5,r7
   444fc:	5900212e 	bgeu	r11,r4,44584 <memcpy+0x140>
   44500:	1813883a 	mov	r9,r3
   44504:	2811883a 	mov	r8,r5
   44508:	200f883a 	mov	r7,r4
   4450c:	42800017 	ldw	r10,0(r8)
   44510:	4a400104 	addi	r9,r9,4
   44514:	39ffff04 	addi	r7,r7,-4
   44518:	4abfff15 	stw	r10,-4(r9)
   4451c:	42000104 	addi	r8,r8,4
   44520:	59fffa36 	bltu	r11,r7,4450c <__alt_data_end+0xfffd37cc>
   44524:	213fff04 	addi	r4,r4,-4
   44528:	2008d0ba 	srli	r4,r4,2
   4452c:	318000cc 	andi	r6,r6,3
   44530:	21000044 	addi	r4,r4,1
   44534:	2109883a 	add	r4,r4,r4
   44538:	2109883a 	add	r4,r4,r4
   4453c:	1907883a 	add	r3,r3,r4
   44540:	290b883a 	add	r5,r5,r4
   44544:	30000626 	beq	r6,zero,44560 <memcpy+0x11c>
   44548:	198d883a 	add	r6,r3,r6
   4454c:	29c00003 	ldbu	r7,0(r5)
   44550:	18c00044 	addi	r3,r3,1
   44554:	29400044 	addi	r5,r5,1
   44558:	19ffffc5 	stb	r7,-1(r3)
   4455c:	19bffb1e 	bne	r3,r6,4454c <__alt_data_end+0xfffd380c>
   44560:	dfc00217 	ldw	ra,8(sp)
   44564:	dc400117 	ldw	r17,4(sp)
   44568:	dc000017 	ldw	r16,0(sp)
   4456c:	dec00304 	addi	sp,sp,12
   44570:	f800283a 	ret
   44574:	2007883a 	mov	r3,r4
   44578:	003ff206 	br	44544 <__alt_data_end+0xfffd3804>
   4457c:	2007883a 	mov	r3,r4
   44580:	003ff106 	br	44548 <__alt_data_end+0xfffd3808>
   44584:	200d883a 	mov	r6,r4
   44588:	003fee06 	br	44544 <__alt_data_end+0xfffd3804>

0004458c <memmove>:
   4458c:	2005883a 	mov	r2,r4
   44590:	29000b2e 	bgeu	r5,r4,445c0 <memmove+0x34>
   44594:	298f883a 	add	r7,r5,r6
   44598:	21c0092e 	bgeu	r4,r7,445c0 <memmove+0x34>
   4459c:	2187883a 	add	r3,r4,r6
   445a0:	198bc83a 	sub	r5,r3,r6
   445a4:	30004826 	beq	r6,zero,446c8 <memmove+0x13c>
   445a8:	39ffffc4 	addi	r7,r7,-1
   445ac:	39000003 	ldbu	r4,0(r7)
   445b0:	18ffffc4 	addi	r3,r3,-1
   445b4:	19000005 	stb	r4,0(r3)
   445b8:	28fffb1e 	bne	r5,r3,445a8 <__alt_data_end+0xfffd3868>
   445bc:	f800283a 	ret
   445c0:	00c003c4 	movi	r3,15
   445c4:	1980412e 	bgeu	r3,r6,446cc <memmove+0x140>
   445c8:	2886b03a 	or	r3,r5,r2
   445cc:	18c000cc 	andi	r3,r3,3
   445d0:	1800401e 	bne	r3,zero,446d4 <memmove+0x148>
   445d4:	33fffc04 	addi	r15,r6,-16
   445d8:	781ed13a 	srli	r15,r15,4
   445dc:	28c00104 	addi	r3,r5,4
   445e0:	13400104 	addi	r13,r2,4
   445e4:	781c913a 	slli	r14,r15,4
   445e8:	2b000204 	addi	r12,r5,8
   445ec:	12c00204 	addi	r11,r2,8
   445f0:	73800504 	addi	r14,r14,20
   445f4:	2a800304 	addi	r10,r5,12
   445f8:	12400304 	addi	r9,r2,12
   445fc:	2b9d883a 	add	r14,r5,r14
   44600:	2811883a 	mov	r8,r5
   44604:	100f883a 	mov	r7,r2
   44608:	41000017 	ldw	r4,0(r8)
   4460c:	39c00404 	addi	r7,r7,16
   44610:	18c00404 	addi	r3,r3,16
   44614:	393ffc15 	stw	r4,-16(r7)
   44618:	193ffc17 	ldw	r4,-16(r3)
   4461c:	6b400404 	addi	r13,r13,16
   44620:	5ac00404 	addi	r11,r11,16
   44624:	693ffc15 	stw	r4,-16(r13)
   44628:	61000017 	ldw	r4,0(r12)
   4462c:	4a400404 	addi	r9,r9,16
   44630:	42000404 	addi	r8,r8,16
   44634:	593ffc15 	stw	r4,-16(r11)
   44638:	51000017 	ldw	r4,0(r10)
   4463c:	63000404 	addi	r12,r12,16
   44640:	52800404 	addi	r10,r10,16
   44644:	493ffc15 	stw	r4,-16(r9)
   44648:	1bbfef1e 	bne	r3,r14,44608 <__alt_data_end+0xfffd38c8>
   4464c:	79000044 	addi	r4,r15,1
   44650:	2008913a 	slli	r4,r4,4
   44654:	328003cc 	andi	r10,r6,15
   44658:	02c000c4 	movi	r11,3
   4465c:	1107883a 	add	r3,r2,r4
   44660:	290b883a 	add	r5,r5,r4
   44664:	5a801e2e 	bgeu	r11,r10,446e0 <memmove+0x154>
   44668:	1813883a 	mov	r9,r3
   4466c:	2811883a 	mov	r8,r5
   44670:	500f883a 	mov	r7,r10
   44674:	41000017 	ldw	r4,0(r8)
   44678:	4a400104 	addi	r9,r9,4
   4467c:	39ffff04 	addi	r7,r7,-4
   44680:	493fff15 	stw	r4,-4(r9)
   44684:	42000104 	addi	r8,r8,4
   44688:	59fffa36 	bltu	r11,r7,44674 <__alt_data_end+0xfffd3934>
   4468c:	513fff04 	addi	r4,r10,-4
   44690:	2008d0ba 	srli	r4,r4,2
   44694:	318000cc 	andi	r6,r6,3
   44698:	21000044 	addi	r4,r4,1
   4469c:	2109883a 	add	r4,r4,r4
   446a0:	2109883a 	add	r4,r4,r4
   446a4:	1907883a 	add	r3,r3,r4
   446a8:	290b883a 	add	r5,r5,r4
   446ac:	30000b26 	beq	r6,zero,446dc <memmove+0x150>
   446b0:	198d883a 	add	r6,r3,r6
   446b4:	29c00003 	ldbu	r7,0(r5)
   446b8:	18c00044 	addi	r3,r3,1
   446bc:	29400044 	addi	r5,r5,1
   446c0:	19ffffc5 	stb	r7,-1(r3)
   446c4:	19bffb1e 	bne	r3,r6,446b4 <__alt_data_end+0xfffd3974>
   446c8:	f800283a 	ret
   446cc:	1007883a 	mov	r3,r2
   446d0:	003ff606 	br	446ac <__alt_data_end+0xfffd396c>
   446d4:	1007883a 	mov	r3,r2
   446d8:	003ff506 	br	446b0 <__alt_data_end+0xfffd3970>
   446dc:	f800283a 	ret
   446e0:	500d883a 	mov	r6,r10
   446e4:	003ff106 	br	446ac <__alt_data_end+0xfffd396c>

000446e8 <_putc_r>:
   446e8:	defffc04 	addi	sp,sp,-16
   446ec:	dc000215 	stw	r16,8(sp)
   446f0:	dfc00315 	stw	ra,12(sp)
   446f4:	2021883a 	mov	r16,r4
   446f8:	20000226 	beq	r4,zero,44704 <_putc_r+0x1c>
   446fc:	20800e17 	ldw	r2,56(r4)
   44700:	10001b26 	beq	r2,zero,44770 <_putc_r+0x88>
   44704:	30800217 	ldw	r2,8(r6)
   44708:	10bfffc4 	addi	r2,r2,-1
   4470c:	30800215 	stw	r2,8(r6)
   44710:	10000a16 	blt	r2,zero,4473c <_putc_r+0x54>
   44714:	30800017 	ldw	r2,0(r6)
   44718:	11400005 	stb	r5,0(r2)
   4471c:	30800017 	ldw	r2,0(r6)
   44720:	10c00044 	addi	r3,r2,1
   44724:	30c00015 	stw	r3,0(r6)
   44728:	10800003 	ldbu	r2,0(r2)
   4472c:	dfc00317 	ldw	ra,12(sp)
   44730:	dc000217 	ldw	r16,8(sp)
   44734:	dec00404 	addi	sp,sp,16
   44738:	f800283a 	ret
   4473c:	30c00617 	ldw	r3,24(r6)
   44740:	10c00616 	blt	r2,r3,4475c <_putc_r+0x74>
   44744:	30800017 	ldw	r2,0(r6)
   44748:	00c00284 	movi	r3,10
   4474c:	11400005 	stb	r5,0(r2)
   44750:	30800017 	ldw	r2,0(r6)
   44754:	11400003 	ldbu	r5,0(r2)
   44758:	28fff11e 	bne	r5,r3,44720 <__alt_data_end+0xfffd39e0>
   4475c:	8009883a 	mov	r4,r16
   44760:	dfc00317 	ldw	ra,12(sp)
   44764:	dc000217 	ldw	r16,8(sp)
   44768:	dec00404 	addi	sp,sp,16
   4476c:	0044e4c1 	jmpi	44e4c <__swbuf_r>
   44770:	d9400015 	stw	r5,0(sp)
   44774:	d9800115 	stw	r6,4(sp)
   44778:	00408400 	call	40840 <__sinit>
   4477c:	d9800117 	ldw	r6,4(sp)
   44780:	d9400017 	ldw	r5,0(sp)
   44784:	003fdf06 	br	44704 <__alt_data_end+0xfffd39c4>

00044788 <putc>:
   44788:	00800134 	movhi	r2,4
   4478c:	defffc04 	addi	sp,sp,-16
   44790:	109c3604 	addi	r2,r2,28888
   44794:	dc000115 	stw	r16,4(sp)
   44798:	14000017 	ldw	r16,0(r2)
   4479c:	dc400215 	stw	r17,8(sp)
   447a0:	dfc00315 	stw	ra,12(sp)
   447a4:	2023883a 	mov	r17,r4
   447a8:	80000226 	beq	r16,zero,447b4 <putc+0x2c>
   447ac:	80800e17 	ldw	r2,56(r16)
   447b0:	10001a26 	beq	r2,zero,4481c <putc+0x94>
   447b4:	28800217 	ldw	r2,8(r5)
   447b8:	10bfffc4 	addi	r2,r2,-1
   447bc:	28800215 	stw	r2,8(r5)
   447c0:	10000b16 	blt	r2,zero,447f0 <putc+0x68>
   447c4:	28800017 	ldw	r2,0(r5)
   447c8:	14400005 	stb	r17,0(r2)
   447cc:	28800017 	ldw	r2,0(r5)
   447d0:	10c00044 	addi	r3,r2,1
   447d4:	28c00015 	stw	r3,0(r5)
   447d8:	10800003 	ldbu	r2,0(r2)
   447dc:	dfc00317 	ldw	ra,12(sp)
   447e0:	dc400217 	ldw	r17,8(sp)
   447e4:	dc000117 	ldw	r16,4(sp)
   447e8:	dec00404 	addi	sp,sp,16
   447ec:	f800283a 	ret
   447f0:	28c00617 	ldw	r3,24(r5)
   447f4:	10c00e16 	blt	r2,r3,44830 <putc+0xa8>
   447f8:	28800017 	ldw	r2,0(r5)
   447fc:	01000284 	movi	r4,10
   44800:	14400005 	stb	r17,0(r2)
   44804:	28800017 	ldw	r2,0(r5)
   44808:	10c00003 	ldbu	r3,0(r2)
   4480c:	193ff01e 	bne	r3,r4,447d0 <__alt_data_end+0xfffd3a90>
   44810:	280d883a 	mov	r6,r5
   44814:	180b883a 	mov	r5,r3
   44818:	00000706 	br	44838 <putc+0xb0>
   4481c:	8009883a 	mov	r4,r16
   44820:	d9400015 	stw	r5,0(sp)
   44824:	00408400 	call	40840 <__sinit>
   44828:	d9400017 	ldw	r5,0(sp)
   4482c:	003fe106 	br	447b4 <__alt_data_end+0xfffd3a74>
   44830:	280d883a 	mov	r6,r5
   44834:	880b883a 	mov	r5,r17
   44838:	8009883a 	mov	r4,r16
   4483c:	dfc00317 	ldw	ra,12(sp)
   44840:	dc400217 	ldw	r17,8(sp)
   44844:	dc000117 	ldw	r16,4(sp)
   44848:	dec00404 	addi	sp,sp,16
   4484c:	0044e4c1 	jmpi	44e4c <__swbuf_r>

00044850 <_realloc_r>:
   44850:	defff604 	addi	sp,sp,-40
   44854:	dc400115 	stw	r17,4(sp)
   44858:	dfc00915 	stw	ra,36(sp)
   4485c:	df000815 	stw	fp,32(sp)
   44860:	ddc00715 	stw	r23,28(sp)
   44864:	dd800615 	stw	r22,24(sp)
   44868:	dd400515 	stw	r21,20(sp)
   4486c:	dd000415 	stw	r20,16(sp)
   44870:	dcc00315 	stw	r19,12(sp)
   44874:	dc800215 	stw	r18,8(sp)
   44878:	dc000015 	stw	r16,0(sp)
   4487c:	3023883a 	mov	r17,r6
   44880:	2800b626 	beq	r5,zero,44b5c <_realloc_r+0x30c>
   44884:	2829883a 	mov	r20,r5
   44888:	2025883a 	mov	r18,r4
   4488c:	00427e00 	call	427e0 <__malloc_lock>
   44890:	a0ffff17 	ldw	r3,-4(r20)
   44894:	043fff04 	movi	r16,-4
   44898:	888002c4 	addi	r2,r17,11
   4489c:	01000584 	movi	r4,22
   448a0:	a57ffe04 	addi	r21,r20,-8
   448a4:	1c20703a 	and	r16,r3,r16
   448a8:	2080332e 	bgeu	r4,r2,44978 <_realloc_r+0x128>
   448ac:	05bffe04 	movi	r22,-8
   448b0:	15ac703a 	and	r22,r2,r22
   448b4:	b005883a 	mov	r2,r22
   448b8:	b0005716 	blt	r22,zero,44a18 <_realloc_r+0x1c8>
   448bc:	b4405636 	bltu	r22,r17,44a18 <_realloc_r+0x1c8>
   448c0:	8080300e 	bge	r16,r2,44984 <_realloc_r+0x134>
   448c4:	07000134 	movhi	fp,4
   448c8:	e716b104 	addi	fp,fp,23236
   448cc:	e2000217 	ldw	r8,8(fp)
   448d0:	ac09883a 	add	r4,r21,r16
   448d4:	22006126 	beq	r4,r8,44a5c <_realloc_r+0x20c>
   448d8:	22400117 	ldw	r9,4(r4)
   448dc:	01ffff84 	movi	r7,-2
   448e0:	49ce703a 	and	r7,r9,r7
   448e4:	21cf883a 	add	r7,r4,r7
   448e8:	39800117 	ldw	r6,4(r7)
   448ec:	3180004c 	andi	r6,r6,1
   448f0:	30003e26 	beq	r6,zero,449ec <_realloc_r+0x19c>
   448f4:	18c0004c 	andi	r3,r3,1
   448f8:	18008126 	beq	r3,zero,44b00 <_realloc_r+0x2b0>
   448fc:	880b883a 	mov	r5,r17
   44900:	9009883a 	mov	r4,r18
   44904:	0040a180 	call	40a18 <_malloc_r>
   44908:	1023883a 	mov	r17,r2
   4490c:	10011e26 	beq	r2,zero,44d88 <_realloc_r+0x538>
   44910:	a0ffff17 	ldw	r3,-4(r20)
   44914:	113ffe04 	addi	r4,r2,-8
   44918:	00bfff84 	movi	r2,-2
   4491c:	1884703a 	and	r2,r3,r2
   44920:	a885883a 	add	r2,r21,r2
   44924:	2080ee26 	beq	r4,r2,44ce0 <_realloc_r+0x490>
   44928:	81bfff04 	addi	r6,r16,-4
   4492c:	00800904 	movi	r2,36
   44930:	1180b836 	bltu	r2,r6,44c14 <_realloc_r+0x3c4>
   44934:	00c004c4 	movi	r3,19
   44938:	19809536 	bltu	r3,r6,44b90 <_realloc_r+0x340>
   4493c:	8805883a 	mov	r2,r17
   44940:	a007883a 	mov	r3,r20
   44944:	19000017 	ldw	r4,0(r3)
   44948:	11000015 	stw	r4,0(r2)
   4494c:	19000117 	ldw	r4,4(r3)
   44950:	11000115 	stw	r4,4(r2)
   44954:	18c00217 	ldw	r3,8(r3)
   44958:	10c00215 	stw	r3,8(r2)
   4495c:	a00b883a 	mov	r5,r20
   44960:	9009883a 	mov	r4,r18
   44964:	0041c500 	call	41c50 <_free_r>
   44968:	9009883a 	mov	r4,r18
   4496c:	00427e40 	call	427e4 <__malloc_unlock>
   44970:	8805883a 	mov	r2,r17
   44974:	00001106 	br	449bc <_realloc_r+0x16c>
   44978:	00800404 	movi	r2,16
   4497c:	102d883a 	mov	r22,r2
   44980:	003fce06 	br	448bc <__alt_data_end+0xfffd3b7c>
   44984:	a023883a 	mov	r17,r20
   44988:	858fc83a 	sub	r7,r16,r22
   4498c:	008003c4 	movi	r2,15
   44990:	18c0004c 	andi	r3,r3,1
   44994:	11c02436 	bltu	r2,r7,44a28 <_realloc_r+0x1d8>
   44998:	1c06b03a 	or	r3,r3,r16
   4499c:	a8c00115 	stw	r3,4(r21)
   449a0:	ac21883a 	add	r16,r21,r16
   449a4:	80800117 	ldw	r2,4(r16)
   449a8:	10800054 	ori	r2,r2,1
   449ac:	80800115 	stw	r2,4(r16)
   449b0:	9009883a 	mov	r4,r18
   449b4:	00427e40 	call	427e4 <__malloc_unlock>
   449b8:	8805883a 	mov	r2,r17
   449bc:	dfc00917 	ldw	ra,36(sp)
   449c0:	df000817 	ldw	fp,32(sp)
   449c4:	ddc00717 	ldw	r23,28(sp)
   449c8:	dd800617 	ldw	r22,24(sp)
   449cc:	dd400517 	ldw	r21,20(sp)
   449d0:	dd000417 	ldw	r20,16(sp)
   449d4:	dcc00317 	ldw	r19,12(sp)
   449d8:	dc800217 	ldw	r18,8(sp)
   449dc:	dc400117 	ldw	r17,4(sp)
   449e0:	dc000017 	ldw	r16,0(sp)
   449e4:	dec00a04 	addi	sp,sp,40
   449e8:	f800283a 	ret
   449ec:	017fff04 	movi	r5,-4
   449f0:	494a703a 	and	r5,r9,r5
   449f4:	814d883a 	add	r6,r16,r5
   449f8:	30801e16 	blt	r6,r2,44a74 <_realloc_r+0x224>
   449fc:	20800317 	ldw	r2,12(r4)
   44a00:	21000217 	ldw	r4,8(r4)
   44a04:	a023883a 	mov	r17,r20
   44a08:	3021883a 	mov	r16,r6
   44a0c:	20800315 	stw	r2,12(r4)
   44a10:	11000215 	stw	r4,8(r2)
   44a14:	003fdc06 	br	44988 <__alt_data_end+0xfffd3c48>
   44a18:	00800304 	movi	r2,12
   44a1c:	90800015 	stw	r2,0(r18)
   44a20:	0005883a 	mov	r2,zero
   44a24:	003fe506 	br	449bc <__alt_data_end+0xfffd3c7c>
   44a28:	1d86b03a 	or	r3,r3,r22
   44a2c:	a8c00115 	stw	r3,4(r21)
   44a30:	ad8b883a 	add	r5,r21,r22
   44a34:	38c00054 	ori	r3,r7,1
   44a38:	28c00115 	stw	r3,4(r5)
   44a3c:	29cf883a 	add	r7,r5,r7
   44a40:	38c00117 	ldw	r3,4(r7)
   44a44:	29400204 	addi	r5,r5,8
   44a48:	9009883a 	mov	r4,r18
   44a4c:	18800054 	ori	r2,r3,1
   44a50:	38800115 	stw	r2,4(r7)
   44a54:	0041c500 	call	41c50 <_free_r>
   44a58:	003fd506 	br	449b0 <__alt_data_end+0xfffd3c70>
   44a5c:	21c00117 	ldw	r7,4(r4)
   44a60:	017fff04 	movi	r5,-4
   44a64:	b1800404 	addi	r6,r22,16
   44a68:	394a703a 	and	r5,r7,r5
   44a6c:	814f883a 	add	r7,r16,r5
   44a70:	39805b0e 	bge	r7,r6,44be0 <_realloc_r+0x390>
   44a74:	18c0004c 	andi	r3,r3,1
   44a78:	183fa01e 	bne	r3,zero,448fc <__alt_data_end+0xfffd3bbc>
   44a7c:	a4fffe17 	ldw	r19,-8(r20)
   44a80:	00ffff04 	movi	r3,-4
   44a84:	ace7c83a 	sub	r19,r21,r19
   44a88:	99800117 	ldw	r6,4(r19)
   44a8c:	30c6703a 	and	r3,r6,r3
   44a90:	20002026 	beq	r4,zero,44b14 <_realloc_r+0x2c4>
   44a94:	80ef883a 	add	r23,r16,r3
   44a98:	b96f883a 	add	r23,r23,r5
   44a9c:	22006126 	beq	r4,r8,44c24 <_realloc_r+0x3d4>
   44aa0:	b8801c16 	blt	r23,r2,44b14 <_realloc_r+0x2c4>
   44aa4:	20800317 	ldw	r2,12(r4)
   44aa8:	20c00217 	ldw	r3,8(r4)
   44aac:	81bfff04 	addi	r6,r16,-4
   44ab0:	01000904 	movi	r4,36
   44ab4:	18800315 	stw	r2,12(r3)
   44ab8:	10c00215 	stw	r3,8(r2)
   44abc:	98c00217 	ldw	r3,8(r19)
   44ac0:	98800317 	ldw	r2,12(r19)
   44ac4:	9c400204 	addi	r17,r19,8
   44ac8:	18800315 	stw	r2,12(r3)
   44acc:	10c00215 	stw	r3,8(r2)
   44ad0:	21801b36 	bltu	r4,r6,44b40 <_realloc_r+0x2f0>
   44ad4:	008004c4 	movi	r2,19
   44ad8:	1180362e 	bgeu	r2,r6,44bb4 <_realloc_r+0x364>
   44adc:	a0800017 	ldw	r2,0(r20)
   44ae0:	98800215 	stw	r2,8(r19)
   44ae4:	a0800117 	ldw	r2,4(r20)
   44ae8:	98800315 	stw	r2,12(r19)
   44aec:	008006c4 	movi	r2,27
   44af0:	11808136 	bltu	r2,r6,44cf8 <_realloc_r+0x4a8>
   44af4:	98800404 	addi	r2,r19,16
   44af8:	a5000204 	addi	r20,r20,8
   44afc:	00002e06 	br	44bb8 <_realloc_r+0x368>
   44b00:	a4fffe17 	ldw	r19,-8(r20)
   44b04:	00ffff04 	movi	r3,-4
   44b08:	ace7c83a 	sub	r19,r21,r19
   44b0c:	99000117 	ldw	r4,4(r19)
   44b10:	20c6703a 	and	r3,r4,r3
   44b14:	983f7926 	beq	r19,zero,448fc <__alt_data_end+0xfffd3bbc>
   44b18:	80ef883a 	add	r23,r16,r3
   44b1c:	b8bf7716 	blt	r23,r2,448fc <__alt_data_end+0xfffd3bbc>
   44b20:	98800317 	ldw	r2,12(r19)
   44b24:	98c00217 	ldw	r3,8(r19)
   44b28:	81bfff04 	addi	r6,r16,-4
   44b2c:	01000904 	movi	r4,36
   44b30:	18800315 	stw	r2,12(r3)
   44b34:	10c00215 	stw	r3,8(r2)
   44b38:	9c400204 	addi	r17,r19,8
   44b3c:	21bfe52e 	bgeu	r4,r6,44ad4 <__alt_data_end+0xfffd3d94>
   44b40:	a00b883a 	mov	r5,r20
   44b44:	8809883a 	mov	r4,r17
   44b48:	004458c0 	call	4458c <memmove>
   44b4c:	98c00117 	ldw	r3,4(r19)
   44b50:	b821883a 	mov	r16,r23
   44b54:	982b883a 	mov	r21,r19
   44b58:	003f8b06 	br	44988 <__alt_data_end+0xfffd3c48>
   44b5c:	300b883a 	mov	r5,r6
   44b60:	dfc00917 	ldw	ra,36(sp)
   44b64:	df000817 	ldw	fp,32(sp)
   44b68:	ddc00717 	ldw	r23,28(sp)
   44b6c:	dd800617 	ldw	r22,24(sp)
   44b70:	dd400517 	ldw	r21,20(sp)
   44b74:	dd000417 	ldw	r20,16(sp)
   44b78:	dcc00317 	ldw	r19,12(sp)
   44b7c:	dc800217 	ldw	r18,8(sp)
   44b80:	dc400117 	ldw	r17,4(sp)
   44b84:	dc000017 	ldw	r16,0(sp)
   44b88:	dec00a04 	addi	sp,sp,40
   44b8c:	0040a181 	jmpi	40a18 <_malloc_r>
   44b90:	a0c00017 	ldw	r3,0(r20)
   44b94:	88c00015 	stw	r3,0(r17)
   44b98:	a0c00117 	ldw	r3,4(r20)
   44b9c:	88c00115 	stw	r3,4(r17)
   44ba0:	00c006c4 	movi	r3,27
   44ba4:	19804636 	bltu	r3,r6,44cc0 <_realloc_r+0x470>
   44ba8:	88800204 	addi	r2,r17,8
   44bac:	a0c00204 	addi	r3,r20,8
   44bb0:	003f6406 	br	44944 <__alt_data_end+0xfffd3c04>
   44bb4:	8805883a 	mov	r2,r17
   44bb8:	a0c00017 	ldw	r3,0(r20)
   44bbc:	b821883a 	mov	r16,r23
   44bc0:	982b883a 	mov	r21,r19
   44bc4:	10c00015 	stw	r3,0(r2)
   44bc8:	a0c00117 	ldw	r3,4(r20)
   44bcc:	10c00115 	stw	r3,4(r2)
   44bd0:	a0c00217 	ldw	r3,8(r20)
   44bd4:	10c00215 	stw	r3,8(r2)
   44bd8:	98c00117 	ldw	r3,4(r19)
   44bdc:	003f6a06 	br	44988 <__alt_data_end+0xfffd3c48>
   44be0:	adab883a 	add	r21,r21,r22
   44be4:	3d85c83a 	sub	r2,r7,r22
   44be8:	e5400215 	stw	r21,8(fp)
   44bec:	10800054 	ori	r2,r2,1
   44bf0:	a8800115 	stw	r2,4(r21)
   44bf4:	a0bfff17 	ldw	r2,-4(r20)
   44bf8:	9009883a 	mov	r4,r18
   44bfc:	1080004c 	andi	r2,r2,1
   44c00:	1584b03a 	or	r2,r2,r22
   44c04:	a0bfff15 	stw	r2,-4(r20)
   44c08:	00427e40 	call	427e4 <__malloc_unlock>
   44c0c:	a005883a 	mov	r2,r20
   44c10:	003f6a06 	br	449bc <__alt_data_end+0xfffd3c7c>
   44c14:	a00b883a 	mov	r5,r20
   44c18:	8809883a 	mov	r4,r17
   44c1c:	004458c0 	call	4458c <memmove>
   44c20:	003f4e06 	br	4495c <__alt_data_end+0xfffd3c1c>
   44c24:	b1000404 	addi	r4,r22,16
   44c28:	b93fba16 	blt	r23,r4,44b14 <__alt_data_end+0xfffd3dd4>
   44c2c:	98800317 	ldw	r2,12(r19)
   44c30:	98c00217 	ldw	r3,8(r19)
   44c34:	81bfff04 	addi	r6,r16,-4
   44c38:	01000904 	movi	r4,36
   44c3c:	18800315 	stw	r2,12(r3)
   44c40:	10c00215 	stw	r3,8(r2)
   44c44:	9c400204 	addi	r17,r19,8
   44c48:	21804336 	bltu	r4,r6,44d58 <_realloc_r+0x508>
   44c4c:	008004c4 	movi	r2,19
   44c50:	11803f2e 	bgeu	r2,r6,44d50 <_realloc_r+0x500>
   44c54:	a0800017 	ldw	r2,0(r20)
   44c58:	98800215 	stw	r2,8(r19)
   44c5c:	a0800117 	ldw	r2,4(r20)
   44c60:	98800315 	stw	r2,12(r19)
   44c64:	008006c4 	movi	r2,27
   44c68:	11803f36 	bltu	r2,r6,44d68 <_realloc_r+0x518>
   44c6c:	98800404 	addi	r2,r19,16
   44c70:	a5000204 	addi	r20,r20,8
   44c74:	a0c00017 	ldw	r3,0(r20)
   44c78:	10c00015 	stw	r3,0(r2)
   44c7c:	a0c00117 	ldw	r3,4(r20)
   44c80:	10c00115 	stw	r3,4(r2)
   44c84:	a0c00217 	ldw	r3,8(r20)
   44c88:	10c00215 	stw	r3,8(r2)
   44c8c:	9d87883a 	add	r3,r19,r22
   44c90:	bd85c83a 	sub	r2,r23,r22
   44c94:	e0c00215 	stw	r3,8(fp)
   44c98:	10800054 	ori	r2,r2,1
   44c9c:	18800115 	stw	r2,4(r3)
   44ca0:	98800117 	ldw	r2,4(r19)
   44ca4:	9009883a 	mov	r4,r18
   44ca8:	1080004c 	andi	r2,r2,1
   44cac:	1584b03a 	or	r2,r2,r22
   44cb0:	98800115 	stw	r2,4(r19)
   44cb4:	00427e40 	call	427e4 <__malloc_unlock>
   44cb8:	8805883a 	mov	r2,r17
   44cbc:	003f3f06 	br	449bc <__alt_data_end+0xfffd3c7c>
   44cc0:	a0c00217 	ldw	r3,8(r20)
   44cc4:	88c00215 	stw	r3,8(r17)
   44cc8:	a0c00317 	ldw	r3,12(r20)
   44ccc:	88c00315 	stw	r3,12(r17)
   44cd0:	30801126 	beq	r6,r2,44d18 <_realloc_r+0x4c8>
   44cd4:	88800404 	addi	r2,r17,16
   44cd8:	a0c00404 	addi	r3,r20,16
   44cdc:	003f1906 	br	44944 <__alt_data_end+0xfffd3c04>
   44ce0:	893fff17 	ldw	r4,-4(r17)
   44ce4:	00bfff04 	movi	r2,-4
   44ce8:	a023883a 	mov	r17,r20
   44cec:	2084703a 	and	r2,r4,r2
   44cf0:	80a1883a 	add	r16,r16,r2
   44cf4:	003f2406 	br	44988 <__alt_data_end+0xfffd3c48>
   44cf8:	a0800217 	ldw	r2,8(r20)
   44cfc:	98800415 	stw	r2,16(r19)
   44d00:	a0800317 	ldw	r2,12(r20)
   44d04:	98800515 	stw	r2,20(r19)
   44d08:	31000a26 	beq	r6,r4,44d34 <_realloc_r+0x4e4>
   44d0c:	98800604 	addi	r2,r19,24
   44d10:	a5000404 	addi	r20,r20,16
   44d14:	003fa806 	br	44bb8 <__alt_data_end+0xfffd3e78>
   44d18:	a1000417 	ldw	r4,16(r20)
   44d1c:	88800604 	addi	r2,r17,24
   44d20:	a0c00604 	addi	r3,r20,24
   44d24:	89000415 	stw	r4,16(r17)
   44d28:	a1000517 	ldw	r4,20(r20)
   44d2c:	89000515 	stw	r4,20(r17)
   44d30:	003f0406 	br	44944 <__alt_data_end+0xfffd3c04>
   44d34:	a0c00417 	ldw	r3,16(r20)
   44d38:	a5000604 	addi	r20,r20,24
   44d3c:	98800804 	addi	r2,r19,32
   44d40:	98c00615 	stw	r3,24(r19)
   44d44:	a0ffff17 	ldw	r3,-4(r20)
   44d48:	98c00715 	stw	r3,28(r19)
   44d4c:	003f9a06 	br	44bb8 <__alt_data_end+0xfffd3e78>
   44d50:	8805883a 	mov	r2,r17
   44d54:	003fc706 	br	44c74 <__alt_data_end+0xfffd3f34>
   44d58:	a00b883a 	mov	r5,r20
   44d5c:	8809883a 	mov	r4,r17
   44d60:	004458c0 	call	4458c <memmove>
   44d64:	003fc906 	br	44c8c <__alt_data_end+0xfffd3f4c>
   44d68:	a0800217 	ldw	r2,8(r20)
   44d6c:	98800415 	stw	r2,16(r19)
   44d70:	a0800317 	ldw	r2,12(r20)
   44d74:	98800515 	stw	r2,20(r19)
   44d78:	31000726 	beq	r6,r4,44d98 <_realloc_r+0x548>
   44d7c:	98800604 	addi	r2,r19,24
   44d80:	a5000404 	addi	r20,r20,16
   44d84:	003fbb06 	br	44c74 <__alt_data_end+0xfffd3f34>
   44d88:	9009883a 	mov	r4,r18
   44d8c:	00427e40 	call	427e4 <__malloc_unlock>
   44d90:	0005883a 	mov	r2,zero
   44d94:	003f0906 	br	449bc <__alt_data_end+0xfffd3c7c>
   44d98:	a0c00417 	ldw	r3,16(r20)
   44d9c:	a5000604 	addi	r20,r20,24
   44da0:	98800804 	addi	r2,r19,32
   44da4:	98c00615 	stw	r3,24(r19)
   44da8:	a0ffff17 	ldw	r3,-4(r20)
   44dac:	98c00715 	stw	r3,28(r19)
   44db0:	003fb006 	br	44c74 <__alt_data_end+0xfffd3f34>

00044db4 <strlen>:
   44db4:	208000cc 	andi	r2,r4,3
   44db8:	10002026 	beq	r2,zero,44e3c <strlen+0x88>
   44dbc:	20800007 	ldb	r2,0(r4)
   44dc0:	10002026 	beq	r2,zero,44e44 <strlen+0x90>
   44dc4:	2005883a 	mov	r2,r4
   44dc8:	00000206 	br	44dd4 <strlen+0x20>
   44dcc:	10c00007 	ldb	r3,0(r2)
   44dd0:	18001826 	beq	r3,zero,44e34 <strlen+0x80>
   44dd4:	10800044 	addi	r2,r2,1
   44dd8:	10c000cc 	andi	r3,r2,3
   44ddc:	183ffb1e 	bne	r3,zero,44dcc <__alt_data_end+0xfffd408c>
   44de0:	10c00017 	ldw	r3,0(r2)
   44de4:	01ffbff4 	movhi	r7,65279
   44de8:	39ffbfc4 	addi	r7,r7,-257
   44dec:	00ca303a 	nor	r5,zero,r3
   44df0:	01a02074 	movhi	r6,32897
   44df4:	19c7883a 	add	r3,r3,r7
   44df8:	31a02004 	addi	r6,r6,-32640
   44dfc:	1946703a 	and	r3,r3,r5
   44e00:	1986703a 	and	r3,r3,r6
   44e04:	1800091e 	bne	r3,zero,44e2c <strlen+0x78>
   44e08:	10800104 	addi	r2,r2,4
   44e0c:	10c00017 	ldw	r3,0(r2)
   44e10:	19cb883a 	add	r5,r3,r7
   44e14:	00c6303a 	nor	r3,zero,r3
   44e18:	28c6703a 	and	r3,r5,r3
   44e1c:	1986703a 	and	r3,r3,r6
   44e20:	183ff926 	beq	r3,zero,44e08 <__alt_data_end+0xfffd40c8>
   44e24:	00000106 	br	44e2c <strlen+0x78>
   44e28:	10800044 	addi	r2,r2,1
   44e2c:	10c00007 	ldb	r3,0(r2)
   44e30:	183ffd1e 	bne	r3,zero,44e28 <__alt_data_end+0xfffd40e8>
   44e34:	1105c83a 	sub	r2,r2,r4
   44e38:	f800283a 	ret
   44e3c:	2005883a 	mov	r2,r4
   44e40:	003fe706 	br	44de0 <__alt_data_end+0xfffd40a0>
   44e44:	0005883a 	mov	r2,zero
   44e48:	f800283a 	ret

00044e4c <__swbuf_r>:
   44e4c:	defffb04 	addi	sp,sp,-20
   44e50:	dcc00315 	stw	r19,12(sp)
   44e54:	dc800215 	stw	r18,8(sp)
   44e58:	dc000015 	stw	r16,0(sp)
   44e5c:	dfc00415 	stw	ra,16(sp)
   44e60:	dc400115 	stw	r17,4(sp)
   44e64:	2025883a 	mov	r18,r4
   44e68:	2827883a 	mov	r19,r5
   44e6c:	3021883a 	mov	r16,r6
   44e70:	20000226 	beq	r4,zero,44e7c <__swbuf_r+0x30>
   44e74:	20800e17 	ldw	r2,56(r4)
   44e78:	10004226 	beq	r2,zero,44f84 <__swbuf_r+0x138>
   44e7c:	80800617 	ldw	r2,24(r16)
   44e80:	8100030b 	ldhu	r4,12(r16)
   44e84:	80800215 	stw	r2,8(r16)
   44e88:	2080020c 	andi	r2,r4,8
   44e8c:	10003626 	beq	r2,zero,44f68 <__swbuf_r+0x11c>
   44e90:	80c00417 	ldw	r3,16(r16)
   44e94:	18003426 	beq	r3,zero,44f68 <__swbuf_r+0x11c>
   44e98:	2088000c 	andi	r2,r4,8192
   44e9c:	9c403fcc 	andi	r17,r19,255
   44ea0:	10001a26 	beq	r2,zero,44f0c <__swbuf_r+0xc0>
   44ea4:	80800017 	ldw	r2,0(r16)
   44ea8:	81000517 	ldw	r4,20(r16)
   44eac:	10c7c83a 	sub	r3,r2,r3
   44eb0:	1900200e 	bge	r3,r4,44f34 <__swbuf_r+0xe8>
   44eb4:	18c00044 	addi	r3,r3,1
   44eb8:	81000217 	ldw	r4,8(r16)
   44ebc:	11400044 	addi	r5,r2,1
   44ec0:	81400015 	stw	r5,0(r16)
   44ec4:	213fffc4 	addi	r4,r4,-1
   44ec8:	81000215 	stw	r4,8(r16)
   44ecc:	14c00005 	stb	r19,0(r2)
   44ed0:	80800517 	ldw	r2,20(r16)
   44ed4:	10c01e26 	beq	r2,r3,44f50 <__swbuf_r+0x104>
   44ed8:	8080030b 	ldhu	r2,12(r16)
   44edc:	1080004c 	andi	r2,r2,1
   44ee0:	10000226 	beq	r2,zero,44eec <__swbuf_r+0xa0>
   44ee4:	00800284 	movi	r2,10
   44ee8:	88801926 	beq	r17,r2,44f50 <__swbuf_r+0x104>
   44eec:	8805883a 	mov	r2,r17
   44ef0:	dfc00417 	ldw	ra,16(sp)
   44ef4:	dcc00317 	ldw	r19,12(sp)
   44ef8:	dc800217 	ldw	r18,8(sp)
   44efc:	dc400117 	ldw	r17,4(sp)
   44f00:	dc000017 	ldw	r16,0(sp)
   44f04:	dec00504 	addi	sp,sp,20
   44f08:	f800283a 	ret
   44f0c:	81401917 	ldw	r5,100(r16)
   44f10:	00b7ffc4 	movi	r2,-8193
   44f14:	21080014 	ori	r4,r4,8192
   44f18:	2884703a 	and	r2,r5,r2
   44f1c:	80801915 	stw	r2,100(r16)
   44f20:	80800017 	ldw	r2,0(r16)
   44f24:	8100030d 	sth	r4,12(r16)
   44f28:	81000517 	ldw	r4,20(r16)
   44f2c:	10c7c83a 	sub	r3,r2,r3
   44f30:	193fe016 	blt	r3,r4,44eb4 <__alt_data_end+0xfffd4174>
   44f34:	800b883a 	mov	r5,r16
   44f38:	9009883a 	mov	r4,r18
   44f3c:	0041aa00 	call	41aa0 <_fflush_r>
   44f40:	1000071e 	bne	r2,zero,44f60 <__swbuf_r+0x114>
   44f44:	80800017 	ldw	r2,0(r16)
   44f48:	00c00044 	movi	r3,1
   44f4c:	003fda06 	br	44eb8 <__alt_data_end+0xfffd4178>
   44f50:	800b883a 	mov	r5,r16
   44f54:	9009883a 	mov	r4,r18
   44f58:	0041aa00 	call	41aa0 <_fflush_r>
   44f5c:	103fe326 	beq	r2,zero,44eec <__alt_data_end+0xfffd41ac>
   44f60:	00bfffc4 	movi	r2,-1
   44f64:	003fe206 	br	44ef0 <__alt_data_end+0xfffd41b0>
   44f68:	800b883a 	mov	r5,r16
   44f6c:	9009883a 	mov	r4,r18
   44f70:	0044fa40 	call	44fa4 <__swsetup_r>
   44f74:	103ffa1e 	bne	r2,zero,44f60 <__alt_data_end+0xfffd4220>
   44f78:	8100030b 	ldhu	r4,12(r16)
   44f7c:	80c00417 	ldw	r3,16(r16)
   44f80:	003fc506 	br	44e98 <__alt_data_end+0xfffd4158>
   44f84:	00408400 	call	40840 <__sinit>
   44f88:	003fbc06 	br	44e7c <__alt_data_end+0xfffd413c>

00044f8c <__swbuf>:
   44f8c:	00800134 	movhi	r2,4
   44f90:	109c3604 	addi	r2,r2,28888
   44f94:	280d883a 	mov	r6,r5
   44f98:	200b883a 	mov	r5,r4
   44f9c:	11000017 	ldw	r4,0(r2)
   44fa0:	0044e4c1 	jmpi	44e4c <__swbuf_r>

00044fa4 <__swsetup_r>:
   44fa4:	00800134 	movhi	r2,4
   44fa8:	defffd04 	addi	sp,sp,-12
   44fac:	109c3604 	addi	r2,r2,28888
   44fb0:	dc400115 	stw	r17,4(sp)
   44fb4:	2023883a 	mov	r17,r4
   44fb8:	11000017 	ldw	r4,0(r2)
   44fbc:	dc000015 	stw	r16,0(sp)
   44fc0:	dfc00215 	stw	ra,8(sp)
   44fc4:	2821883a 	mov	r16,r5
   44fc8:	20000226 	beq	r4,zero,44fd4 <__swsetup_r+0x30>
   44fcc:	20800e17 	ldw	r2,56(r4)
   44fd0:	10003126 	beq	r2,zero,45098 <__swsetup_r+0xf4>
   44fd4:	8080030b 	ldhu	r2,12(r16)
   44fd8:	10c0020c 	andi	r3,r2,8
   44fdc:	1009883a 	mov	r4,r2
   44fe0:	18000f26 	beq	r3,zero,45020 <__swsetup_r+0x7c>
   44fe4:	80c00417 	ldw	r3,16(r16)
   44fe8:	18001526 	beq	r3,zero,45040 <__swsetup_r+0x9c>
   44fec:	1100004c 	andi	r4,r2,1
   44ff0:	20001c1e 	bne	r4,zero,45064 <__swsetup_r+0xc0>
   44ff4:	1080008c 	andi	r2,r2,2
   44ff8:	1000291e 	bne	r2,zero,450a0 <__swsetup_r+0xfc>
   44ffc:	80800517 	ldw	r2,20(r16)
   45000:	80800215 	stw	r2,8(r16)
   45004:	18001c26 	beq	r3,zero,45078 <__swsetup_r+0xd4>
   45008:	0005883a 	mov	r2,zero
   4500c:	dfc00217 	ldw	ra,8(sp)
   45010:	dc400117 	ldw	r17,4(sp)
   45014:	dc000017 	ldw	r16,0(sp)
   45018:	dec00304 	addi	sp,sp,12
   4501c:	f800283a 	ret
   45020:	2080040c 	andi	r2,r4,16
   45024:	10002e26 	beq	r2,zero,450e0 <__swsetup_r+0x13c>
   45028:	2080010c 	andi	r2,r4,4
   4502c:	10001e1e 	bne	r2,zero,450a8 <__swsetup_r+0x104>
   45030:	80c00417 	ldw	r3,16(r16)
   45034:	20800214 	ori	r2,r4,8
   45038:	8080030d 	sth	r2,12(r16)
   4503c:	183feb1e 	bne	r3,zero,44fec <__alt_data_end+0xfffd42ac>
   45040:	1100a00c 	andi	r4,r2,640
   45044:	01408004 	movi	r5,512
   45048:	217fe826 	beq	r4,r5,44fec <__alt_data_end+0xfffd42ac>
   4504c:	800b883a 	mov	r5,r16
   45050:	8809883a 	mov	r4,r17
   45054:	0041fc00 	call	41fc0 <__smakebuf_r>
   45058:	8080030b 	ldhu	r2,12(r16)
   4505c:	80c00417 	ldw	r3,16(r16)
   45060:	003fe206 	br	44fec <__alt_data_end+0xfffd42ac>
   45064:	80800517 	ldw	r2,20(r16)
   45068:	80000215 	stw	zero,8(r16)
   4506c:	0085c83a 	sub	r2,zero,r2
   45070:	80800615 	stw	r2,24(r16)
   45074:	183fe41e 	bne	r3,zero,45008 <__alt_data_end+0xfffd42c8>
   45078:	80c0030b 	ldhu	r3,12(r16)
   4507c:	0005883a 	mov	r2,zero
   45080:	1900200c 	andi	r4,r3,128
   45084:	203fe126 	beq	r4,zero,4500c <__alt_data_end+0xfffd42cc>
   45088:	18c01014 	ori	r3,r3,64
   4508c:	80c0030d 	sth	r3,12(r16)
   45090:	00bfffc4 	movi	r2,-1
   45094:	003fdd06 	br	4500c <__alt_data_end+0xfffd42cc>
   45098:	00408400 	call	40840 <__sinit>
   4509c:	003fcd06 	br	44fd4 <__alt_data_end+0xfffd4294>
   450a0:	0005883a 	mov	r2,zero
   450a4:	003fd606 	br	45000 <__alt_data_end+0xfffd42c0>
   450a8:	81400c17 	ldw	r5,48(r16)
   450ac:	28000626 	beq	r5,zero,450c8 <__swsetup_r+0x124>
   450b0:	80801004 	addi	r2,r16,64
   450b4:	28800326 	beq	r5,r2,450c4 <__swsetup_r+0x120>
   450b8:	8809883a 	mov	r4,r17
   450bc:	0041c500 	call	41c50 <_free_r>
   450c0:	8100030b 	ldhu	r4,12(r16)
   450c4:	80000c15 	stw	zero,48(r16)
   450c8:	80c00417 	ldw	r3,16(r16)
   450cc:	00bff6c4 	movi	r2,-37
   450d0:	1108703a 	and	r4,r2,r4
   450d4:	80000115 	stw	zero,4(r16)
   450d8:	80c00015 	stw	r3,0(r16)
   450dc:	003fd506 	br	45034 <__alt_data_end+0xfffd42f4>
   450e0:	00800244 	movi	r2,9
   450e4:	88800015 	stw	r2,0(r17)
   450e8:	20801014 	ori	r2,r4,64
   450ec:	8080030d 	sth	r2,12(r16)
   450f0:	00bfffc4 	movi	r2,-1
   450f4:	003fc506 	br	4500c <__alt_data_end+0xfffd42cc>

000450f8 <__register_exitproc>:
   450f8:	defffa04 	addi	sp,sp,-24
   450fc:	dc000315 	stw	r16,12(sp)
   45100:	04000134 	movhi	r16,4
   45104:	841c3504 	addi	r16,r16,28884
   45108:	80c00017 	ldw	r3,0(r16)
   4510c:	dc400415 	stw	r17,16(sp)
   45110:	dfc00515 	stw	ra,20(sp)
   45114:	18805217 	ldw	r2,328(r3)
   45118:	2023883a 	mov	r17,r4
   4511c:	10003726 	beq	r2,zero,451fc <__register_exitproc+0x104>
   45120:	10c00117 	ldw	r3,4(r2)
   45124:	010007c4 	movi	r4,31
   45128:	20c00e16 	blt	r4,r3,45164 <__register_exitproc+0x6c>
   4512c:	1a000044 	addi	r8,r3,1
   45130:	8800221e 	bne	r17,zero,451bc <__register_exitproc+0xc4>
   45134:	18c00084 	addi	r3,r3,2
   45138:	18c7883a 	add	r3,r3,r3
   4513c:	18c7883a 	add	r3,r3,r3
   45140:	12000115 	stw	r8,4(r2)
   45144:	10c7883a 	add	r3,r2,r3
   45148:	19400015 	stw	r5,0(r3)
   4514c:	0005883a 	mov	r2,zero
   45150:	dfc00517 	ldw	ra,20(sp)
   45154:	dc400417 	ldw	r17,16(sp)
   45158:	dc000317 	ldw	r16,12(sp)
   4515c:	dec00604 	addi	sp,sp,24
   45160:	f800283a 	ret
   45164:	00800034 	movhi	r2,0
   45168:	10800004 	addi	r2,r2,0
   4516c:	10002626 	beq	r2,zero,45208 <__register_exitproc+0x110>
   45170:	01006404 	movi	r4,400
   45174:	d9400015 	stw	r5,0(sp)
   45178:	d9800115 	stw	r6,4(sp)
   4517c:	d9c00215 	stw	r7,8(sp)
   45180:	00000000 	call	0 <__alt_mem_onchip_mem-0x40000>
   45184:	d9400017 	ldw	r5,0(sp)
   45188:	d9800117 	ldw	r6,4(sp)
   4518c:	d9c00217 	ldw	r7,8(sp)
   45190:	10001d26 	beq	r2,zero,45208 <__register_exitproc+0x110>
   45194:	81000017 	ldw	r4,0(r16)
   45198:	10000115 	stw	zero,4(r2)
   4519c:	02000044 	movi	r8,1
   451a0:	22405217 	ldw	r9,328(r4)
   451a4:	0007883a 	mov	r3,zero
   451a8:	12400015 	stw	r9,0(r2)
   451ac:	20805215 	stw	r2,328(r4)
   451b0:	10006215 	stw	zero,392(r2)
   451b4:	10006315 	stw	zero,396(r2)
   451b8:	883fde26 	beq	r17,zero,45134 <__alt_data_end+0xfffd43f4>
   451bc:	18c9883a 	add	r4,r3,r3
   451c0:	2109883a 	add	r4,r4,r4
   451c4:	1109883a 	add	r4,r2,r4
   451c8:	21802215 	stw	r6,136(r4)
   451cc:	01800044 	movi	r6,1
   451d0:	12406217 	ldw	r9,392(r2)
   451d4:	30cc983a 	sll	r6,r6,r3
   451d8:	4992b03a 	or	r9,r9,r6
   451dc:	12406215 	stw	r9,392(r2)
   451e0:	21c04215 	stw	r7,264(r4)
   451e4:	01000084 	movi	r4,2
   451e8:	893fd21e 	bne	r17,r4,45134 <__alt_data_end+0xfffd43f4>
   451ec:	11006317 	ldw	r4,396(r2)
   451f0:	218cb03a 	or	r6,r4,r6
   451f4:	11806315 	stw	r6,396(r2)
   451f8:	003fce06 	br	45134 <__alt_data_end+0xfffd43f4>
   451fc:	18805304 	addi	r2,r3,332
   45200:	18805215 	stw	r2,328(r3)
   45204:	003fc606 	br	45120 <__alt_data_end+0xfffd43e0>
   45208:	00bfffc4 	movi	r2,-1
   4520c:	003fd006 	br	45150 <__alt_data_end+0xfffd4410>

00045210 <__call_exitprocs>:
   45210:	defff504 	addi	sp,sp,-44
   45214:	df000915 	stw	fp,36(sp)
   45218:	dd400615 	stw	r21,24(sp)
   4521c:	dc800315 	stw	r18,12(sp)
   45220:	dfc00a15 	stw	ra,40(sp)
   45224:	ddc00815 	stw	r23,32(sp)
   45228:	dd800715 	stw	r22,28(sp)
   4522c:	dd000515 	stw	r20,20(sp)
   45230:	dcc00415 	stw	r19,16(sp)
   45234:	dc400215 	stw	r17,8(sp)
   45238:	dc000115 	stw	r16,4(sp)
   4523c:	d9000015 	stw	r4,0(sp)
   45240:	2839883a 	mov	fp,r5
   45244:	04800044 	movi	r18,1
   45248:	057fffc4 	movi	r21,-1
   4524c:	00800134 	movhi	r2,4
   45250:	109c3504 	addi	r2,r2,28884
   45254:	12000017 	ldw	r8,0(r2)
   45258:	45005217 	ldw	r20,328(r8)
   4525c:	44c05204 	addi	r19,r8,328
   45260:	a0001c26 	beq	r20,zero,452d4 <__call_exitprocs+0xc4>
   45264:	a0800117 	ldw	r2,4(r20)
   45268:	15ffffc4 	addi	r23,r2,-1
   4526c:	b8000d16 	blt	r23,zero,452a4 <__call_exitprocs+0x94>
   45270:	14000044 	addi	r16,r2,1
   45274:	8421883a 	add	r16,r16,r16
   45278:	8421883a 	add	r16,r16,r16
   4527c:	84402004 	addi	r17,r16,128
   45280:	a463883a 	add	r17,r20,r17
   45284:	a421883a 	add	r16,r20,r16
   45288:	e0001e26 	beq	fp,zero,45304 <__call_exitprocs+0xf4>
   4528c:	80804017 	ldw	r2,256(r16)
   45290:	e0801c26 	beq	fp,r2,45304 <__call_exitprocs+0xf4>
   45294:	bdffffc4 	addi	r23,r23,-1
   45298:	843fff04 	addi	r16,r16,-4
   4529c:	8c7fff04 	addi	r17,r17,-4
   452a0:	bd7ff91e 	bne	r23,r21,45288 <__alt_data_end+0xfffd4548>
   452a4:	00800034 	movhi	r2,0
   452a8:	10800004 	addi	r2,r2,0
   452ac:	10000926 	beq	r2,zero,452d4 <__call_exitprocs+0xc4>
   452b0:	a0800117 	ldw	r2,4(r20)
   452b4:	1000301e 	bne	r2,zero,45378 <__call_exitprocs+0x168>
   452b8:	a0800017 	ldw	r2,0(r20)
   452bc:	10003226 	beq	r2,zero,45388 <__call_exitprocs+0x178>
   452c0:	a009883a 	mov	r4,r20
   452c4:	98800015 	stw	r2,0(r19)
   452c8:	00000000 	call	0 <__alt_mem_onchip_mem-0x40000>
   452cc:	9d000017 	ldw	r20,0(r19)
   452d0:	a03fe41e 	bne	r20,zero,45264 <__alt_data_end+0xfffd4524>
   452d4:	dfc00a17 	ldw	ra,40(sp)
   452d8:	df000917 	ldw	fp,36(sp)
   452dc:	ddc00817 	ldw	r23,32(sp)
   452e0:	dd800717 	ldw	r22,28(sp)
   452e4:	dd400617 	ldw	r21,24(sp)
   452e8:	dd000517 	ldw	r20,20(sp)
   452ec:	dcc00417 	ldw	r19,16(sp)
   452f0:	dc800317 	ldw	r18,12(sp)
   452f4:	dc400217 	ldw	r17,8(sp)
   452f8:	dc000117 	ldw	r16,4(sp)
   452fc:	dec00b04 	addi	sp,sp,44
   45300:	f800283a 	ret
   45304:	a0800117 	ldw	r2,4(r20)
   45308:	80c00017 	ldw	r3,0(r16)
   4530c:	10bfffc4 	addi	r2,r2,-1
   45310:	15c01426 	beq	r2,r23,45364 <__call_exitprocs+0x154>
   45314:	80000015 	stw	zero,0(r16)
   45318:	183fde26 	beq	r3,zero,45294 <__alt_data_end+0xfffd4554>
   4531c:	95c8983a 	sll	r4,r18,r23
   45320:	a0806217 	ldw	r2,392(r20)
   45324:	a5800117 	ldw	r22,4(r20)
   45328:	2084703a 	and	r2,r4,r2
   4532c:	10000b26 	beq	r2,zero,4535c <__call_exitprocs+0x14c>
   45330:	a0806317 	ldw	r2,396(r20)
   45334:	2088703a 	and	r4,r4,r2
   45338:	20000c1e 	bne	r4,zero,4536c <__call_exitprocs+0x15c>
   4533c:	89400017 	ldw	r5,0(r17)
   45340:	d9000017 	ldw	r4,0(sp)
   45344:	183ee83a 	callr	r3
   45348:	a0800117 	ldw	r2,4(r20)
   4534c:	15bfbf1e 	bne	r2,r22,4524c <__alt_data_end+0xfffd450c>
   45350:	98800017 	ldw	r2,0(r19)
   45354:	153fcf26 	beq	r2,r20,45294 <__alt_data_end+0xfffd4554>
   45358:	003fbc06 	br	4524c <__alt_data_end+0xfffd450c>
   4535c:	183ee83a 	callr	r3
   45360:	003ff906 	br	45348 <__alt_data_end+0xfffd4608>
   45364:	a5c00115 	stw	r23,4(r20)
   45368:	003feb06 	br	45318 <__alt_data_end+0xfffd45d8>
   4536c:	89000017 	ldw	r4,0(r17)
   45370:	183ee83a 	callr	r3
   45374:	003ff406 	br	45348 <__alt_data_end+0xfffd4608>
   45378:	a0800017 	ldw	r2,0(r20)
   4537c:	a027883a 	mov	r19,r20
   45380:	1029883a 	mov	r20,r2
   45384:	003fb606 	br	45260 <__alt_data_end+0xfffd4520>
   45388:	0005883a 	mov	r2,zero
   4538c:	003ffb06 	br	4537c <__alt_data_end+0xfffd463c>

00045390 <__divsi3>:
   45390:	20001b16 	blt	r4,zero,45400 <__divsi3+0x70>
   45394:	000f883a 	mov	r7,zero
   45398:	28001616 	blt	r5,zero,453f4 <__divsi3+0x64>
   4539c:	200d883a 	mov	r6,r4
   453a0:	29001a2e 	bgeu	r5,r4,4540c <__divsi3+0x7c>
   453a4:	00800804 	movi	r2,32
   453a8:	00c00044 	movi	r3,1
   453ac:	00000106 	br	453b4 <__divsi3+0x24>
   453b0:	10000d26 	beq	r2,zero,453e8 <__divsi3+0x58>
   453b4:	294b883a 	add	r5,r5,r5
   453b8:	10bfffc4 	addi	r2,r2,-1
   453bc:	18c7883a 	add	r3,r3,r3
   453c0:	293ffb36 	bltu	r5,r4,453b0 <__alt_data_end+0xfffd4670>
   453c4:	0005883a 	mov	r2,zero
   453c8:	18000726 	beq	r3,zero,453e8 <__divsi3+0x58>
   453cc:	0005883a 	mov	r2,zero
   453d0:	31400236 	bltu	r6,r5,453dc <__divsi3+0x4c>
   453d4:	314dc83a 	sub	r6,r6,r5
   453d8:	10c4b03a 	or	r2,r2,r3
   453dc:	1806d07a 	srli	r3,r3,1
   453e0:	280ad07a 	srli	r5,r5,1
   453e4:	183ffa1e 	bne	r3,zero,453d0 <__alt_data_end+0xfffd4690>
   453e8:	38000126 	beq	r7,zero,453f0 <__divsi3+0x60>
   453ec:	0085c83a 	sub	r2,zero,r2
   453f0:	f800283a 	ret
   453f4:	014bc83a 	sub	r5,zero,r5
   453f8:	39c0005c 	xori	r7,r7,1
   453fc:	003fe706 	br	4539c <__alt_data_end+0xfffd465c>
   45400:	0109c83a 	sub	r4,zero,r4
   45404:	01c00044 	movi	r7,1
   45408:	003fe306 	br	45398 <__alt_data_end+0xfffd4658>
   4540c:	00c00044 	movi	r3,1
   45410:	003fee06 	br	453cc <__alt_data_end+0xfffd468c>

00045414 <__modsi3>:
   45414:	20001716 	blt	r4,zero,45474 <__modsi3+0x60>
   45418:	000f883a 	mov	r7,zero
   4541c:	2005883a 	mov	r2,r4
   45420:	28001216 	blt	r5,zero,4546c <__modsi3+0x58>
   45424:	2900162e 	bgeu	r5,r4,45480 <__modsi3+0x6c>
   45428:	01800804 	movi	r6,32
   4542c:	00c00044 	movi	r3,1
   45430:	00000106 	br	45438 <__modsi3+0x24>
   45434:	30000a26 	beq	r6,zero,45460 <__modsi3+0x4c>
   45438:	294b883a 	add	r5,r5,r5
   4543c:	31bfffc4 	addi	r6,r6,-1
   45440:	18c7883a 	add	r3,r3,r3
   45444:	293ffb36 	bltu	r5,r4,45434 <__alt_data_end+0xfffd46f4>
   45448:	18000526 	beq	r3,zero,45460 <__modsi3+0x4c>
   4544c:	1806d07a 	srli	r3,r3,1
   45450:	11400136 	bltu	r2,r5,45458 <__modsi3+0x44>
   45454:	1145c83a 	sub	r2,r2,r5
   45458:	280ad07a 	srli	r5,r5,1
   4545c:	183ffb1e 	bne	r3,zero,4544c <__alt_data_end+0xfffd470c>
   45460:	38000126 	beq	r7,zero,45468 <__modsi3+0x54>
   45464:	0085c83a 	sub	r2,zero,r2
   45468:	f800283a 	ret
   4546c:	014bc83a 	sub	r5,zero,r5
   45470:	003fec06 	br	45424 <__alt_data_end+0xfffd46e4>
   45474:	0109c83a 	sub	r4,zero,r4
   45478:	01c00044 	movi	r7,1
   4547c:	003fe706 	br	4541c <__alt_data_end+0xfffd46dc>
   45480:	00c00044 	movi	r3,1
   45484:	003ff106 	br	4544c <__alt_data_end+0xfffd470c>

00045488 <__udivsi3>:
   45488:	200d883a 	mov	r6,r4
   4548c:	2900152e 	bgeu	r5,r4,454e4 <__udivsi3+0x5c>
   45490:	28001416 	blt	r5,zero,454e4 <__udivsi3+0x5c>
   45494:	00800804 	movi	r2,32
   45498:	00c00044 	movi	r3,1
   4549c:	00000206 	br	454a8 <__udivsi3+0x20>
   454a0:	10000e26 	beq	r2,zero,454dc <__udivsi3+0x54>
   454a4:	28000516 	blt	r5,zero,454bc <__udivsi3+0x34>
   454a8:	294b883a 	add	r5,r5,r5
   454ac:	10bfffc4 	addi	r2,r2,-1
   454b0:	18c7883a 	add	r3,r3,r3
   454b4:	293ffa36 	bltu	r5,r4,454a0 <__alt_data_end+0xfffd4760>
   454b8:	18000826 	beq	r3,zero,454dc <__udivsi3+0x54>
   454bc:	0005883a 	mov	r2,zero
   454c0:	31400236 	bltu	r6,r5,454cc <__udivsi3+0x44>
   454c4:	314dc83a 	sub	r6,r6,r5
   454c8:	10c4b03a 	or	r2,r2,r3
   454cc:	1806d07a 	srli	r3,r3,1
   454d0:	280ad07a 	srli	r5,r5,1
   454d4:	183ffa1e 	bne	r3,zero,454c0 <__alt_data_end+0xfffd4780>
   454d8:	f800283a 	ret
   454dc:	0005883a 	mov	r2,zero
   454e0:	f800283a 	ret
   454e4:	00c00044 	movi	r3,1
   454e8:	003ff406 	br	454bc <__alt_data_end+0xfffd477c>

000454ec <__umodsi3>:
   454ec:	2005883a 	mov	r2,r4
   454f0:	2900122e 	bgeu	r5,r4,4553c <__umodsi3+0x50>
   454f4:	28001116 	blt	r5,zero,4553c <__umodsi3+0x50>
   454f8:	01800804 	movi	r6,32
   454fc:	00c00044 	movi	r3,1
   45500:	00000206 	br	4550c <__umodsi3+0x20>
   45504:	30000c26 	beq	r6,zero,45538 <__umodsi3+0x4c>
   45508:	28000516 	blt	r5,zero,45520 <__umodsi3+0x34>
   4550c:	294b883a 	add	r5,r5,r5
   45510:	31bfffc4 	addi	r6,r6,-1
   45514:	18c7883a 	add	r3,r3,r3
   45518:	293ffa36 	bltu	r5,r4,45504 <__alt_data_end+0xfffd47c4>
   4551c:	18000626 	beq	r3,zero,45538 <__umodsi3+0x4c>
   45520:	1806d07a 	srli	r3,r3,1
   45524:	11400136 	bltu	r2,r5,4552c <__umodsi3+0x40>
   45528:	1145c83a 	sub	r2,r2,r5
   4552c:	280ad07a 	srli	r5,r5,1
   45530:	183ffb1e 	bne	r3,zero,45520 <__alt_data_end+0xfffd47e0>
   45534:	f800283a 	ret
   45538:	f800283a 	ret
   4553c:	00c00044 	movi	r3,1
   45540:	003ff706 	br	45520 <__alt_data_end+0xfffd47e0>

00045544 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   45544:	20000226 	beq	r4,zero,45550 <_exit+0xc>
    ALT_SIM_FAIL();
   45548:	002af070 	cmpltui	zero,zero,43969
   4554c:	00000106 	br	45554 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
   45550:	002af0b0 	cmpltui	zero,zero,43970
   45554:	003fff06 	br	45554 <__alt_data_end+0xfffd4814>
