
RLC_BoardGame.elf:     file format elf32-littlenios2
RLC_BoardGame.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000072b0 memsz 0x000072b0 flags r-x
    LOAD off    0x000082d0 vaddr 0x000472d0 paddr 0x00048d3c align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x0000a7a8 vaddr 0x0004a7a8 paddr 0x0004a7a8 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007094  000401c0  000401c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000007c  00047254  00047254  00008254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  000472d0  00048d3c  000082d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  0004a7a8  0004a7a8  0000a7a8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  0004a938  0004a938  00009d3c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00009d3c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a98  00000000  00000000  00009d60  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00018d14  00000000  00000000  0000a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000686d  00000000  00000000  0002350c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000072dc  00000000  00000000  00029d79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000182c  00000000  00000000  00031058  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002619  00000000  00000000  00032884  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004e36  00000000  00000000  00034e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00039cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006e0  00000000  00000000  00039ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003cc1a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003cc1d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003cc20  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003cc21  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0003cc22  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0003cc2b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0003cc34  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000f  00000000  00000000  0003cc3d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000026  00000000  00000000  0003cc4c  2**0
                  CONTENTS, READONLY
 26 .jdi          00004fbd  00000000  00000000  0003cc72  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00071941  00000000  00000000  00041c2f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401c0 l    d  .text	00000000 .text
00047254 l    d  .rodata	00000000 .rodata
000472d0 l    d  .rwdata	00000000 .rwdata
0004a7a8 l    d  .bss	00000000 .bss
0004a938 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../RLC_BoardGame_bsp//obj/HAL/src/crt0.o
000401f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 RLC_top_level.c
00000000 l    df *ABS*	00000000 alt_load.c
000417dc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00041bf8 l     F .text	00000038 alt_dev_reg
000472d0 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00041edc l     F .text	0000020c altera_avalon_jtag_uart_irq
000420e8 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00042868 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000429b0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000429dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00042e80 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00042fe0 l     F .text	00000050 alt_get_errno
00043030 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
000484d8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000458c4 l     F .text	00000008 __fp_unlock
000458d8 l     F .text	0000019c __sinit.part.1
00045a74 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00046b88 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00046c90 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00046d8c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00046f00 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00048d38 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00047104 l     F .text	00000050 alt_get_errno
00046864 g     F .text	00000054 _isatty_r
000418c8 g     F .text	0000007c alt_main
0004a7a8 g     O .bss	00000004 lastSerialIn
0004a838 g     O .bss	00000100 alt_irq
000468b8 g     F .text	00000060 _lseek_r
00048d3c g       *ABS*	00000000 __flash_rwdata_start
0004a938 g       *ABS*	00000000 __alt_heap_start
000465ec g     F .text	0000005c __sseek
00045c24 g     F .text	00000010 __sinit
000450d8 g     F .text	00000140 __swbuf_r
00045a7c g     F .text	00000078 __sfmoreglue
00046edc g     F .text	00000024 __malloc_unlock
000447c4 g     F .text	0000015c memmove
00045c0c g     F .text	00000018 _cleanup
00041bb4 g     F .text	00000044 alt_putstr
00040000 g     F .entry	0000000c __reset
000402c0 g     F .text	00000104 InitializeGlobal
00040020 g       *ABS*	00000000 __flash_exceptions_start
000405dc g     F .text	00000094 Button1Detect
00046808 g     F .text	0000005c _fstat_r
0004a800 g     O .bss	00000004 errno
00046568 g     F .text	00000008 __seofread
0004a7ec g     O .bss	00000004 alt_argv
00050d04 g       *ABS*	00000000 _gp
0004a7ac g     O .bss	00000004 player1Select
00048358 g     O .rwdata	00000180 alt_fd_list
0004a7b0 g     O .bss	00000004 whichPlayer
000434d0 g     F .text	00000090 alt_find_dev
0004467c g     F .text	00000148 memcpy
00040450 g     F .text	0000018c MainMenu
000458cc g     F .text	0000000c _cleanup_r
00042f64 g     F .text	0000007c alt_io_redirect
00047254 g       *ABS*	00000000 __DTOR_END__
000422e8 g     F .text	0000021c altera_avalon_jtag_uart_read
00046a70 g     F .text	00000064 .hidden __udivsi3
00046ce0 g     F .text	000000ac isatty
0004a80c g     O .bss	00000004 __malloc_top_pad
00043848 g     F .text	000004c8 __sfvwrite_r
00044fec g     F .text	00000054 _sbrk_r
00046918 g     F .text	00000060 _read_r
00048d14 g     O .rwdata	00000004 alt_max_fd
00046704 g     F .text	000000f0 _fclose_r
00045894 g     F .text	00000030 fflush
0004a808 g     O .bss	00000004 __malloc_max_sbrked_mem
0004a7b4 g     O .bss	00000004 menuFlag
0004a7b8 g     O .bss	00000004 gameFlag
00046ddc g     F .text	000000dc lseek
00048d28 g     O .rwdata	00000004 _global_impure_ptr
00044a88 g     F .text	00000564 _realloc_r
0004a938 g       *ABS*	00000000 __bss_end
00042d90 g     F .text	000000f0 alt_iic_isr_register
000433a4 g     F .text	00000108 alt_tick
00045c44 g     F .text	00000018 __fp_lock_all
00042d44 g     F .text	0000004c alt_ic_irq_enabled
00040f34 g     F .text	00000104 MovePlayer2
0004a7bc g     O .bss	00000004 dice
00043308 g     F .text	0000009c alt_alarm_stop
0004a7f4 g     O .bss	00000004 alt_irq_active
00040000 g       *ABS*	00000000 __alt_mem_onchip_mem
000400ec g     F .exceptions	000000d4 alt_irq_handler
00048330 g     O .rwdata	00000028 alt_dev_null
00042990 g     F .text	00000020 alt_dcache_flush_all
00048d3c g       *ABS*	00000000 __ram_rwdata_end
00048d0c g     O .rwdata	00000008 alt_dev_list
00047154 g     F .text	00000100 write
00044920 g     F .text	000000a0 _putc_r
000472d0 g       *ABS*	00000000 __ram_rodata_end
00046bd8 g     F .text	000000b8 fstat
00046ad4 g     F .text	00000058 .hidden __umodsi3
0004a938 g       *ABS*	00000000 end
00041e14 g     F .text	000000c8 altera_avalon_jtag_uart_init
00047254 g       *ABS*	00000000 __CTOR_LIST__
00070d40 g       *ABS*	00000000 __alt_stack_pointer
00040670 g     F .text	00000094 Button2Detect
00042504 g     F .text	00000224 altera_avalon_jtag_uart_write
00045c34 g     F .text	00000004 __sfp_lock_acquire
0004451c g     F .text	000000e4 memchr
00045d98 g     F .text	00000310 _free_r
00041944 g     F .text	0000022c alt_printf
0004549c g     F .text	00000180 __call_exitprocs
00048d30 g     O .rwdata	00000004 __malloc_sbrk_base
000401c0 g     F .text	0000003c _start
0004a7f8 g     O .bss	00000004 _alt_tick_rate
0004a7fc g     O .bss	00000004 _alt_nticks
0004a7c0 g     O .bss	00000004 player2Select
00046f50 g     F .text	00000104 read
00041c68 g     F .text	00000048 alt_sys_init
00045384 g     F .text	00000118 __register_exitproc
00040704 g     F .text	00000074 definePlayer2
00042190 g     F .text	00000068 altera_avalon_jtag_uart_close
00046b2c g     F .text	00000028 .hidden __mulsi3
000472d0 g       *ABS*	00000000 __ram_rwdata_start
00047254 g       *ABS*	00000000 __ram_rodata_start
0004a810 g     O .bss	00000028 __malloc_current_mallinfo
00041cb0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00043674 g     F .text	000000d4 alt_get_fd
000466b0 g     F .text	00000054 _close_r
00040e14 g     F .text	00000120 MovePlayer1
00044600 g     F .text	0000007c memcmp
00041d70 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0004a938 g       *ABS*	00000000 __alt_stack_base
00041dc0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00045230 g     F .text	00000154 __swsetup_r
00045af4 g     F .text	00000118 __sfp
000488fc g     O .rwdata	00000408 __malloc_av_
00045c40 g     F .text	00000004 __sinit_lock_release
00046514 g     F .text	00000054 __sread
00043560 g     F .text	00000114 alt_find_file
00042a2c g     F .text	000000a4 alt_dev_llist_insert
00046eb8 g     F .text	00000024 __malloc_lock
00047054 g     F .text	000000b0 sbrk
00045838 g     F .text	0000005c _fflush_r
0004a7c4 g     O .bss	00000004 diceRollCounter
0004a7a8 g       *ABS*	00000000 __bss_start
000463ec g     F .text	00000128 memset
000401fc g     F .text	000000c4 main
00041038 g     F .text	00000760 MovePlayer
0004a7f0 g     O .bss	00000004 alt_envp
0004a804 g     O .bss	00000004 __malloc_max_total_mem
00041d10 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00045218 g     F .text	00000018 __swbuf
00046648 g     F .text	00000008 __sclose
00070d40 g       *ABS*	00000000 __alt_heap_limit
000467f4 g     F .text	00000014 fclose
00043d10 g     F .text	0000080c _malloc_r
0004a7c8 g     O .bss	00000004 diceRollFlag
00048d18 g     O .rwdata	00000004 alt_errno
000460a8 g     F .text	000000c4 _fwalk
000449c0 g     F .text	000000c8 putc
00046978 g     F .text	00000084 .hidden __divsi3
00045c74 g     F .text	00000124 _malloc_trim_r
00047254 g       *ABS*	00000000 __CTOR_END__
00047254 g       *ABS*	00000000 __flash_rodata_start
00047254 g       *ABS*	00000000 __DTOR_LIST__
0004a7cc g     O .bss	00000004 waitOtherSocMoveFlag
00041c30 g     F .text	00000038 alt_irq_init
00043284 g     F .text	00000084 alt_release_fd
00043748 g     F .text	00000014 atexit
00046650 g     F .text	00000060 _write_r
00048d2c g     O .rwdata	00000004 _impure_ptr
0004a7e8 g     O .bss	00000004 alt_argc
0004561c g     F .text	0000021c __sflush_r
00042b30 g     F .text	00000060 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
00045c5c g     F .text	00000018 __fp_unlock_all
0004a7d0 g     O .bss	00000004 waitSocCounter
00041798 g     F .text	00000044 Delay
00048d04 g     O .rwdata	00000008 alt_fs_list
00040778 g     F .text	00000194 SingleSocGame
00040020 g       *ABS*	00000000 __ram_exceptions_start
0004090c g     F .text	00000508 DualSocGame
00042bb0 g     F .text	00000050 alt_ic_isr_register
000403c4 g     F .text	00000058 outputSerial
00048d3c g       *ABS*	00000000 _edata
0004a938 g       *ABS*	00000000 _end
000401c0 g       *ABS*	00000000 __ram_exceptions_end
000421f8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00043794 g     F .text	0000009c _fputs_r
00042ca0 g     F .text	000000a4 alt_ic_irq_disable
00046570 g     F .text	0000007c __swrite
00048d34 g     O .rwdata	00000004 __malloc_trim_threshold
000434ac g     F .text	00000024 altera_nios2_qsys_irq_init
0004375c g     F .text	00000038 exit
0004616c g     F .text	000000c4 _fwalk_reent
0004a7d4 g     O .bss	00000004 gameWaitFlag
000469fc g     F .text	00000074 .hidden __modsi3
00070d40 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00045c38 g     F .text	00000004 __sfp_lock_release
0004041c g     F .text	00000034 VerilogOut
0004a7d8 g     O .bss	00000004 lastButton2
00046b54 g     F .text	00000034 _exit
00042728 g     F .text	00000140 alt_alarm_start
00046230 g     F .text	000001bc __smakebuf_r
00045040 g     F .text	00000098 strlen
00043124 g     F .text	00000160 open
00041b70 g     F .text	00000044 alt_putchar
00042b90 g     F .text	00000020 alt_icache_flush_all
0004a7dc g     O .bss	00000004 lastButton1
00043830 g     F .text	00000018 fputs
00048d1c g     O .rwdata	00000004 alt_priority_mask
0004a7e0 g     O .bss	00000004 menu2Player
00042c00 g     F .text	000000a0 alt_ic_irq_enable
0004a7e4 g     O .bss	00000004 menu1Player
00048d20 g     O .rwdata	00000008 alt_alarm_list
00042ad0 g     F .text	00000060 _do_ctors
000428b8 g     F .text	000000d8 close
00041844 g     F .text	00000084 alt_load
00045c3c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08407014 	ori	at,at,448
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001426 	beq	r2,zero,4017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	00800174 	movhi	r2,5
   40130:	10aa0e04 	addi	r2,r2,-22472
   40134:	e0fffd17 	ldw	r3,-12(fp)
   40138:	180690fa 	slli	r3,r3,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	00800174 	movhi	r2,5
   40148:	10aa0e04 	addi	r2,r2,-22472
   4014c:	e13ffd17 	ldw	r4,-12(fp)
   40150:	200890fa 	slli	r4,r4,3
   40154:	1105883a 	add	r2,r2,r4
   40158:	10800104 	addi	r2,r2,4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	00000706 	br	40198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4017c:	e0bffc17 	ldw	r2,-16(fp)
   40180:	1085883a 	add	r2,r2,r2
   40184:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40188:	e0bffd17 	ldw	r2,-12(fp)
   4018c:	10800044 	addi	r2,r2,1
   40190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   40194:	003fe106 	br	4011c <__alt_data_end+0xfffcf3dc>

    active = alt_irq_pending ();
   40198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4019c:	e0bffb17 	ldw	r2,-20(fp)
   401a0:	103fdb1e 	bne	r2,zero,40110 <__alt_data_end+0xfffcf3d0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401a4:	0001883a 	nop
}
   401a8:	0001883a 	nop
   401ac:	e037883a 	mov	sp,fp
   401b0:	dfc00117 	ldw	ra,4(sp)
   401b4:	df000017 	ldw	fp,0(sp)
   401b8:	dec00204 	addi	sp,sp,8
   401bc:	f800283a 	ret

Disassembly of section .text:

000401c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401c0:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   401c4:	dec35014 	ori	sp,sp,3392
    movhi gp, %hi(_gp)
   401c8:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401cc:	d6834114 	ori	gp,gp,3332
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401d0:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   401d4:	10a9ea14 	ori	r2,r2,42920

    movhi r3, %hi(__bss_end)
   401d8:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   401dc:	18ea4e14 	ori	r3,r3,43320

    beq r2, r3, 1f
   401e0:	10c00326 	beq	r2,r3,401f0 <_start+0x30>

0:
    stw zero, (r2)
   401e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401ec:	10fffd36 	bltu	r2,r3,401e4 <__alt_data_end+0xfffcf4a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401f0:	00418440 	call	41844 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401f4:	00418c80 	call	418c8 <alt_main>

000401f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401f8:	003fff06 	br	401f8 <__alt_data_end+0xfffcf4b8>

000401fc <main>:
int lastSerialIn;
int waitOtherSocMoveFlag;
int waitSocCounter;

int main()
{
   401fc:	defffd04 	addi	sp,sp,-12
   40200:	dfc00215 	stw	ra,8(sp)
   40204:	df000115 	stw	fp,4(sp)
   40208:	df000104 	addi	fp,sp,4
	InitializeGlobal();
   4020c:	00402c00 	call	402c0 <InitializeGlobal>
	outputSerial(0x00);
   40210:	0009883a 	mov	r4,zero
   40214:	00403c40 	call	403c4 <outputSerial>
	VerilogOut(player1Select);
   40218:	00800174 	movhi	r2,5
   4021c:	10a9eb04 	addi	r2,r2,-22612
   40220:	10800017 	ldw	r2,0(r2)
   40224:	1009883a 	mov	r4,r2
   40228:	004041c0 	call	4041c <VerilogOut>
	Delay(4000000);
   4022c:	01000f74 	movhi	r4,61
   40230:	21024004 	addi	r4,r4,2304
   40234:	00417980 	call	41798 <Delay>
	while(1){ // Enter Main loop
		char serialIn;
		serialIn = IORD_ALTERA_AVALON_PIO_DATA(inputData);
   40238:	00800234 	movhi	r2,8
   4023c:	10842404 	addi	r2,r2,4240
   40240:	10800037 	ldwio	r2,0(r2)
   40244:	e0bfff05 	stb	r2,-4(fp)
		//alt_printf("%x\n", serialIn);

		if (menuFlag){ // menuLoop
   40248:	00800174 	movhi	r2,5
   4024c:	10a9ed04 	addi	r2,r2,-22604
   40250:	10800017 	ldw	r2,0(r2)
   40254:	10000b26 	beq	r2,zero,40284 <main+0x88>
			if (serialIn == 0b00000001){
   40258:	e0bfff07 	ldb	r2,-4(fp)
   4025c:	10800058 	cmpnei	r2,r2,1
   40260:	1000051e 	bne	r2,zero,40278 <main+0x7c>
				alt_printf("define P2\n");
   40264:	01000134 	movhi	r4,4
   40268:	211c9504 	addi	r4,r4,29268
   4026c:	00419440 	call	41944 <alt_printf>
				definePlayer2();
   40270:	00407040 	call	40704 <definePlayer2>
   40274:	00000306 	br	40284 <main+0x88>
			}
			else {
				MainMenu(serialIn);
   40278:	e0bfff07 	ldb	r2,-4(fp)
   4027c:	1009883a 	mov	r4,r2
   40280:	00404500 	call	40450 <MainMenu>
			}
		}
		if (gameFlag == 1)
   40284:	00800174 	movhi	r2,5
   40288:	10a9ee04 	addi	r2,r2,-22600
   4028c:	10800017 	ldw	r2,0(r2)
   40290:	10800058 	cmpnei	r2,r2,1
   40294:	1000011e 	bne	r2,zero,4029c <main+0xa0>
			SingleSocGame();
   40298:	00407780 	call	40778 <SingleSocGame>
		if (gameFlag > 1)
   4029c:	00800174 	movhi	r2,5
   402a0:	10a9ee04 	addi	r2,r2,-22600
   402a4:	10800017 	ldw	r2,0(r2)
   402a8:	10800090 	cmplti	r2,r2,2
   402ac:	103fe21e 	bne	r2,zero,40238 <__alt_data_end+0xfffcf4f8>
			DualSocGame(serialIn);
   402b0:	e0bfff07 	ldb	r2,-4(fp)
   402b4:	1009883a 	mov	r4,r2
   402b8:	004090c0 	call	4090c <DualSocGame>
	}
   402bc:	003fde06 	br	40238 <__alt_data_end+0xfffcf4f8>

000402c0 <InitializeGlobal>:
}

void InitializeGlobal(){ // Initialize global variables and states
   402c0:	deffff04 	addi	sp,sp,-4
   402c4:	df000015 	stw	fp,0(sp)
   402c8:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(outputClockEn, 0b0);
   402cc:	0007883a 	mov	r3,zero
   402d0:	00800234 	movhi	r2,8
   402d4:	10841404 	addi	r2,r2,4176
   402d8:	10c00035 	stwio	r3,0(r2)
	menuFlag = 1;
   402dc:	00800174 	movhi	r2,5
   402e0:	10a9ed04 	addi	r2,r2,-22604
   402e4:	00c00044 	movi	r3,1
   402e8:	10c00015 	stw	r3,0(r2)
	gameFlag = 0;
   402ec:	00800174 	movhi	r2,5
   402f0:	10a9ee04 	addi	r2,r2,-22600
   402f4:	10000015 	stw	zero,0(r2)
	player1Select = 0b00;
   402f8:	00800174 	movhi	r2,5
   402fc:	10a9eb04 	addi	r2,r2,-22612
   40300:	10000015 	stw	zero,0(r2)
	player2Select = 0b10;
   40304:	00800174 	movhi	r2,5
   40308:	10a9f004 	addi	r2,r2,-22592
   4030c:	00c00084 	movi	r3,2
   40310:	10c00015 	stw	r3,0(r2)
	menu1Player = 1;
   40314:	00800174 	movhi	r2,5
   40318:	10a9f904 	addi	r2,r2,-22556
   4031c:	00c00044 	movi	r3,1
   40320:	10c00015 	stw	r3,0(r2)
	menu2Player = 0;
   40324:	00800174 	movhi	r2,5
   40328:	10a9f804 	addi	r2,r2,-22560
   4032c:	10000015 	stw	zero,0(r2)
	lastButton1 = 0;
   40330:	00800174 	movhi	r2,5
   40334:	10a9f704 	addi	r2,r2,-22564
   40338:	10000015 	stw	zero,0(r2)
	lastButton2 = 0;
   4033c:	00800174 	movhi	r2,5
   40340:	10a9f604 	addi	r2,r2,-22568
   40344:	10000015 	stw	zero,0(r2)
	gameWaitFlag = 1;
   40348:	00800174 	movhi	r2,5
   4034c:	10a9f504 	addi	r2,r2,-22572
   40350:	00c00044 	movi	r3,1
   40354:	10c00015 	stw	r3,0(r2)
	diceRollFlag = 0;
   40358:	00800174 	movhi	r2,5
   4035c:	10a9f204 	addi	r2,r2,-22584
   40360:	10000015 	stw	zero,0(r2)
	diceRollCounter = 0;
   40364:	00800174 	movhi	r2,5
   40368:	10a9f104 	addi	r2,r2,-22588
   4036c:	10000015 	stw	zero,0(r2)
	whichPlayer = 1;
   40370:	00800174 	movhi	r2,5
   40374:	10a9ec04 	addi	r2,r2,-22608
   40378:	00c00044 	movi	r3,1
   4037c:	10c00015 	stw	r3,0(r2)
	lastSerialIn = 0;
   40380:	00800174 	movhi	r2,5
   40384:	10a9ea04 	addi	r2,r2,-22616
   40388:	10000015 	stw	zero,0(r2)
	dice = 0;
   4038c:	00800174 	movhi	r2,5
   40390:	10a9ef04 	addi	r2,r2,-22596
   40394:	10000015 	stw	zero,0(r2)
	waitOtherSocMoveFlag = 0;
   40398:	00800174 	movhi	r2,5
   4039c:	10a9f304 	addi	r2,r2,-22580
   403a0:	10000015 	stw	zero,0(r2)
	waitSocCounter = 0;
   403a4:	00800174 	movhi	r2,5
   403a8:	10a9f404 	addi	r2,r2,-22576
   403ac:	10000015 	stw	zero,0(r2)
}
   403b0:	0001883a 	nop
   403b4:	e037883a 	mov	sp,fp
   403b8:	df000017 	ldw	fp,0(sp)
   403bc:	dec00104 	addi	sp,sp,4
   403c0:	f800283a 	ret

000403c4 <outputSerial>:

void outputSerial(char data){ // Send out Data
   403c4:	defffe04 	addi	sp,sp,-8
   403c8:	df000115 	stw	fp,4(sp)
   403cc:	df000104 	addi	fp,sp,4
   403d0:	2005883a 	mov	r2,r4
   403d4:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(outputData, data);
   403d8:	e0ffff07 	ldb	r3,-4(fp)
   403dc:	00800234 	movhi	r2,8
   403e0:	10841c04 	addi	r2,r2,4208
   403e4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(outputClockEn, 0b1);
   403e8:	00c00044 	movi	r3,1
   403ec:	00800234 	movhi	r2,8
   403f0:	10841404 	addi	r2,r2,4176
   403f4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(outputClockEn, 0b0);
   403f8:	0007883a 	mov	r3,zero
   403fc:	00800234 	movhi	r2,8
   40400:	10841404 	addi	r2,r2,4176
   40404:	10c00035 	stwio	r3,0(r2)
}
   40408:	0001883a 	nop
   4040c:	e037883a 	mov	sp,fp
   40410:	df000017 	ldw	fp,0(sp)
   40414:	dec00104 	addi	sp,sp,4
   40418:	f800283a 	ret

0004041c <VerilogOut>:

void VerilogOut(int output){
   4041c:	defffe04 	addi	sp,sp,-8
   40420:	df000115 	stw	fp,4(sp)
   40424:	df000104 	addi	fp,sp,4
   40428:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(verilogOutPointer, output);
   4042c:	00800234 	movhi	r2,8
   40430:	10840c04 	addi	r2,r2,4144
   40434:	e0ffff17 	ldw	r3,-4(fp)
   40438:	10c00035 	stwio	r3,0(r2)
}
   4043c:	0001883a 	nop
   40440:	e037883a 	mov	sp,fp
   40444:	df000017 	ldw	fp,0(sp)
   40448:	dec00104 	addi	sp,sp,4
   4044c:	f800283a 	ret

00040450 <MainMenu>:

void MainMenu(char serialIn){
   40450:	defffc04 	addi	sp,sp,-16
   40454:	dfc00315 	stw	ra,12(sp)
   40458:	df000215 	stw	fp,8(sp)
   4045c:	df000204 	addi	fp,sp,8
   40460:	2005883a 	mov	r2,r4
   40464:	e0bfff05 	stb	r2,-4(fp)
	int buttonPush;

	if (menu1Player){
   40468:	00800174 	movhi	r2,5
   4046c:	10a9f904 	addi	r2,r2,-22556
   40470:	10800017 	ldw	r2,0(r2)
   40474:	10002526 	beq	r2,zero,4050c <MainMenu+0xbc>
			buttonPush = 0;
   40478:	e03ffe15 	stw	zero,-8(fp)
			VerilogOut(player1Select);
   4047c:	00800174 	movhi	r2,5
   40480:	10a9eb04 	addi	r2,r2,-22612
   40484:	10800017 	ldw	r2,0(r2)
   40488:	1009883a 	mov	r4,r2
   4048c:	004041c0 	call	4041c <VerilogOut>
			buttonPush = Button2Detect();
   40490:	00406700 	call	40670 <Button2Detect>
   40494:	e0bffe15 	stw	r2,-8(fp)
			if (buttonPush || serialIn == 0b00000010){ // Change menu
   40498:	e0bffe17 	ldw	r2,-8(fp)
   4049c:	1000031e 	bne	r2,zero,404ac <MainMenu+0x5c>
   404a0:	e0bfff07 	ldb	r2,-4(fp)
   404a4:	10800098 	cmpnei	r2,r2,2
   404a8:	10000a1e 	bne	r2,zero,404d4 <MainMenu+0x84>
				//alt_printf("Output 0b010\n");
				if(serialIn == 0b00000010){
   404ac:	e0bfff07 	ldb	r2,-4(fp)
   404b0:	10800098 	cmpnei	r2,r2,2
   404b4:	1000031e 	bne	r2,zero,404c4 <MainMenu+0x74>
					//alt_printf("Switch to 2p\n");
					menu1Player = 0;
   404b8:	00800174 	movhi	r2,5
   404bc:	10a9f904 	addi	r2,r2,-22556
   404c0:	10000015 	stw	zero,0(r2)
				}
				//menu2Player = 1;
				//menu1Player = 0;
				outputSerial(0b00000010);
   404c4:	01000084 	movi	r4,2
   404c8:	00403c40 	call	403c4 <outputSerial>
				Delay(3000);
   404cc:	0102ee04 	movi	r4,3000
   404d0:	00417980 	call	41798 <Delay>
				//VerilogOut(player2Select);
			}

			buttonPush = Button1Detect();
   404d4:	00405dc0 	call	405dc <Button1Detect>
   404d8:	e0bffe15 	stw	r2,-8(fp)
			if (buttonPush){ // Confirm Game
   404dc:	e0bffe17 	ldw	r2,-8(fp)
   404e0:	10003826 	beq	r2,zero,405c4 <MainMenu+0x174>
				menuFlag = 0;
   404e4:	00800174 	movhi	r2,5
   404e8:	10a9ed04 	addi	r2,r2,-22604
   404ec:	10000015 	stw	zero,0(r2)
				gameFlag = 1;
   404f0:	00800174 	movhi	r2,5
   404f4:	10a9ee04 	addi	r2,r2,-22600
   404f8:	00c00044 	movi	r3,1
   404fc:	10c00015 	stw	r3,0(r2)
				//outputSerial(0b00000001);
				VerilogOut(0b01);
   40500:	01000044 	movi	r4,1
   40504:	004041c0 	call	4041c <VerilogOut>
				gameFlag = 2;
				outputSerial(0b00000001);
				VerilogOut(0b01);
			}
		}
}
   40508:	00002e06 	br	405c4 <MainMenu+0x174>
				gameFlag = 1;
				//outputSerial(0b00000001);
				VerilogOut(0b01);
			}
		}
	else if (menu1Player == 0){
   4050c:	00800174 	movhi	r2,5
   40510:	10a9f904 	addi	r2,r2,-22556
   40514:	10800017 	ldw	r2,0(r2)
   40518:	10002a1e 	bne	r2,zero,405c4 <MainMenu+0x174>
			buttonPush = 0;
   4051c:	e03ffe15 	stw	zero,-8(fp)
			menu1Player = 0;
   40520:	00800174 	movhi	r2,5
   40524:	10a9f904 	addi	r2,r2,-22556
   40528:	10000015 	stw	zero,0(r2)
			VerilogOut(player2Select);
   4052c:	00800174 	movhi	r2,5
   40530:	10a9f004 	addi	r2,r2,-22592
   40534:	10800017 	ldw	r2,0(r2)
   40538:	1009883a 	mov	r4,r2
   4053c:	004041c0 	call	4041c <VerilogOut>
			buttonPush = Button2Detect();
   40540:	00406700 	call	40670 <Button2Detect>
   40544:	e0bffe15 	stw	r2,-8(fp)
			if (buttonPush || serialIn == 0b00000000){ // Change menu
   40548:	e0bffe17 	ldw	r2,-8(fp)
   4054c:	1000021e 	bne	r2,zero,40558 <MainMenu+0x108>
   40550:	e0bfff07 	ldb	r2,-4(fp)
   40554:	1000081e 	bne	r2,zero,40578 <MainMenu+0x128>
				menu1Player = 1;
   40558:	00800174 	movhi	r2,5
   4055c:	10a9f904 	addi	r2,r2,-22556
   40560:	00c00044 	movi	r3,1
   40564:	10c00015 	stw	r3,0(r2)
				outputSerial(0b00000000);
   40568:	0009883a 	mov	r4,zero
   4056c:	00403c40 	call	403c4 <outputSerial>
				Delay(3000);
   40570:	0102ee04 	movi	r4,3000
   40574:	00417980 	call	41798 <Delay>
				//VerilogOut(player1Select);
			}

			buttonPush = Button1Detect();
   40578:	00405dc0 	call	405dc <Button1Detect>
   4057c:	e0bffe15 	stw	r2,-8(fp)
			if (buttonPush){ // Confirm Game
   40580:	e0bffe17 	ldw	r2,-8(fp)
   40584:	10000f26 	beq	r2,zero,405c4 <MainMenu+0x174>
				whichPlayer = 1;
   40588:	00800174 	movhi	r2,5
   4058c:	10a9ec04 	addi	r2,r2,-22608
   40590:	00c00044 	movi	r3,1
   40594:	10c00015 	stw	r3,0(r2)
				menuFlag = 0;
   40598:	00800174 	movhi	r2,5
   4059c:	10a9ed04 	addi	r2,r2,-22604
   405a0:	10000015 	stw	zero,0(r2)
				gameFlag = 2;
   405a4:	00800174 	movhi	r2,5
   405a8:	10a9ee04 	addi	r2,r2,-22600
   405ac:	00c00084 	movi	r3,2
   405b0:	10c00015 	stw	r3,0(r2)
				outputSerial(0b00000001);
   405b4:	01000044 	movi	r4,1
   405b8:	00403c40 	call	403c4 <outputSerial>
				VerilogOut(0b01);
   405bc:	01000044 	movi	r4,1
   405c0:	004041c0 	call	4041c <VerilogOut>
			}
		}
}
   405c4:	0001883a 	nop
   405c8:	e037883a 	mov	sp,fp
   405cc:	dfc00117 	ldw	ra,4(sp)
   405d0:	df000017 	ldw	fp,0(sp)
   405d4:	dec00204 	addi	sp,sp,8
   405d8:	f800283a 	ret

000405dc <Button1Detect>:

int Button1Detect(){
   405dc:	defffd04 	addi	sp,sp,-12
   405e0:	df000215 	stw	fp,8(sp)
   405e4:	df000204 	addi	fp,sp,8
	int button;
	int buttonOut;
	buttonOut = 0;
   405e8:	e03fff15 	stw	zero,-4(fp)
	button = IORD_ALTERA_AVALON_PIO_DATA(KEY_321_in);
   405ec:	00800234 	movhi	r2,8
   405f0:	10842004 	addi	r2,r2,4224
   405f4:	10800037 	ldwio	r2,0(r2)
   405f8:	e0bffe15 	stw	r2,-8(fp)
	button = button & 0b100;
   405fc:	e0bffe17 	ldw	r2,-8(fp)
   40600:	1080010c 	andi	r2,r2,4
   40604:	e0bffe15 	stw	r2,-8(fp)
	if (button || lastButton1){
   40608:	e0bffe17 	ldw	r2,-8(fp)
   4060c:	1000041e 	bne	r2,zero,40620 <Button1Detect+0x44>
   40610:	00800174 	movhi	r2,5
   40614:	10a9f704 	addi	r2,r2,-22564
   40618:	10800017 	ldw	r2,0(r2)
   4061c:	10000b26 	beq	r2,zero,4064c <Button1Detect+0x70>
		button = IORD_ALTERA_AVALON_PIO_DATA(KEY_321_in);
   40620:	00800234 	movhi	r2,8
   40624:	10842004 	addi	r2,r2,4224
   40628:	10800037 	ldwio	r2,0(r2)
   4062c:	e0bffe15 	stw	r2,-8(fp)
		button = button & 0b100;
   40630:	e0bffe17 	ldw	r2,-8(fp)
   40634:	1080010c 	andi	r2,r2,4
   40638:	e0bffe15 	stw	r2,-8(fp)
		if (!button){
   4063c:	e0bffe17 	ldw	r2,-8(fp)
   40640:	1000021e 	bne	r2,zero,4064c <Button1Detect+0x70>
			buttonOut = 1;
   40644:	00800044 	movi	r2,1
   40648:	e0bfff15 	stw	r2,-4(fp)
		}
	}
	lastButton1 = button;
   4064c:	00800174 	movhi	r2,5
   40650:	10a9f704 	addi	r2,r2,-22564
   40654:	e0fffe17 	ldw	r3,-8(fp)
   40658:	10c00015 	stw	r3,0(r2)
	return buttonOut;
   4065c:	e0bfff17 	ldw	r2,-4(fp)
}
   40660:	e037883a 	mov	sp,fp
   40664:	df000017 	ldw	fp,0(sp)
   40668:	dec00104 	addi	sp,sp,4
   4066c:	f800283a 	ret

00040670 <Button2Detect>:

int Button2Detect(){
   40670:	defffd04 	addi	sp,sp,-12
   40674:	df000215 	stw	fp,8(sp)
   40678:	df000204 	addi	fp,sp,8
	int button;
	int buttonOut;
	buttonOut = 0;
   4067c:	e03fff15 	stw	zero,-4(fp)
	button = IORD_ALTERA_AVALON_PIO_DATA(KEY_321_in);
   40680:	00800234 	movhi	r2,8
   40684:	10842004 	addi	r2,r2,4224
   40688:	10800037 	ldwio	r2,0(r2)
   4068c:	e0bffe15 	stw	r2,-8(fp)
	button = button & 0b010;
   40690:	e0bffe17 	ldw	r2,-8(fp)
   40694:	1080008c 	andi	r2,r2,2
   40698:	e0bffe15 	stw	r2,-8(fp)
	if (button || lastButton2){
   4069c:	e0bffe17 	ldw	r2,-8(fp)
   406a0:	1000041e 	bne	r2,zero,406b4 <Button2Detect+0x44>
   406a4:	00800174 	movhi	r2,5
   406a8:	10a9f604 	addi	r2,r2,-22568
   406ac:	10800017 	ldw	r2,0(r2)
   406b0:	10000b26 	beq	r2,zero,406e0 <Button2Detect+0x70>
		button = IORD_ALTERA_AVALON_PIO_DATA(KEY_321_in);
   406b4:	00800234 	movhi	r2,8
   406b8:	10842004 	addi	r2,r2,4224
   406bc:	10800037 	ldwio	r2,0(r2)
   406c0:	e0bffe15 	stw	r2,-8(fp)
		button = button & 0b010;
   406c4:	e0bffe17 	ldw	r2,-8(fp)
   406c8:	1080008c 	andi	r2,r2,2
   406cc:	e0bffe15 	stw	r2,-8(fp)
		if (!button){
   406d0:	e0bffe17 	ldw	r2,-8(fp)
   406d4:	1000021e 	bne	r2,zero,406e0 <Button2Detect+0x70>
			buttonOut = 1;
   406d8:	00800044 	movi	r2,1
   406dc:	e0bfff15 	stw	r2,-4(fp)
		}
	}
	lastButton2 = button;
   406e0:	00800174 	movhi	r2,5
   406e4:	10a9f604 	addi	r2,r2,-22568
   406e8:	e0fffe17 	ldw	r3,-8(fp)
   406ec:	10c00015 	stw	r3,0(r2)
	return buttonOut;
   406f0:	e0bfff17 	ldw	r2,-4(fp)
}
   406f4:	e037883a 	mov	sp,fp
   406f8:	df000017 	ldw	fp,0(sp)
   406fc:	dec00104 	addi	sp,sp,4
   40700:	f800283a 	ret

00040704 <definePlayer2>:

void definePlayer2(){
   40704:	defffe04 	addi	sp,sp,-8
   40708:	dfc00115 	stw	ra,4(sp)
   4070c:	df000015 	stw	fp,0(sp)
   40710:	d839883a 	mov	fp,sp
	whichPlayer = 1;
   40714:	00800174 	movhi	r2,5
   40718:	10a9ec04 	addi	r2,r2,-22608
   4071c:	00c00044 	movi	r3,1
   40720:	10c00015 	stw	r3,0(r2)
	waitOtherSocMoveFlag = 1;
   40724:	00800174 	movhi	r2,5
   40728:	10a9f304 	addi	r2,r2,-22580
   4072c:	00c00044 	movi	r3,1
   40730:	10c00015 	stw	r3,0(r2)
	outputSerial(0b01);
   40734:	01000044 	movi	r4,1
   40738:	00403c40 	call	403c4 <outputSerial>
	VerilogOut(0b01);
   4073c:	01000044 	movi	r4,1
   40740:	004041c0 	call	4041c <VerilogOut>
	menuFlag = 0;
   40744:	00800174 	movhi	r2,5
   40748:	10a9ed04 	addi	r2,r2,-22604
   4074c:	10000015 	stw	zero,0(r2)
	gameFlag = 3;
   40750:	00800174 	movhi	r2,5
   40754:	10a9ee04 	addi	r2,r2,-22600
   40758:	00c000c4 	movi	r3,3
   4075c:	10c00015 	stw	r3,0(r2)
}
   40760:	0001883a 	nop
   40764:	e037883a 	mov	sp,fp
   40768:	dfc00117 	ldw	ra,4(sp)
   4076c:	df000017 	ldw	fp,0(sp)
   40770:	dec00204 	addi	sp,sp,8
   40774:	f800283a 	ret

00040778 <SingleSocGame>:

void SingleSocGame(){
   40778:	defff904 	addi	sp,sp,-28
   4077c:	dfc00615 	stw	ra,24(sp)
   40780:	df000515 	stw	fp,20(sp)
   40784:	df000504 	addi	fp,sp,20
	if (gameWaitFlag == 1){
   40788:	00800174 	movhi	r2,5
   4078c:	10a9f504 	addi	r2,r2,-22572
   40790:	10800017 	ldw	r2,0(r2)
   40794:	10800058 	cmpnei	r2,r2,1
   40798:	10000c1e 	bne	r2,zero,407cc <SingleSocGame+0x54>
		gameWaitFlag = 0;
   4079c:	00800174 	movhi	r2,5
   407a0:	10a9f504 	addi	r2,r2,-22572
   407a4:	10000015 	stw	zero,0(r2)
		int i;
		for (i=0; i < 9200000; i++){}
   407a8:	e03ffb15 	stw	zero,-20(fp)
   407ac:	00000306 	br	407bc <SingleSocGame+0x44>
   407b0:	e0bffb17 	ldw	r2,-20(fp)
   407b4:	10800044 	addi	r2,r2,1
   407b8:	e0bffb15 	stw	r2,-20(fp)
   407bc:	e0fffb17 	ldw	r3,-20(fp)
   407c0:	00802334 	movhi	r2,140
   407c4:	10985fc4 	addi	r2,r2,24959
   407c8:	10fff90e 	bge	r2,r3,407b0 <__alt_data_end+0xfffcfa70>
	}
	int button1;
	int button2;
	int diceRollValue;
	int serialOutEnable;
	serialOutEnable = 0;
   407cc:	e03ffd15 	stw	zero,-12(fp)
	diceRollValue = 0;
   407d0:	e03ffc15 	stw	zero,-16(fp)
	button1 = 0;
   407d4:	e03ffe15 	stw	zero,-8(fp)
	button2 = 0;
   407d8:	e03fff15 	stw	zero,-4(fp)
	button1 = Button1Detect();
   407dc:	00405dc0 	call	405dc <Button1Detect>
   407e0:	e0bffe15 	stw	r2,-8(fp)
	if (button1 && !diceRollFlag){
   407e4:	e0bffe17 	ldw	r2,-8(fp)
   407e8:	10000826 	beq	r2,zero,4080c <SingleSocGame+0x94>
   407ec:	00800174 	movhi	r2,5
   407f0:	10a9f204 	addi	r2,r2,-22584
   407f4:	10800017 	ldw	r2,0(r2)
   407f8:	1000041e 	bne	r2,zero,4080c <SingleSocGame+0x94>
		diceRollFlag = 1;
   407fc:	00800174 	movhi	r2,5
   40800:	10a9f204 	addi	r2,r2,-22584
   40804:	00c00044 	movi	r3,1
   40808:	10c00015 	stw	r3,0(r2)
		//alt_putstr("Test!\n");
	}
	button2 = Button2Detect();
   4080c:	00406700 	call	40670 <Button2Detect>
   40810:	e0bfff15 	stw	r2,-4(fp)
	if (diceRollFlag){
   40814:	00800174 	movhi	r2,5
   40818:	10a9f204 	addi	r2,r2,-22584
   4081c:	10800017 	ldw	r2,0(r2)
   40820:	10000726 	beq	r2,zero,40840 <SingleSocGame+0xc8>
		diceRollCounter ++;
   40824:	00800174 	movhi	r2,5
   40828:	10a9f104 	addi	r2,r2,-22588
   4082c:	10800017 	ldw	r2,0(r2)
   40830:	10c00044 	addi	r3,r2,1
   40834:	00800174 	movhi	r2,5
   40838:	10a9f104 	addi	r2,r2,-22588
   4083c:	10c00015 	stw	r3,0(r2)
	}
	if (button2 && diceRollFlag){
   40840:	e0bfff17 	ldw	r2,-4(fp)
   40844:	10000d26 	beq	r2,zero,4087c <SingleSocGame+0x104>
   40848:	00800174 	movhi	r2,5
   4084c:	10a9f204 	addi	r2,r2,-22584
   40850:	10800017 	ldw	r2,0(r2)
   40854:	10000926 	beq	r2,zero,4087c <SingleSocGame+0x104>
		diceRollFlag = 0;
   40858:	00800174 	movhi	r2,5
   4085c:	10a9f204 	addi	r2,r2,-22584
   40860:	10000015 	stw	zero,0(r2)
		diceRollValue = (diceRollCounter % 4) + 1;
   40864:	00800174 	movhi	r2,5
   40868:	10a9f104 	addi	r2,r2,-22588
   4086c:	10800017 	ldw	r2,0(r2)
   40870:	108000cc 	andi	r2,r2,3
   40874:	10800044 	addi	r2,r2,1
   40878:	e0bffc15 	stw	r2,-16(fp)
	}
	if(whichPlayer == 1 && diceRollValue > 0){
   4087c:	00800174 	movhi	r2,5
   40880:	10a9ec04 	addi	r2,r2,-22608
   40884:	10800017 	ldw	r2,0(r2)
   40888:	10800058 	cmpnei	r2,r2,1
   4088c:	10000b1e 	bne	r2,zero,408bc <SingleSocGame+0x144>
   40890:	e0bffc17 	ldw	r2,-16(fp)
   40894:	0080090e 	bge	zero,r2,408bc <SingleSocGame+0x144>
		MovePlayer1(diceRollValue, serialOutEnable);
   40898:	e17ffd17 	ldw	r5,-12(fp)
   4089c:	e13ffc17 	ldw	r4,-16(fp)
   408a0:	0040e140 	call	40e14 <MovePlayer1>
		whichPlayer = 2;
   408a4:	00800174 	movhi	r2,5
   408a8:	10a9ec04 	addi	r2,r2,-22608
   408ac:	00c00084 	movi	r3,2
   408b0:	10c00015 	stw	r3,0(r2)
	}
	if (button2 && diceRollFlag){
		diceRollFlag = 0;
		diceRollValue = (diceRollCounter % 4) + 1;
	}
	if(whichPlayer == 1 && diceRollValue > 0){
   408b4:	0001883a 	nop
	}
	else if(whichPlayer == 2 && diceRollValue > 0){
		MovePlayer2(diceRollValue, serialOutEnable);
		whichPlayer = 1;
	}
}
   408b8:	00000e06 	br	408f4 <SingleSocGame+0x17c>
	}
	if(whichPlayer == 1 && diceRollValue > 0){
		MovePlayer1(diceRollValue, serialOutEnable);
		whichPlayer = 2;
	}
	else if(whichPlayer == 2 && diceRollValue > 0){
   408bc:	00800174 	movhi	r2,5
   408c0:	10a9ec04 	addi	r2,r2,-22608
   408c4:	10800017 	ldw	r2,0(r2)
   408c8:	10800098 	cmpnei	r2,r2,2
   408cc:	1000091e 	bne	r2,zero,408f4 <SingleSocGame+0x17c>
   408d0:	e0bffc17 	ldw	r2,-16(fp)
   408d4:	0080070e 	bge	zero,r2,408f4 <SingleSocGame+0x17c>
		MovePlayer2(diceRollValue, serialOutEnable);
   408d8:	e17ffd17 	ldw	r5,-12(fp)
   408dc:	e13ffc17 	ldw	r4,-16(fp)
   408e0:	0040f340 	call	40f34 <MovePlayer2>
		whichPlayer = 1;
   408e4:	00800174 	movhi	r2,5
   408e8:	10a9ec04 	addi	r2,r2,-22608
   408ec:	00c00044 	movi	r3,1
   408f0:	10c00015 	stw	r3,0(r2)
	}
}
   408f4:	0001883a 	nop
   408f8:	e037883a 	mov	sp,fp
   408fc:	dfc00117 	ldw	ra,4(sp)
   40900:	df000017 	ldw	fp,0(sp)
   40904:	dec00204 	addi	sp,sp,8
   40908:	f800283a 	ret

0004090c <DualSocGame>:

void DualSocGame(int serialIn){
   4090c:	defff704 	addi	sp,sp,-36
   40910:	dfc00815 	stw	ra,32(sp)
   40914:	df000715 	stw	fp,28(sp)
   40918:	df000704 	addi	fp,sp,28
   4091c:	e13fff15 	stw	r4,-4(fp)
	if (gameWaitFlag == 1){
   40920:	00800174 	movhi	r2,5
   40924:	10a9f504 	addi	r2,r2,-22572
   40928:	10800017 	ldw	r2,0(r2)
   4092c:	10800058 	cmpnei	r2,r2,1
   40930:	1000311e 	bne	r2,zero,409f8 <DualSocGame+0xec>
		whichPlayer = 1;
   40934:	00800174 	movhi	r2,5
   40938:	10a9ec04 	addi	r2,r2,-22608
   4093c:	00c00044 	movi	r3,1
   40940:	10c00015 	stw	r3,0(r2)
		gameWaitFlag = 0;
   40944:	00800174 	movhi	r2,5
   40948:	10a9f504 	addi	r2,r2,-22572
   4094c:	10000015 	stw	zero,0(r2)
		waitOtherSocMoveFlag = 0;
   40950:	00800174 	movhi	r2,5
   40954:	10a9f304 	addi	r2,r2,-22580
   40958:	10000015 	stw	zero,0(r2)
		alt_printf("%x\n", gameFlag);
   4095c:	00800174 	movhi	r2,5
   40960:	10a9ee04 	addi	r2,r2,-22600
   40964:	10800017 	ldw	r2,0(r2)
   40968:	100b883a 	mov	r5,r2
   4096c:	01000134 	movhi	r4,4
   40970:	211c9804 	addi	r4,r4,29280
   40974:	00419440 	call	41944 <alt_printf>
		alt_printf("%x\n", serialIn);
   40978:	e17fff17 	ldw	r5,-4(fp)
   4097c:	01000134 	movhi	r4,4
   40980:	211c9804 	addi	r4,r4,29280
   40984:	00419440 	call	41944 <alt_printf>
		int i;
		for (i=0; i < 9200000; i++){}
   40988:	e03ff915 	stw	zero,-28(fp)
   4098c:	00000306 	br	4099c <DualSocGame+0x90>
   40990:	e0bff917 	ldw	r2,-28(fp)
   40994:	10800044 	addi	r2,r2,1
   40998:	e0bff915 	stw	r2,-28(fp)
   4099c:	e0fff917 	ldw	r3,-28(fp)
   409a0:	00802334 	movhi	r2,140
   409a4:	10985fc4 	addi	r2,r2,24959
   409a8:	10fff90e 	bge	r2,r3,40990 <__alt_data_end+0xfffcfc50>
		serialIn = IORD_ALTERA_AVALON_PIO_DATA(inputData);
   409ac:	00800234 	movhi	r2,8
   409b0:	10842404 	addi	r2,r2,4240
   409b4:	10800037 	ldwio	r2,0(r2)
   409b8:	e0bfff15 	stw	r2,-4(fp)
		lastSerialIn = serialIn;
   409bc:	00800174 	movhi	r2,5
   409c0:	10a9ea04 	addi	r2,r2,-22616
   409c4:	e0ffff17 	ldw	r3,-4(fp)
   409c8:	10c00015 	stw	r3,0(r2)
		alt_printf("%x\n", serialIn);
   409cc:	e17fff17 	ldw	r5,-4(fp)
   409d0:	01000134 	movhi	r4,4
   409d4:	211c9804 	addi	r4,r4,29280
   409d8:	00419440 	call	41944 <alt_printf>
		alt_printf("%x\n", lastSerialIn);
   409dc:	00800174 	movhi	r2,5
   409e0:	10a9ea04 	addi	r2,r2,-22616
   409e4:	10800017 	ldw	r2,0(r2)
   409e8:	100b883a 	mov	r5,r2
   409ec:	01000134 	movhi	r4,4
   409f0:	211c9804 	addi	r4,r4,29280
   409f4:	00419440 	call	41944 <alt_printf>
	int button2;
	int diceRollValue;
	int serialOutEnable;
	int verilogData;
	int serialData;
	diceRollValue = 0;
   409f8:	e03ffa15 	stw	zero,-24(fp)
	if (lastSerialIn != serialIn && waitOtherSocMoveFlag == 0){
   409fc:	00800174 	movhi	r2,5
   40a00:	10a9ea04 	addi	r2,r2,-22616
   40a04:	10c00017 	ldw	r3,0(r2)
   40a08:	e0bfff17 	ldw	r2,-4(fp)
   40a0c:	18801926 	beq	r3,r2,40a74 <DualSocGame+0x168>
   40a10:	00800174 	movhi	r2,5
   40a14:	10a9f304 	addi	r2,r2,-22580
   40a18:	10800017 	ldw	r2,0(r2)
   40a1c:	1000151e 	bne	r2,zero,40a74 <DualSocGame+0x168>
			alt_printf("%x\n", serialIn);
   40a20:	e17fff17 	ldw	r5,-4(fp)
   40a24:	01000134 	movhi	r4,4
   40a28:	211c9804 	addi	r4,r4,29280
   40a2c:	00419440 	call	41944 <alt_printf>
			alt_printf("%x\n", lastSerialIn);
   40a30:	00800174 	movhi	r2,5
   40a34:	10a9ea04 	addi	r2,r2,-22616
   40a38:	10800017 	ldw	r2,0(r2)
   40a3c:	100b883a 	mov	r5,r2
   40a40:	01000134 	movhi	r4,4
   40a44:	211c9804 	addi	r4,r4,29280
   40a48:	00419440 	call	41944 <alt_printf>
			alt_printf("move Flag set to 1");
   40a4c:	01000134 	movhi	r4,4
   40a50:	211c9904 	addi	r4,r4,29284
   40a54:	00419440 	call	41944 <alt_printf>
			waitSocCounter = 0;
   40a58:	00800174 	movhi	r2,5
   40a5c:	10a9f404 	addi	r2,r2,-22576
   40a60:	10000015 	stw	zero,0(r2)
			waitOtherSocMoveFlag = 1;
   40a64:	00800174 	movhi	r2,5
   40a68:	10a9f304 	addi	r2,r2,-22580
   40a6c:	00c00044 	movi	r3,1
   40a70:	10c00015 	stw	r3,0(r2)
		}

	if (waitOtherSocMoveFlag && gameFlag == 3){
   40a74:	00800174 	movhi	r2,5
   40a78:	10a9f304 	addi	r2,r2,-22580
   40a7c:	10800017 	ldw	r2,0(r2)
   40a80:	10003726 	beq	r2,zero,40b60 <DualSocGame+0x254>
   40a84:	00800174 	movhi	r2,5
   40a88:	10a9ee04 	addi	r2,r2,-22600
   40a8c:	10800017 	ldw	r2,0(r2)
   40a90:	108000d8 	cmpnei	r2,r2,3
   40a94:	1000321e 	bne	r2,zero,40b60 <DualSocGame+0x254>
		if (whichPlayer == 1){
   40a98:	00800174 	movhi	r2,5
   40a9c:	10a9ec04 	addi	r2,r2,-22608
   40aa0:	10800017 	ldw	r2,0(r2)
   40aa4:	10800058 	cmpnei	r2,r2,1
   40aa8:	10002d1e 	bne	r2,zero,40b60 <DualSocGame+0x254>
			if (lastSerialIn != serialIn){ // Move Player 1 (other SoC)
   40aac:	00800174 	movhi	r2,5
   40ab0:	10a9ea04 	addi	r2,r2,-22616
   40ab4:	10c00017 	ldw	r3,0(r2)
   40ab8:	e0bfff17 	ldw	r2,-4(fp)
   40abc:	18801526 	beq	r3,r2,40b14 <DualSocGame+0x208>
				verilogData = IORD_ALTERA_AVALON_PIO_DATA(verilogOutPointer);
   40ac0:	00800234 	movhi	r2,8
   40ac4:	10840c04 	addi	r2,r2,4144
   40ac8:	10800037 	ldwio	r2,0(r2)
   40acc:	e0bffb15 	stw	r2,-20(fp)
				verilogData = verilogData & 0b111111111111111110000001;
   40ad0:	e0fffb17 	ldw	r3,-20(fp)
   40ad4:	00804034 	movhi	r2,256
   40ad8:	10bfe044 	addi	r2,r2,-127
   40adc:	1884703a 	and	r2,r3,r2
   40ae0:	e0bffb15 	stw	r2,-20(fp)
				serialData = serialIn & 0b01111110;
   40ae4:	e0bfff17 	ldw	r2,-4(fp)
   40ae8:	10801f8c 	andi	r2,r2,126
   40aec:	e0bffc15 	stw	r2,-16(fp)
				verilogData = verilogData | serialData;
   40af0:	e0fffb17 	ldw	r3,-20(fp)
   40af4:	e0bffc17 	ldw	r2,-16(fp)
   40af8:	1884b03a 	or	r2,r3,r2
   40afc:	e0bffb15 	stw	r2,-20(fp)
				VerilogOut(verilogData);
   40b00:	e13ffb17 	ldw	r4,-20(fp)
   40b04:	004041c0 	call	4041c <VerilogOut>
				Delay(550500);
   40b08:	01000234 	movhi	r4,8
   40b0c:	21199904 	addi	r4,r4,26212
   40b10:	00417980 	call	41798 <Delay>
			}
			waitSocCounter = waitSocCounter + 1;
   40b14:	00800174 	movhi	r2,5
   40b18:	10a9f404 	addi	r2,r2,-22576
   40b1c:	10800017 	ldw	r2,0(r2)
   40b20:	10c00044 	addi	r3,r2,1
   40b24:	00800174 	movhi	r2,5
   40b28:	10a9f404 	addi	r2,r2,-22576
   40b2c:	10c00015 	stw	r3,0(r2)
			if (waitSocCounter == 8000){
   40b30:	00800174 	movhi	r2,5
   40b34:	10a9f404 	addi	r2,r2,-22576
   40b38:	10800017 	ldw	r2,0(r2)
   40b3c:	1087d018 	cmpnei	r2,r2,8000
   40b40:	1000071e 	bne	r2,zero,40b60 <DualSocGame+0x254>
				whichPlayer = 2;
   40b44:	00800174 	movhi	r2,5
   40b48:	10a9ec04 	addi	r2,r2,-22608
   40b4c:	00c00084 	movi	r3,2
   40b50:	10c00015 	stw	r3,0(r2)
				waitOtherSocMoveFlag = 0;
   40b54:	00800174 	movhi	r2,5
   40b58:	10a9f304 	addi	r2,r2,-22580
   40b5c:	10000015 	stw	zero,0(r2)
			}
		}
	}
	if (waitOtherSocMoveFlag && gameFlag == 2){
   40b60:	00800174 	movhi	r2,5
   40b64:	10a9f304 	addi	r2,r2,-22580
   40b68:	10800017 	ldw	r2,0(r2)
   40b6c:	10003826 	beq	r2,zero,40c50 <DualSocGame+0x344>
   40b70:	00800174 	movhi	r2,5
   40b74:	10a9ee04 	addi	r2,r2,-22600
   40b78:	10800017 	ldw	r2,0(r2)
   40b7c:	10800098 	cmpnei	r2,r2,2
   40b80:	1000331e 	bne	r2,zero,40c50 <DualSocGame+0x344>
		if (whichPlayer == 2){
   40b84:	00800174 	movhi	r2,5
   40b88:	10a9ec04 	addi	r2,r2,-22608
   40b8c:	10800017 	ldw	r2,0(r2)
   40b90:	10800098 	cmpnei	r2,r2,2
   40b94:	10002e1e 	bne	r2,zero,40c50 <DualSocGame+0x344>
			if (lastSerialIn != serialIn){ // Move Player 2 (other SoC)
   40b98:	00800174 	movhi	r2,5
   40b9c:	10a9ea04 	addi	r2,r2,-22616
   40ba0:	10c00017 	ldw	r3,0(r2)
   40ba4:	e0bfff17 	ldw	r2,-4(fp)
   40ba8:	18801626 	beq	r3,r2,40c04 <DualSocGame+0x2f8>
				verilogData = IORD_ALTERA_AVALON_PIO_DATA(verilogOutPointer);
   40bac:	00800234 	movhi	r2,8
   40bb0:	10840c04 	addi	r2,r2,4144
   40bb4:	10800037 	ldwio	r2,0(r2)
   40bb8:	e0bffb15 	stw	r2,-20(fp)
				verilogData = verilogData & 0b111111111110000001111111;
   40bbc:	e0fffb17 	ldw	r3,-20(fp)
   40bc0:	00804034 	movhi	r2,256
   40bc4:	10b81fc4 	addi	r2,r2,-8065
   40bc8:	1884703a 	and	r2,r3,r2
   40bcc:	e0bffb15 	stw	r2,-20(fp)
				serialData = (serialIn & 0b01111110) << 6;
   40bd0:	e0bfff17 	ldw	r2,-4(fp)
   40bd4:	10801f8c 	andi	r2,r2,126
   40bd8:	100491ba 	slli	r2,r2,6
   40bdc:	e0bffc15 	stw	r2,-16(fp)
				verilogData = verilogData | serialData;
   40be0:	e0fffb17 	ldw	r3,-20(fp)
   40be4:	e0bffc17 	ldw	r2,-16(fp)
   40be8:	1884b03a 	or	r2,r3,r2
   40bec:	e0bffb15 	stw	r2,-20(fp)
				VerilogOut(verilogData);
   40bf0:	e13ffb17 	ldw	r4,-20(fp)
   40bf4:	004041c0 	call	4041c <VerilogOut>
				Delay(550500);
   40bf8:	01000234 	movhi	r4,8
   40bfc:	21199904 	addi	r4,r4,26212
   40c00:	00417980 	call	41798 <Delay>
			}
			waitSocCounter = waitSocCounter + 1;
   40c04:	00800174 	movhi	r2,5
   40c08:	10a9f404 	addi	r2,r2,-22576
   40c0c:	10800017 	ldw	r2,0(r2)
   40c10:	10c00044 	addi	r3,r2,1
   40c14:	00800174 	movhi	r2,5
   40c18:	10a9f404 	addi	r2,r2,-22576
   40c1c:	10c00015 	stw	r3,0(r2)
			if (waitSocCounter == 8000){
   40c20:	00800174 	movhi	r2,5
   40c24:	10a9f404 	addi	r2,r2,-22576
   40c28:	10800017 	ldw	r2,0(r2)
   40c2c:	1087d018 	cmpnei	r2,r2,8000
   40c30:	1000071e 	bne	r2,zero,40c50 <DualSocGame+0x344>
				whichPlayer = 1;
   40c34:	00800174 	movhi	r2,5
   40c38:	10a9ec04 	addi	r2,r2,-22608
   40c3c:	00c00044 	movi	r3,1
   40c40:	10c00015 	stw	r3,0(r2)
				waitOtherSocMoveFlag = 0;
   40c44:	00800174 	movhi	r2,5
   40c48:	10a9f304 	addi	r2,r2,-22580
   40c4c:	10000015 	stw	zero,0(r2)
			}
		}
	}
	button1 = 0;
   40c50:	e03ffd15 	stw	zero,-12(fp)
	button2 = 0;
   40c54:	e03ffe15 	stw	zero,-8(fp)
	button1 = Button1Detect();
   40c58:	00405dc0 	call	405dc <Button1Detect>
   40c5c:	e0bffd15 	stw	r2,-12(fp)
	button2 = Button2Detect();
   40c60:	00406700 	call	40670 <Button2Detect>
   40c64:	e0bffe15 	stw	r2,-8(fp)
	if (button1 && !diceRollFlag && !waitOtherSocMoveFlag){
   40c68:	e0bffd17 	ldw	r2,-12(fp)
   40c6c:	10001026 	beq	r2,zero,40cb0 <DualSocGame+0x3a4>
   40c70:	00800174 	movhi	r2,5
   40c74:	10a9f204 	addi	r2,r2,-22584
   40c78:	10800017 	ldw	r2,0(r2)
   40c7c:	10000c1e 	bne	r2,zero,40cb0 <DualSocGame+0x3a4>
   40c80:	00800174 	movhi	r2,5
   40c84:	10a9f304 	addi	r2,r2,-22580
   40c88:	10800017 	ldw	r2,0(r2)
   40c8c:	1000081e 	bne	r2,zero,40cb0 <DualSocGame+0x3a4>
		diceRollValue = 0;
   40c90:	e03ffa15 	stw	zero,-24(fp)
		diceRollFlag = 1;
   40c94:	00800174 	movhi	r2,5
   40c98:	10a9f204 	addi	r2,r2,-22584
   40c9c:	00c00044 	movi	r3,1
   40ca0:	10c00015 	stw	r3,0(r2)
		alt_putstr("Dice Roll Started!\n");
   40ca4:	01000134 	movhi	r4,4
   40ca8:	211c9e04 	addi	r4,r4,29304
   40cac:	0041bb40 	call	41bb4 <alt_putstr>
	}
	if (diceRollFlag){
   40cb0:	00800174 	movhi	r2,5
   40cb4:	10a9f204 	addi	r2,r2,-22584
   40cb8:	10800017 	ldw	r2,0(r2)
   40cbc:	10000726 	beq	r2,zero,40cdc <DualSocGame+0x3d0>
		diceRollCounter = diceRollCounter + 1;
   40cc0:	00800174 	movhi	r2,5
   40cc4:	10a9f104 	addi	r2,r2,-22588
   40cc8:	10800017 	ldw	r2,0(r2)
   40ccc:	10c00044 	addi	r3,r2,1
   40cd0:	00800174 	movhi	r2,5
   40cd4:	10a9f104 	addi	r2,r2,-22588
   40cd8:	10c00015 	stw	r3,0(r2)
	}
	if (button2 && diceRollFlag && !waitOtherSocMoveFlag){
   40cdc:	e0bffe17 	ldw	r2,-8(fp)
   40ce0:	10001426 	beq	r2,zero,40d34 <DualSocGame+0x428>
   40ce4:	00800174 	movhi	r2,5
   40ce8:	10a9f204 	addi	r2,r2,-22584
   40cec:	10800017 	ldw	r2,0(r2)
   40cf0:	10001026 	beq	r2,zero,40d34 <DualSocGame+0x428>
   40cf4:	00800174 	movhi	r2,5
   40cf8:	10a9f304 	addi	r2,r2,-22580
   40cfc:	10800017 	ldw	r2,0(r2)
   40d00:	10000c1e 	bne	r2,zero,40d34 <DualSocGame+0x428>
		diceRollFlag = 0;
   40d04:	00800174 	movhi	r2,5
   40d08:	10a9f204 	addi	r2,r2,-22584
   40d0c:	10000015 	stw	zero,0(r2)
		diceRollValue = (diceRollCounter % 4) + 1;
   40d10:	00800174 	movhi	r2,5
   40d14:	10a9f104 	addi	r2,r2,-22588
   40d18:	10800017 	ldw	r2,0(r2)
   40d1c:	108000cc 	andi	r2,r2,3
   40d20:	10800044 	addi	r2,r2,1
   40d24:	e0bffa15 	stw	r2,-24(fp)
		alt_putstr("Dice Roll Ended!\n");
   40d28:	01000134 	movhi	r4,4
   40d2c:	211ca304 	addi	r4,r4,29324
   40d30:	0041bb40 	call	41bb4 <alt_putstr>
	}
	if (whichPlayer == 1 && !waitOtherSocMoveFlag && gameFlag == 2 && diceRollValue > 0){ // Move Local 1 player
   40d34:	00800174 	movhi	r2,5
   40d38:	10a9ec04 	addi	r2,r2,-22608
   40d3c:	10800017 	ldw	r2,0(r2)
   40d40:	10800058 	cmpnei	r2,r2,1
   40d44:	1000121e 	bne	r2,zero,40d90 <DualSocGame+0x484>
   40d48:	00800174 	movhi	r2,5
   40d4c:	10a9f304 	addi	r2,r2,-22580
   40d50:	10800017 	ldw	r2,0(r2)
   40d54:	10000e1e 	bne	r2,zero,40d90 <DualSocGame+0x484>
   40d58:	00800174 	movhi	r2,5
   40d5c:	10a9ee04 	addi	r2,r2,-22600
   40d60:	10800017 	ldw	r2,0(r2)
   40d64:	10800098 	cmpnei	r2,r2,2
   40d68:	1000091e 	bne	r2,zero,40d90 <DualSocGame+0x484>
   40d6c:	e0bffa17 	ldw	r2,-24(fp)
   40d70:	0080070e 	bge	zero,r2,40d90 <DualSocGame+0x484>
		MovePlayer1(diceRollValue, 1);
   40d74:	01400044 	movi	r5,1
   40d78:	e13ffa17 	ldw	r4,-24(fp)
   40d7c:	0040e140 	call	40e14 <MovePlayer1>
		whichPlayer = 2;
   40d80:	00800174 	movhi	r2,5
   40d84:	10a9ec04 	addi	r2,r2,-22608
   40d88:	00c00084 	movi	r3,2
   40d8c:	10c00015 	stw	r3,0(r2)
	}
	if (whichPlayer == 2 && !waitOtherSocMoveFlag && gameFlag == 3 && diceRollValue > 0){ // Move Local 2 player
   40d90:	00800174 	movhi	r2,5
   40d94:	10a9ec04 	addi	r2,r2,-22608
   40d98:	10800017 	ldw	r2,0(r2)
   40d9c:	10800098 	cmpnei	r2,r2,2
   40da0:	1000121e 	bne	r2,zero,40dec <DualSocGame+0x4e0>
   40da4:	00800174 	movhi	r2,5
   40da8:	10a9f304 	addi	r2,r2,-22580
   40dac:	10800017 	ldw	r2,0(r2)
   40db0:	10000e1e 	bne	r2,zero,40dec <DualSocGame+0x4e0>
   40db4:	00800174 	movhi	r2,5
   40db8:	10a9ee04 	addi	r2,r2,-22600
   40dbc:	10800017 	ldw	r2,0(r2)
   40dc0:	108000d8 	cmpnei	r2,r2,3
   40dc4:	1000091e 	bne	r2,zero,40dec <DualSocGame+0x4e0>
   40dc8:	e0bffa17 	ldw	r2,-24(fp)
   40dcc:	0080070e 	bge	zero,r2,40dec <DualSocGame+0x4e0>
		MovePlayer2(diceRollValue, 1);
   40dd0:	01400044 	movi	r5,1
   40dd4:	e13ffa17 	ldw	r4,-24(fp)
   40dd8:	0040f340 	call	40f34 <MovePlayer2>
		whichPlayer = 1;
   40ddc:	00800174 	movhi	r2,5
   40de0:	10a9ec04 	addi	r2,r2,-22608
   40de4:	00c00044 	movi	r3,1
   40de8:	10c00015 	stw	r3,0(r2)
	}
	lastSerialIn = serialIn;
   40dec:	00800174 	movhi	r2,5
   40df0:	10a9ea04 	addi	r2,r2,-22616
   40df4:	e0ffff17 	ldw	r3,-4(fp)
   40df8:	10c00015 	stw	r3,0(r2)
}
   40dfc:	0001883a 	nop
   40e00:	e037883a 	mov	sp,fp
   40e04:	dfc00117 	ldw	ra,4(sp)
   40e08:	df000017 	ldw	fp,0(sp)
   40e0c:	dec00204 	addi	sp,sp,8
   40e10:	f800283a 	ret

00040e14 <MovePlayer1>:

void MovePlayer1(int diceRollValue, int serialOutEn){
   40e14:	defff904 	addi	sp,sp,-28
   40e18:	dfc00615 	stw	ra,24(sp)
   40e1c:	df000515 	stw	fp,20(sp)
   40e20:	df000504 	addi	fp,sp,20
   40e24:	e13ffe15 	stw	r4,-8(fp)
   40e28:	e17fff15 	stw	r5,-4(fp)
	int i;
	int currentPos;
	int verilogData;
	int store;
	dice = diceRollValue;
   40e2c:	00800174 	movhi	r2,5
   40e30:	10a9ef04 	addi	r2,r2,-22596
   40e34:	e0fffe17 	ldw	r3,-8(fp)
   40e38:	10c00015 	stw	r3,0(r2)
	verilogData = IORD_ALTERA_AVALON_PIO_DATA(verilogOutPointer);
   40e3c:	00800234 	movhi	r2,8
   40e40:	10840c04 	addi	r2,r2,4144
   40e44:	10800037 	ldwio	r2,0(r2)
   40e48:	e0bffc15 	stw	r2,-16(fp)
	currentPos = verilogData & 0b000000000000000001111110;
   40e4c:	e0bffc17 	ldw	r2,-16(fp)
   40e50:	10801f8c 	andi	r2,r2,126
   40e54:	e0bffb15 	stw	r2,-20(fp)
	currentPos = currentPos >> 1;
   40e58:	e0bffb17 	ldw	r2,-20(fp)
   40e5c:	1005d07a 	srai	r2,r2,1
   40e60:	e0bffb15 	stw	r2,-20(fp)
	while(dice >= 0){
   40e64:	00002906 	br	40f0c <MovePlayer1+0xf8>
		currentPos = MovePlayer(currentPos);
   40e68:	e13ffb17 	ldw	r4,-20(fp)
   40e6c:	00410380 	call	41038 <MovePlayer>
   40e70:	e0bffb15 	stw	r2,-20(fp)
		if (serialOutEn){
   40e74:	e0bfff17 	ldw	r2,-4(fp)
   40e78:	10000826 	beq	r2,zero,40e9c <MovePlayer1+0x88>
			outputSerial((currentPos << 1) + 1);
   40e7c:	e0bffb17 	ldw	r2,-20(fp)
   40e80:	1085883a 	add	r2,r2,r2
   40e84:	10800044 	addi	r2,r2,1
   40e88:	10803fcc 	andi	r2,r2,255
   40e8c:	1080201c 	xori	r2,r2,128
   40e90:	10bfe004 	addi	r2,r2,-128
   40e94:	1009883a 	mov	r4,r2
   40e98:	00403c40 	call	403c4 <outputSerial>
		}
		verilogData = verilogData & 0b111111111111111110000001;
   40e9c:	e0fffc17 	ldw	r3,-16(fp)
   40ea0:	00804034 	movhi	r2,256
   40ea4:	10bfe044 	addi	r2,r2,-127
   40ea8:	1884703a 	and	r2,r3,r2
   40eac:	e0bffc15 	stw	r2,-16(fp)
		store = currentPos << 1;
   40eb0:	e0bffb17 	ldw	r2,-20(fp)
   40eb4:	1085883a 	add	r2,r2,r2
   40eb8:	e0bffd15 	stw	r2,-12(fp)
		store = store | verilogData;
   40ebc:	e0fffd17 	ldw	r3,-12(fp)
   40ec0:	e0bffc17 	ldw	r2,-16(fp)
   40ec4:	1884b03a 	or	r2,r3,r2
   40ec8:	e0bffd15 	stw	r2,-12(fp)
		alt_printf("%x\n", dice);
   40ecc:	00800174 	movhi	r2,5
   40ed0:	10a9ef04 	addi	r2,r2,-22596
   40ed4:	10800017 	ldw	r2,0(r2)
   40ed8:	100b883a 	mov	r5,r2
   40edc:	01000134 	movhi	r4,4
   40ee0:	211c9804 	addi	r4,r4,29280
   40ee4:	00419440 	call	41944 <alt_printf>
		alt_printf("%x\n", currentPos);
   40ee8:	e17ffb17 	ldw	r5,-20(fp)
   40eec:	01000134 	movhi	r4,4
   40ef0:	211c9804 	addi	r4,r4,29280
   40ef4:	00419440 	call	41944 <alt_printf>
		VerilogOut(store);
   40ef8:	e13ffd17 	ldw	r4,-12(fp)
   40efc:	004041c0 	call	4041c <VerilogOut>
		Delay(550500); // 1/2 second delay
   40f00:	01000234 	movhi	r4,8
   40f04:	21199904 	addi	r4,r4,26212
   40f08:	00417980 	call	41798 <Delay>
	int store;
	dice = diceRollValue;
	verilogData = IORD_ALTERA_AVALON_PIO_DATA(verilogOutPointer);
	currentPos = verilogData & 0b000000000000000001111110;
	currentPos = currentPos >> 1;
	while(dice >= 0){
   40f0c:	00800174 	movhi	r2,5
   40f10:	10a9ef04 	addi	r2,r2,-22596
   40f14:	10800017 	ldw	r2,0(r2)
   40f18:	103fd30e 	bge	r2,zero,40e68 <__alt_data_end+0xfffd0128>
		alt_printf("%x\n", dice);
		alt_printf("%x\n", currentPos);
		VerilogOut(store);
		Delay(550500); // 1/2 second delay
	}
}
   40f1c:	0001883a 	nop
   40f20:	e037883a 	mov	sp,fp
   40f24:	dfc00117 	ldw	ra,4(sp)
   40f28:	df000017 	ldw	fp,0(sp)
   40f2c:	dec00204 	addi	sp,sp,8
   40f30:	f800283a 	ret

00040f34 <MovePlayer2>:

void MovePlayer2(int diceRollValue, int serialOutEn){
   40f34:	defff904 	addi	sp,sp,-28
   40f38:	dfc00615 	stw	ra,24(sp)
   40f3c:	df000515 	stw	fp,20(sp)
   40f40:	df000504 	addi	fp,sp,20
   40f44:	e13ffe15 	stw	r4,-8(fp)
   40f48:	e17fff15 	stw	r5,-4(fp)
	int i;
	int currentPos;
	int verilogData;
	int store;
	dice = diceRollValue;
   40f4c:	00800174 	movhi	r2,5
   40f50:	10a9ef04 	addi	r2,r2,-22596
   40f54:	e0fffe17 	ldw	r3,-8(fp)
   40f58:	10c00015 	stw	r3,0(r2)
	verilogData = IORD_ALTERA_AVALON_PIO_DATA(verilogOutPointer);
   40f5c:	00800234 	movhi	r2,8
   40f60:	10840c04 	addi	r2,r2,4144
   40f64:	10800037 	ldwio	r2,0(r2)
   40f68:	e0bffc15 	stw	r2,-16(fp)
	currentPos = verilogData & 0b000000000001111110000000;
   40f6c:	e0bffc17 	ldw	r2,-16(fp)
   40f70:	1087e00c 	andi	r2,r2,8064
   40f74:	e0bffb15 	stw	r2,-20(fp)
	currentPos = currentPos >> 7;
   40f78:	e0bffb17 	ldw	r2,-20(fp)
   40f7c:	1005d1fa 	srai	r2,r2,7
   40f80:	e0bffb15 	stw	r2,-20(fp)
	while(dice >= 0){
   40f84:	00002206 	br	41010 <MovePlayer2+0xdc>
		currentPos = MovePlayer(currentPos);
   40f88:	e13ffb17 	ldw	r4,-20(fp)
   40f8c:	00410380 	call	41038 <MovePlayer>
   40f90:	e0bffb15 	stw	r2,-20(fp)
		if (serialOutEn){
   40f94:	e0bfff17 	ldw	r2,-4(fp)
   40f98:	10000826 	beq	r2,zero,40fbc <MovePlayer2+0x88>
			outputSerial((currentPos << 1) + 1);
   40f9c:	e0bffb17 	ldw	r2,-20(fp)
   40fa0:	1085883a 	add	r2,r2,r2
   40fa4:	10800044 	addi	r2,r2,1
   40fa8:	10803fcc 	andi	r2,r2,255
   40fac:	1080201c 	xori	r2,r2,128
   40fb0:	10bfe004 	addi	r2,r2,-128
   40fb4:	1009883a 	mov	r4,r2
   40fb8:	00403c40 	call	403c4 <outputSerial>
		}
		verilogData = verilogData & 0b111111111110000001111111;
   40fbc:	e0fffc17 	ldw	r3,-16(fp)
   40fc0:	00804034 	movhi	r2,256
   40fc4:	10b81fc4 	addi	r2,r2,-8065
   40fc8:	1884703a 	and	r2,r3,r2
   40fcc:	e0bffc15 	stw	r2,-16(fp)
		store = currentPos << 7;
   40fd0:	e0bffb17 	ldw	r2,-20(fp)
   40fd4:	100491fa 	slli	r2,r2,7
   40fd8:	e0bffd15 	stw	r2,-12(fp)
		store = store | verilogData;
   40fdc:	e0fffd17 	ldw	r3,-12(fp)
   40fe0:	e0bffc17 	ldw	r2,-16(fp)
   40fe4:	1884b03a 	or	r2,r3,r2
   40fe8:	e0bffd15 	stw	r2,-12(fp)
		VerilogOut(store);
   40fec:	e13ffd17 	ldw	r4,-12(fp)
   40ff0:	004041c0 	call	4041c <VerilogOut>
		if (dice >= 0){
   40ff4:	00800174 	movhi	r2,5
   40ff8:	10a9ef04 	addi	r2,r2,-22596
   40ffc:	10800017 	ldw	r2,0(r2)
   41000:	10000316 	blt	r2,zero,41010 <MovePlayer2+0xdc>
			Delay(550500); // 1/2 second delay
   41004:	01000234 	movhi	r4,8
   41008:	21199904 	addi	r4,r4,26212
   4100c:	00417980 	call	41798 <Delay>
	int store;
	dice = diceRollValue;
	verilogData = IORD_ALTERA_AVALON_PIO_DATA(verilogOutPointer);
	currentPos = verilogData & 0b000000000001111110000000;
	currentPos = currentPos >> 7;
	while(dice >= 0){
   41010:	00800174 	movhi	r2,5
   41014:	10a9ef04 	addi	r2,r2,-22596
   41018:	10800017 	ldw	r2,0(r2)
   4101c:	103fda0e 	bge	r2,zero,40f88 <__alt_data_end+0xfffd0248>
		VerilogOut(store);
		if (dice >= 0){
			Delay(550500); // 1/2 second delay
		}
	}
}
   41020:	0001883a 	nop
   41024:	e037883a 	mov	sp,fp
   41028:	dfc00117 	ldw	ra,4(sp)
   4102c:	df000017 	ldw	fp,0(sp)
   41030:	dec00204 	addi	sp,sp,8
   41034:	f800283a 	ret

00041038 <MovePlayer>:

int MovePlayer(int beginPos){
   41038:	defffc04 	addi	sp,sp,-16
   4103c:	df000315 	stw	fp,12(sp)
   41040:	df000304 	addi	fp,sp,12
   41044:	e13fff15 	stw	r4,-4(fp)
	int currentPos;
	int subtract;
	subtract = 1;
   41048:	00800044 	movi	r2,1
   4104c:	e0bffe15 	stw	r2,-8(fp)
	currentPos = beginPos;
   41050:	e0bfff17 	ldw	r2,-4(fp)
   41054:	e0bffd15 	stw	r2,-12(fp)

		if (currentPos == 0 && dice > 0){
   41058:	e0bffd17 	ldw	r2,-12(fp)
   4105c:	1000081e 	bne	r2,zero,41080 <MovePlayer+0x48>
   41060:	00800174 	movhi	r2,5
   41064:	10a9ef04 	addi	r2,r2,-22596
   41068:	10800017 	ldw	r2,0(r2)
   4106c:	0080040e 	bge	zero,r2,41080 <MovePlayer+0x48>
			currentPos = currentPos + 1;
   41070:	e0bffd17 	ldw	r2,-12(fp)
   41074:	10800044 	addi	r2,r2,1
   41078:	e0bffd15 	stw	r2,-12(fp)
   4107c:	0001b806 	br	41760 <MovePlayer+0x728>
		} else
		if (currentPos == 1 && dice > 0){
   41080:	e0bffd17 	ldw	r2,-12(fp)
   41084:	10800058 	cmpnei	r2,r2,1
   41088:	1000081e 	bne	r2,zero,410ac <MovePlayer+0x74>
   4108c:	00800174 	movhi	r2,5
   41090:	10a9ef04 	addi	r2,r2,-22596
   41094:	10800017 	ldw	r2,0(r2)
   41098:	0080040e 	bge	zero,r2,410ac <MovePlayer+0x74>
			currentPos = currentPos + 1;
   4109c:	e0bffd17 	ldw	r2,-12(fp)
   410a0:	10800044 	addi	r2,r2,1
   410a4:	e0bffd15 	stw	r2,-12(fp)
   410a8:	0001ad06 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 1 && dice == 0){ // inductor/Cap slide
   410ac:	e0bffd17 	ldw	r2,-12(fp)
   410b0:	10800058 	cmpnei	r2,r2,1
   410b4:	1000071e 	bne	r2,zero,410d4 <MovePlayer+0x9c>
   410b8:	00800174 	movhi	r2,5
   410bc:	10a9ef04 	addi	r2,r2,-22596
   410c0:	10800017 	ldw	r2,0(r2)
   410c4:	1000031e 	bne	r2,zero,410d4 <MovePlayer+0x9c>
			currentPos = 16;
   410c8:	00800404 	movi	r2,16
   410cc:	e0bffd15 	stw	r2,-12(fp)
   410d0:	0001a306 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 2 && dice > 0){ // inductor/Cap slide
   410d4:	e0bffd17 	ldw	r2,-12(fp)
   410d8:	10800098 	cmpnei	r2,r2,2
   410dc:	1000081e 	bne	r2,zero,41100 <MovePlayer+0xc8>
   410e0:	00800174 	movhi	r2,5
   410e4:	10a9ef04 	addi	r2,r2,-22596
   410e8:	10800017 	ldw	r2,0(r2)
   410ec:	0080040e 	bge	zero,r2,41100 <MovePlayer+0xc8>
			currentPos = currentPos + 1;
   410f0:	e0bffd17 	ldw	r2,-12(fp)
   410f4:	10800044 	addi	r2,r2,1
   410f8:	e0bffd15 	stw	r2,-12(fp)
   410fc:	00019806 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 3 && dice > 0){ // inductor/Cap slide
   41100:	e0bffd17 	ldw	r2,-12(fp)
   41104:	108000d8 	cmpnei	r2,r2,3
   41108:	1000081e 	bne	r2,zero,4112c <MovePlayer+0xf4>
   4110c:	00800174 	movhi	r2,5
   41110:	10a9ef04 	addi	r2,r2,-22596
   41114:	10800017 	ldw	r2,0(r2)
   41118:	0080040e 	bge	zero,r2,4112c <MovePlayer+0xf4>
			currentPos = currentPos + 1;
   4111c:	e0bffd17 	ldw	r2,-12(fp)
   41120:	10800044 	addi	r2,r2,1
   41124:	e0bffd15 	stw	r2,-12(fp)
   41128:	00018d06 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 4 && dice > 0){ // inductor/Cap slide
   4112c:	e0bffd17 	ldw	r2,-12(fp)
   41130:	10800118 	cmpnei	r2,r2,4
   41134:	1000081e 	bne	r2,zero,41158 <MovePlayer+0x120>
   41138:	00800174 	movhi	r2,5
   4113c:	10a9ef04 	addi	r2,r2,-22596
   41140:	10800017 	ldw	r2,0(r2)
   41144:	0080040e 	bge	zero,r2,41158 <MovePlayer+0x120>
			currentPos = currentPos + 1;
   41148:	e0bffd17 	ldw	r2,-12(fp)
   4114c:	10800044 	addi	r2,r2,1
   41150:	e0bffd15 	stw	r2,-12(fp)
   41154:	00018206 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 5 && dice > 0){ // inductor/Cap slide
   41158:	e0bffd17 	ldw	r2,-12(fp)
   4115c:	10800158 	cmpnei	r2,r2,5
   41160:	1000081e 	bne	r2,zero,41184 <MovePlayer+0x14c>
   41164:	00800174 	movhi	r2,5
   41168:	10a9ef04 	addi	r2,r2,-22596
   4116c:	10800017 	ldw	r2,0(r2)
   41170:	0080040e 	bge	zero,r2,41184 <MovePlayer+0x14c>
			currentPos = currentPos + 1;
   41174:	e0bffd17 	ldw	r2,-12(fp)
   41178:	10800044 	addi	r2,r2,1
   4117c:	e0bffd15 	stw	r2,-12(fp)
   41180:	00017706 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 5 && dice == 0){ // inductor/Cap slide
   41184:	e0bffd17 	ldw	r2,-12(fp)
   41188:	10800158 	cmpnei	r2,r2,5
   4118c:	1000071e 	bne	r2,zero,411ac <MovePlayer+0x174>
   41190:	00800174 	movhi	r2,5
   41194:	10a9ef04 	addi	r2,r2,-22596
   41198:	10800017 	ldw	r2,0(r2)
   4119c:	1000031e 	bne	r2,zero,411ac <MovePlayer+0x174>
			currentPos = 12;
   411a0:	00800304 	movi	r2,12
   411a4:	e0bffd15 	stw	r2,-12(fp)
   411a8:	00016d06 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 6 && dice > 0){ // inductor/Cap slide
   411ac:	e0bffd17 	ldw	r2,-12(fp)
   411b0:	10800198 	cmpnei	r2,r2,6
   411b4:	1000081e 	bne	r2,zero,411d8 <MovePlayer+0x1a0>
   411b8:	00800174 	movhi	r2,5
   411bc:	10a9ef04 	addi	r2,r2,-22596
   411c0:	10800017 	ldw	r2,0(r2)
   411c4:	0080040e 	bge	zero,r2,411d8 <MovePlayer+0x1a0>
			currentPos = currentPos + 1;
   411c8:	e0bffd17 	ldw	r2,-12(fp)
   411cc:	10800044 	addi	r2,r2,1
   411d0:	e0bffd15 	stw	r2,-12(fp)
   411d4:	00016206 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 7 && dice > 0){ // inductor/Cap slide
   411d8:	e0bffd17 	ldw	r2,-12(fp)
   411dc:	108001d8 	cmpnei	r2,r2,7
   411e0:	1000081e 	bne	r2,zero,41204 <MovePlayer+0x1cc>
   411e4:	00800174 	movhi	r2,5
   411e8:	10a9ef04 	addi	r2,r2,-22596
   411ec:	10800017 	ldw	r2,0(r2)
   411f0:	0080040e 	bge	zero,r2,41204 <MovePlayer+0x1cc>
			currentPos = currentPos + 1;
   411f4:	e0bffd17 	ldw	r2,-12(fp)
   411f8:	10800044 	addi	r2,r2,1
   411fc:	e0bffd15 	stw	r2,-12(fp)
   41200:	00015706 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 8 && dice > 0){ // inductor/Cap slide
   41204:	e0bffd17 	ldw	r2,-12(fp)
   41208:	10800218 	cmpnei	r2,r2,8
   4120c:	1000081e 	bne	r2,zero,41230 <MovePlayer+0x1f8>
   41210:	00800174 	movhi	r2,5
   41214:	10a9ef04 	addi	r2,r2,-22596
   41218:	10800017 	ldw	r2,0(r2)
   4121c:	0080040e 	bge	zero,r2,41230 <MovePlayer+0x1f8>
			currentPos = currentPos + 1;
   41220:	e0bffd17 	ldw	r2,-12(fp)
   41224:	10800044 	addi	r2,r2,1
   41228:	e0bffd15 	stw	r2,-12(fp)
   4122c:	00014c06 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 9 && dice > 0){ // inductor/Cap slide
   41230:	e0bffd17 	ldw	r2,-12(fp)
   41234:	10800258 	cmpnei	r2,r2,9
   41238:	1000081e 	bne	r2,zero,4125c <MovePlayer+0x224>
   4123c:	00800174 	movhi	r2,5
   41240:	10a9ef04 	addi	r2,r2,-22596
   41244:	10800017 	ldw	r2,0(r2)
   41248:	0080040e 	bge	zero,r2,4125c <MovePlayer+0x224>
			currentPos = currentPos + 1;
   4124c:	e0bffd17 	ldw	r2,-12(fp)
   41250:	10800044 	addi	r2,r2,1
   41254:	e0bffd15 	stw	r2,-12(fp)
   41258:	00014106 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 10 && dice > 0){ // inductor/Cap slide
   4125c:	e0bffd17 	ldw	r2,-12(fp)
   41260:	10800298 	cmpnei	r2,r2,10
   41264:	1000081e 	bne	r2,zero,41288 <MovePlayer+0x250>
   41268:	00800174 	movhi	r2,5
   4126c:	10a9ef04 	addi	r2,r2,-22596
   41270:	10800017 	ldw	r2,0(r2)
   41274:	0080040e 	bge	zero,r2,41288 <MovePlayer+0x250>
			currentPos = currentPos + 1;
   41278:	e0bffd17 	ldw	r2,-12(fp)
   4127c:	10800044 	addi	r2,r2,1
   41280:	e0bffd15 	stw	r2,-12(fp)
   41284:	00013606 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 10 && dice == 0){ // inductor/Cap slide
   41288:	e0bffd17 	ldw	r2,-12(fp)
   4128c:	10800298 	cmpnei	r2,r2,10
   41290:	1000071e 	bne	r2,zero,412b0 <MovePlayer+0x278>
   41294:	00800174 	movhi	r2,5
   41298:	10a9ef04 	addi	r2,r2,-22596
   4129c:	10800017 	ldw	r2,0(r2)
   412a0:	1000031e 	bne	r2,zero,412b0 <MovePlayer+0x278>
			currentPos = 7;
   412a4:	008001c4 	movi	r2,7
   412a8:	e0bffd15 	stw	r2,-12(fp)
   412ac:	00012c06 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 11 && dice > 0){ // inductor/Cap slide
   412b0:	e0bffd17 	ldw	r2,-12(fp)
   412b4:	108002d8 	cmpnei	r2,r2,11
   412b8:	1000081e 	bne	r2,zero,412dc <MovePlayer+0x2a4>
   412bc:	00800174 	movhi	r2,5
   412c0:	10a9ef04 	addi	r2,r2,-22596
   412c4:	10800017 	ldw	r2,0(r2)
   412c8:	0080040e 	bge	zero,r2,412dc <MovePlayer+0x2a4>
			currentPos = currentPos + 1;
   412cc:	e0bffd17 	ldw	r2,-12(fp)
   412d0:	10800044 	addi	r2,r2,1
   412d4:	e0bffd15 	stw	r2,-12(fp)
   412d8:	00012106 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 12 && dice > 0){ // inductor/Cap slide
   412dc:	e0bffd17 	ldw	r2,-12(fp)
   412e0:	10800318 	cmpnei	r2,r2,12
   412e4:	1000081e 	bne	r2,zero,41308 <MovePlayer+0x2d0>
   412e8:	00800174 	movhi	r2,5
   412ec:	10a9ef04 	addi	r2,r2,-22596
   412f0:	10800017 	ldw	r2,0(r2)
   412f4:	0080040e 	bge	zero,r2,41308 <MovePlayer+0x2d0>
			currentPos = currentPos + 1;
   412f8:	e0bffd17 	ldw	r2,-12(fp)
   412fc:	10800044 	addi	r2,r2,1
   41300:	e0bffd15 	stw	r2,-12(fp)
   41304:	00011606 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 13 && dice > 0){ // inductor/Cap slide
   41308:	e0bffd17 	ldw	r2,-12(fp)
   4130c:	10800358 	cmpnei	r2,r2,13
   41310:	1000081e 	bne	r2,zero,41334 <MovePlayer+0x2fc>
   41314:	00800174 	movhi	r2,5
   41318:	10a9ef04 	addi	r2,r2,-22596
   4131c:	10800017 	ldw	r2,0(r2)
   41320:	0080040e 	bge	zero,r2,41334 <MovePlayer+0x2fc>
			currentPos = currentPos + 1;
   41324:	e0bffd17 	ldw	r2,-12(fp)
   41328:	10800044 	addi	r2,r2,1
   4132c:	e0bffd15 	stw	r2,-12(fp)
   41330:	00010b06 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 14 && dice > 0){ // inductor/Cap slide
   41334:	e0bffd17 	ldw	r2,-12(fp)
   41338:	10800398 	cmpnei	r2,r2,14
   4133c:	1000081e 	bne	r2,zero,41360 <MovePlayer+0x328>
   41340:	00800174 	movhi	r2,5
   41344:	10a9ef04 	addi	r2,r2,-22596
   41348:	10800017 	ldw	r2,0(r2)
   4134c:	0080040e 	bge	zero,r2,41360 <MovePlayer+0x328>
			currentPos = currentPos + 1;
   41350:	e0bffd17 	ldw	r2,-12(fp)
   41354:	10800044 	addi	r2,r2,1
   41358:	e0bffd15 	stw	r2,-12(fp)
   4135c:	00010006 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 14 && dice == 0){ // inductor/Cap slide
   41360:	e0bffd17 	ldw	r2,-12(fp)
   41364:	10800398 	cmpnei	r2,r2,14
   41368:	1000071e 	bne	r2,zero,41388 <MovePlayer+0x350>
   4136c:	00800174 	movhi	r2,5
   41370:	10a9ef04 	addi	r2,r2,-22596
   41374:	10800017 	ldw	r2,0(r2)
   41378:	1000031e 	bne	r2,zero,41388 <MovePlayer+0x350>
			currentPos = 3;
   4137c:	008000c4 	movi	r2,3
   41380:	e0bffd15 	stw	r2,-12(fp)
   41384:	0000f606 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 15 && dice > 0){ // inductor/Cap slide
   41388:	e0bffd17 	ldw	r2,-12(fp)
   4138c:	108003d8 	cmpnei	r2,r2,15
   41390:	1000081e 	bne	r2,zero,413b4 <MovePlayer+0x37c>
   41394:	00800174 	movhi	r2,5
   41398:	10a9ef04 	addi	r2,r2,-22596
   4139c:	10800017 	ldw	r2,0(r2)
   413a0:	0080040e 	bge	zero,r2,413b4 <MovePlayer+0x37c>
			currentPos = currentPos + 1;
   413a4:	e0bffd17 	ldw	r2,-12(fp)
   413a8:	10800044 	addi	r2,r2,1
   413ac:	e0bffd15 	stw	r2,-12(fp)
   413b0:	0000eb06 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 15 && dice == 0){ // inductor/Cap slide
   413b4:	e0bffd17 	ldw	r2,-12(fp)
   413b8:	108003d8 	cmpnei	r2,r2,15
   413bc:	1000071e 	bne	r2,zero,413dc <MovePlayer+0x3a4>
   413c0:	00800174 	movhi	r2,5
   413c4:	10a9ef04 	addi	r2,r2,-22596
   413c8:	10800017 	ldw	r2,0(r2)
   413cc:	1000031e 	bne	r2,zero,413dc <MovePlayer+0x3a4>
			currentPos = 20;
   413d0:	00800504 	movi	r2,20
   413d4:	e0bffd15 	stw	r2,-12(fp)
   413d8:	0000e106 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 16 && dice > 0){ // inductor/Cap slide
   413dc:	e0bffd17 	ldw	r2,-12(fp)
   413e0:	10800418 	cmpnei	r2,r2,16
   413e4:	1000081e 	bne	r2,zero,41408 <MovePlayer+0x3d0>
   413e8:	00800174 	movhi	r2,5
   413ec:	10a9ef04 	addi	r2,r2,-22596
   413f0:	10800017 	ldw	r2,0(r2)
   413f4:	0080040e 	bge	zero,r2,41408 <MovePlayer+0x3d0>
			currentPos = currentPos + 1;
   413f8:	e0bffd17 	ldw	r2,-12(fp)
   413fc:	10800044 	addi	r2,r2,1
   41400:	e0bffd15 	stw	r2,-12(fp)
   41404:	0000d606 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 17 && dice > 0){ // inductor/Cap slide
   41408:	e0bffd17 	ldw	r2,-12(fp)
   4140c:	10800458 	cmpnei	r2,r2,17
   41410:	1000081e 	bne	r2,zero,41434 <MovePlayer+0x3fc>
   41414:	00800174 	movhi	r2,5
   41418:	10a9ef04 	addi	r2,r2,-22596
   4141c:	10800017 	ldw	r2,0(r2)
   41420:	0080040e 	bge	zero,r2,41434 <MovePlayer+0x3fc>
			currentPos = currentPos + 1;
   41424:	e0bffd17 	ldw	r2,-12(fp)
   41428:	10800044 	addi	r2,r2,1
   4142c:	e0bffd15 	stw	r2,-12(fp)
   41430:	0000cb06 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 17 && dice == 0){ // inductor/Cap slide
   41434:	e0bffd17 	ldw	r2,-12(fp)
   41438:	10800458 	cmpnei	r2,r2,17
   4143c:	1000061e 	bne	r2,zero,41458 <MovePlayer+0x420>
   41440:	00800174 	movhi	r2,5
   41444:	10a9ef04 	addi	r2,r2,-22596
   41448:	10800017 	ldw	r2,0(r2)
   4144c:	1000021e 	bne	r2,zero,41458 <MovePlayer+0x420>
			currentPos = 0;
   41450:	e03ffd15 	stw	zero,-12(fp)
   41454:	0000c206 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 18 && dice > 0){ // inductor/Cap slide
   41458:	e0bffd17 	ldw	r2,-12(fp)
   4145c:	10800498 	cmpnei	r2,r2,18
   41460:	1000081e 	bne	r2,zero,41484 <MovePlayer+0x44c>
   41464:	00800174 	movhi	r2,5
   41468:	10a9ef04 	addi	r2,r2,-22596
   4146c:	10800017 	ldw	r2,0(r2)
   41470:	0080040e 	bge	zero,r2,41484 <MovePlayer+0x44c>
			currentPos = currentPos + 1;
   41474:	e0bffd17 	ldw	r2,-12(fp)
   41478:	10800044 	addi	r2,r2,1
   4147c:	e0bffd15 	stw	r2,-12(fp)
   41480:	0000b706 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 19 && dice > 0){ // inductor/Cap slide
   41484:	e0bffd17 	ldw	r2,-12(fp)
   41488:	108004d8 	cmpnei	r2,r2,19
   4148c:	1000081e 	bne	r2,zero,414b0 <MovePlayer+0x478>
   41490:	00800174 	movhi	r2,5
   41494:	10a9ef04 	addi	r2,r2,-22596
   41498:	10800017 	ldw	r2,0(r2)
   4149c:	0080040e 	bge	zero,r2,414b0 <MovePlayer+0x478>
			currentPos = currentPos + 1;
   414a0:	e0bffd17 	ldw	r2,-12(fp)
   414a4:	10800044 	addi	r2,r2,1
   414a8:	e0bffd15 	stw	r2,-12(fp)
   414ac:	0000ac06 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 19 && dice == 0){ // inductor/Cap slide
   414b0:	e0bffd17 	ldw	r2,-12(fp)
   414b4:	108004d8 	cmpnei	r2,r2,19
   414b8:	1000071e 	bne	r2,zero,414d8 <MovePlayer+0x4a0>
   414bc:	00800174 	movhi	r2,5
   414c0:	10a9ef04 	addi	r2,r2,-22596
   414c4:	10800017 	ldw	r2,0(r2)
   414c8:	1000031e 	bne	r2,zero,414d8 <MovePlayer+0x4a0>
			currentPos = 16;
   414cc:	00800404 	movi	r2,16
   414d0:	e0bffd15 	stw	r2,-12(fp)
   414d4:	0000a206 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 20 && dice > 0){ // inductor/Cap slide
   414d8:	e0bffd17 	ldw	r2,-12(fp)
   414dc:	10800518 	cmpnei	r2,r2,20
   414e0:	1000081e 	bne	r2,zero,41504 <MovePlayer+0x4cc>
   414e4:	00800174 	movhi	r2,5
   414e8:	10a9ef04 	addi	r2,r2,-22596
   414ec:	10800017 	ldw	r2,0(r2)
   414f0:	0080040e 	bge	zero,r2,41504 <MovePlayer+0x4cc>
			currentPos = currentPos + 1;
   414f4:	e0bffd17 	ldw	r2,-12(fp)
   414f8:	10800044 	addi	r2,r2,1
   414fc:	e0bffd15 	stw	r2,-12(fp)
   41500:	00009706 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 21 && dice > 0){ // inductor/Cap slide
   41504:	e0bffd17 	ldw	r2,-12(fp)
   41508:	10800558 	cmpnei	r2,r2,21
   4150c:	1000081e 	bne	r2,zero,41530 <MovePlayer+0x4f8>
   41510:	00800174 	movhi	r2,5
   41514:	10a9ef04 	addi	r2,r2,-22596
   41518:	10800017 	ldw	r2,0(r2)
   4151c:	0080040e 	bge	zero,r2,41530 <MovePlayer+0x4f8>
			currentPos = currentPos + 1;
   41520:	e0bffd17 	ldw	r2,-12(fp)
   41524:	10800044 	addi	r2,r2,1
   41528:	e0bffd15 	stw	r2,-12(fp)
   4152c:	00008c06 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 22 && dice > 0){ // inductor/Cap slide
   41530:	e0bffd17 	ldw	r2,-12(fp)
   41534:	10800598 	cmpnei	r2,r2,22
   41538:	1000081e 	bne	r2,zero,4155c <MovePlayer+0x524>
   4153c:	00800174 	movhi	r2,5
   41540:	10a9ef04 	addi	r2,r2,-22596
   41544:	10800017 	ldw	r2,0(r2)
   41548:	0080040e 	bge	zero,r2,4155c <MovePlayer+0x524>
			currentPos = currentPos + 1;
   4154c:	e0bffd17 	ldw	r2,-12(fp)
   41550:	10800044 	addi	r2,r2,1
   41554:	e0bffd15 	stw	r2,-12(fp)
   41558:	00008106 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 22 && dice == 0){ // inductor/Cap slide
   4155c:	e0bffd17 	ldw	r2,-12(fp)
   41560:	10800598 	cmpnei	r2,r2,22
   41564:	1000071e 	bne	r2,zero,41584 <MovePlayer+0x54c>
   41568:	00800174 	movhi	r2,5
   4156c:	10a9ef04 	addi	r2,r2,-22596
   41570:	10800017 	ldw	r2,0(r2)
   41574:	1000031e 	bne	r2,zero,41584 <MovePlayer+0x54c>
			currentPos = 13;
   41578:	00800344 	movi	r2,13
   4157c:	e0bffd15 	stw	r2,-12(fp)
   41580:	00007706 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 23 && dice > 0){ // inductor/Cap slide
   41584:	e0bffd17 	ldw	r2,-12(fp)
   41588:	108005d8 	cmpnei	r2,r2,23
   4158c:	1000081e 	bne	r2,zero,415b0 <MovePlayer+0x578>
   41590:	00800174 	movhi	r2,5
   41594:	10a9ef04 	addi	r2,r2,-22596
   41598:	10800017 	ldw	r2,0(r2)
   4159c:	0080040e 	bge	zero,r2,415b0 <MovePlayer+0x578>
			currentPos = currentPos + 1;
   415a0:	e0bffd17 	ldw	r2,-12(fp)
   415a4:	10800044 	addi	r2,r2,1
   415a8:	e0bffd15 	stw	r2,-12(fp)
   415ac:	00006c06 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 24 && dice > 0){ // inductor/Cap slide
   415b0:	e0bffd17 	ldw	r2,-12(fp)
   415b4:	10800618 	cmpnei	r2,r2,24
   415b8:	1000081e 	bne	r2,zero,415dc <MovePlayer+0x5a4>
   415bc:	00800174 	movhi	r2,5
   415c0:	10a9ef04 	addi	r2,r2,-22596
   415c4:	10800017 	ldw	r2,0(r2)
   415c8:	0080040e 	bge	zero,r2,415dc <MovePlayer+0x5a4>
			currentPos = currentPos + 1;
   415cc:	e0bffd17 	ldw	r2,-12(fp)
   415d0:	10800044 	addi	r2,r2,1
   415d4:	e0bffd15 	stw	r2,-12(fp)
   415d8:	00006106 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 24 && dice == 0){ // inductor/Cap slide
   415dc:	e0bffd17 	ldw	r2,-12(fp)
   415e0:	10800618 	cmpnei	r2,r2,24
   415e4:	1000071e 	bne	r2,zero,41604 <MovePlayer+0x5cc>
   415e8:	00800174 	movhi	r2,5
   415ec:	10a9ef04 	addi	r2,r2,-22596
   415f0:	10800017 	ldw	r2,0(r2)
   415f4:	1000031e 	bne	r2,zero,41604 <MovePlayer+0x5cc>
			currentPos = 11;
   415f8:	008002c4 	movi	r2,11
   415fc:	e0bffd15 	stw	r2,-12(fp)
   41600:	00005706 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 25 && dice > 0){ // inductor/Cap slide
   41604:	e0bffd17 	ldw	r2,-12(fp)
   41608:	10800658 	cmpnei	r2,r2,25
   4160c:	1000081e 	bne	r2,zero,41630 <MovePlayer+0x5f8>
   41610:	00800174 	movhi	r2,5
   41614:	10a9ef04 	addi	r2,r2,-22596
   41618:	10800017 	ldw	r2,0(r2)
   4161c:	0080040e 	bge	zero,r2,41630 <MovePlayer+0x5f8>
			currentPos = currentPos + 1;
   41620:	e0bffd17 	ldw	r2,-12(fp)
   41624:	10800044 	addi	r2,r2,1
   41628:	e0bffd15 	stw	r2,-12(fp)
   4162c:	00004c06 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 26 && dice > 0){ // inductor/Cap slide
   41630:	e0bffd17 	ldw	r2,-12(fp)
   41634:	10800698 	cmpnei	r2,r2,26
   41638:	1000071e 	bne	r2,zero,41658 <MovePlayer+0x620>
   4163c:	00800174 	movhi	r2,5
   41640:	10a9ef04 	addi	r2,r2,-22596
   41644:	10800017 	ldw	r2,0(r2)
   41648:	0080030e 	bge	zero,r2,41658 <MovePlayer+0x620>
			currentPos = 31;
   4164c:	008007c4 	movi	r2,31
   41650:	e0bffd15 	stw	r2,-12(fp)
   41654:	00004206 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 26 && dice == 0){ // inductor/Cap slide
   41658:	e0bffd17 	ldw	r2,-12(fp)
   4165c:	10800698 	cmpnei	r2,r2,26
   41660:	1000081e 	bne	r2,zero,41684 <MovePlayer+0x64c>
   41664:	00800174 	movhi	r2,5
   41668:	10a9ef04 	addi	r2,r2,-22596
   4166c:	10800017 	ldw	r2,0(r2)
   41670:	1000041e 	bne	r2,zero,41684 <MovePlayer+0x64c>
			subtract = 0;
   41674:	e03ffe15 	stw	zero,-8(fp)
			currentPos = 27;
   41678:	008006c4 	movi	r2,27
   4167c:	e0bffd15 	stw	r2,-12(fp)
   41680:	00003706 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 27 && dice == 0){ // inductor/Cap slide
   41684:	e0bffd17 	ldw	r2,-12(fp)
   41688:	108006d8 	cmpnei	r2,r2,27
   4168c:	1000081e 	bne	r2,zero,416b0 <MovePlayer+0x678>
   41690:	00800174 	movhi	r2,5
   41694:	10a9ef04 	addi	r2,r2,-22596
   41698:	10800017 	ldw	r2,0(r2)
   4169c:	1000041e 	bne	r2,zero,416b0 <MovePlayer+0x678>
			subtract = 0;
   416a0:	e03ffe15 	stw	zero,-8(fp)
			currentPos = 28;
   416a4:	00800704 	movi	r2,28
   416a8:	e0bffd15 	stw	r2,-12(fp)
   416ac:	00002c06 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 28 && dice == 0){ // inductor/Cap slide
   416b0:	e0bffd17 	ldw	r2,-12(fp)
   416b4:	10800718 	cmpnei	r2,r2,28
   416b8:	1000081e 	bne	r2,zero,416dc <MovePlayer+0x6a4>
   416bc:	00800174 	movhi	r2,5
   416c0:	10a9ef04 	addi	r2,r2,-22596
   416c4:	10800017 	ldw	r2,0(r2)
   416c8:	1000041e 	bne	r2,zero,416dc <MovePlayer+0x6a4>
			subtract = 0;
   416cc:	e03ffe15 	stw	zero,-8(fp)
			currentPos = 29;
   416d0:	00800744 	movi	r2,29
   416d4:	e0bffd15 	stw	r2,-12(fp)
   416d8:	00002106 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 29 && dice == 0){ // inductor/Cap slide
   416dc:	e0bffd17 	ldw	r2,-12(fp)
   416e0:	10800758 	cmpnei	r2,r2,29
   416e4:	1000081e 	bne	r2,zero,41708 <MovePlayer+0x6d0>
   416e8:	00800174 	movhi	r2,5
   416ec:	10a9ef04 	addi	r2,r2,-22596
   416f0:	10800017 	ldw	r2,0(r2)
   416f4:	1000041e 	bne	r2,zero,41708 <MovePlayer+0x6d0>
			subtract = 0;
   416f8:	e03ffe15 	stw	zero,-8(fp)
			currentPos = 30;
   416fc:	00800784 	movi	r2,30
   41700:	e0bffd15 	stw	r2,-12(fp)
   41704:	00001606 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 30 && dice == 0){ // inductor/Cap slide
   41708:	e0bffd17 	ldw	r2,-12(fp)
   4170c:	10800798 	cmpnei	r2,r2,30
   41710:	1000081e 	bne	r2,zero,41734 <MovePlayer+0x6fc>
   41714:	00800174 	movhi	r2,5
   41718:	10a9ef04 	addi	r2,r2,-22596
   4171c:	10800017 	ldw	r2,0(r2)
   41720:	1000041e 	bne	r2,zero,41734 <MovePlayer+0x6fc>
			subtract = 1;
   41724:	00800044 	movi	r2,1
   41728:	e0bffe15 	stw	r2,-8(fp)
			currentPos = 0;
   4172c:	e03ffd15 	stw	zero,-12(fp)
   41730:	00000b06 	br	41760 <MovePlayer+0x728>
		} else
		if(currentPos == 31 && dice == 0){ // inductor/Cap slide
   41734:	e0bffd17 	ldw	r2,-12(fp)
   41738:	108007d8 	cmpnei	r2,r2,31
   4173c:	1000081e 	bne	r2,zero,41760 <MovePlayer+0x728>
   41740:	00800174 	movhi	r2,5
   41744:	10a9ef04 	addi	r2,r2,-22596
   41748:	10800017 	ldw	r2,0(r2)
   4174c:	1000041e 	bne	r2,zero,41760 <MovePlayer+0x728>
			subtract = 1;
   41750:	00800044 	movi	r2,1
   41754:	e0bffe15 	stw	r2,-8(fp)
			currentPos = 32;
   41758:	00800804 	movi	r2,32
   4175c:	e0bffd15 	stw	r2,-12(fp)
		}
		if (subtract){
   41760:	e0bffe17 	ldw	r2,-8(fp)
   41764:	10000726 	beq	r2,zero,41784 <MovePlayer+0x74c>
			dice = dice - 1;
   41768:	00800174 	movhi	r2,5
   4176c:	10a9ef04 	addi	r2,r2,-22596
   41770:	10800017 	ldw	r2,0(r2)
   41774:	10ffffc4 	addi	r3,r2,-1
   41778:	00800174 	movhi	r2,5
   4177c:	10a9ef04 	addi	r2,r2,-22596
   41780:	10c00015 	stw	r3,0(r2)
		}
		return currentPos;
   41784:	e0bffd17 	ldw	r2,-12(fp)
}
   41788:	e037883a 	mov	sp,fp
   4178c:	df000017 	ldw	fp,0(sp)
   41790:	dec00104 	addi	sp,sp,4
   41794:	f800283a 	ret

00041798 <Delay>:

void Delay(int j){
   41798:	defffd04 	addi	sp,sp,-12
   4179c:	df000215 	stw	fp,8(sp)
   417a0:	df000204 	addi	fp,sp,8
   417a4:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=0; i < j; i++){
   417a8:	e03ffe15 	stw	zero,-8(fp)
   417ac:	00000306 	br	417bc <Delay+0x24>
   417b0:	e0bffe17 	ldw	r2,-8(fp)
   417b4:	10800044 	addi	r2,r2,1
   417b8:	e0bffe15 	stw	r2,-8(fp)
   417bc:	e0fffe17 	ldw	r3,-8(fp)
   417c0:	e0bfff17 	ldw	r2,-4(fp)
   417c4:	18bffa16 	blt	r3,r2,417b0 <__alt_data_end+0xfffd0a70>
	}
}
   417c8:	0001883a 	nop
   417cc:	e037883a 	mov	sp,fp
   417d0:	df000017 	ldw	fp,0(sp)
   417d4:	dec00104 	addi	sp,sp,4
   417d8:	f800283a 	ret

000417dc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   417dc:	defffc04 	addi	sp,sp,-16
   417e0:	df000315 	stw	fp,12(sp)
   417e4:	df000304 	addi	fp,sp,12
   417e8:	e13ffd15 	stw	r4,-12(fp)
   417ec:	e17ffe15 	stw	r5,-8(fp)
   417f0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   417f4:	e0fffe17 	ldw	r3,-8(fp)
   417f8:	e0bffd17 	ldw	r2,-12(fp)
   417fc:	18800c26 	beq	r3,r2,41830 <alt_load_section+0x54>
  {
    while( to != end )
   41800:	00000806 	br	41824 <alt_load_section+0x48>
    {
      *to++ = *from++;
   41804:	e0bffe17 	ldw	r2,-8(fp)
   41808:	10c00104 	addi	r3,r2,4
   4180c:	e0fffe15 	stw	r3,-8(fp)
   41810:	e0fffd17 	ldw	r3,-12(fp)
   41814:	19000104 	addi	r4,r3,4
   41818:	e13ffd15 	stw	r4,-12(fp)
   4181c:	18c00017 	ldw	r3,0(r3)
   41820:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   41824:	e0fffe17 	ldw	r3,-8(fp)
   41828:	e0bfff17 	ldw	r2,-4(fp)
   4182c:	18bff51e 	bne	r3,r2,41804 <__alt_data_end+0xfffd0ac4>
    {
      *to++ = *from++;
    }
  }
}
   41830:	0001883a 	nop
   41834:	e037883a 	mov	sp,fp
   41838:	df000017 	ldw	fp,0(sp)
   4183c:	dec00104 	addi	sp,sp,4
   41840:	f800283a 	ret

00041844 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   41844:	defffe04 	addi	sp,sp,-8
   41848:	dfc00115 	stw	ra,4(sp)
   4184c:	df000015 	stw	fp,0(sp)
   41850:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   41854:	01800174 	movhi	r6,5
   41858:	31a34f04 	addi	r6,r6,-29380
   4185c:	01400134 	movhi	r5,4
   41860:	295cb404 	addi	r5,r5,29392
   41864:	01000174 	movhi	r4,5
   41868:	21234f04 	addi	r4,r4,-29380
   4186c:	00417dc0 	call	417dc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   41870:	01800134 	movhi	r6,4
   41874:	31807004 	addi	r6,r6,448
   41878:	01400134 	movhi	r5,4
   4187c:	29400804 	addi	r5,r5,32
   41880:	01000134 	movhi	r4,4
   41884:	21000804 	addi	r4,r4,32
   41888:	00417dc0 	call	417dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4188c:	01800134 	movhi	r6,4
   41890:	319cb404 	addi	r6,r6,29392
   41894:	01400134 	movhi	r5,4
   41898:	295c9504 	addi	r5,r5,29268
   4189c:	01000134 	movhi	r4,4
   418a0:	211c9504 	addi	r4,r4,29268
   418a4:	00417dc0 	call	417dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   418a8:	00429900 	call	42990 <alt_dcache_flush_all>
  alt_icache_flush_all();
   418ac:	0042b900 	call	42b90 <alt_icache_flush_all>
}
   418b0:	0001883a 	nop
   418b4:	e037883a 	mov	sp,fp
   418b8:	dfc00117 	ldw	ra,4(sp)
   418bc:	df000017 	ldw	fp,0(sp)
   418c0:	dec00204 	addi	sp,sp,8
   418c4:	f800283a 	ret

000418c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   418c8:	defffd04 	addi	sp,sp,-12
   418cc:	dfc00215 	stw	ra,8(sp)
   418d0:	df000115 	stw	fp,4(sp)
   418d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   418d8:	0009883a 	mov	r4,zero
   418dc:	0041c300 	call	41c30 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   418e0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   418e4:	0041c680 	call	41c68 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   418e8:	01800134 	movhi	r6,4
   418ec:	319ca804 	addi	r6,r6,29344
   418f0:	01400134 	movhi	r5,4
   418f4:	295ca804 	addi	r5,r5,29344
   418f8:	01000134 	movhi	r4,4
   418fc:	211ca804 	addi	r4,r4,29344
   41900:	0042f640 	call	42f64 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   41904:	0042ad00 	call	42ad0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   41908:	01000134 	movhi	r4,4
   4190c:	210acc04 	addi	r4,r4,11056
   41910:	00437480 	call	43748 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   41914:	d0a6b917 	ldw	r2,-25884(gp)
   41918:	d0e6ba17 	ldw	r3,-25880(gp)
   4191c:	d126bb17 	ldw	r4,-25876(gp)
   41920:	200d883a 	mov	r6,r4
   41924:	180b883a 	mov	r5,r3
   41928:	1009883a 	mov	r4,r2
   4192c:	00401fc0 	call	401fc <main>
   41930:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   41934:	01000044 	movi	r4,1
   41938:	00428b80 	call	428b8 <close>
  exit (result);
   4193c:	e13fff17 	ldw	r4,-4(fp)
   41940:	004375c0 	call	4375c <exit>

00041944 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   41944:	defff204 	addi	sp,sp,-56
   41948:	dfc00a15 	stw	ra,40(sp)
   4194c:	df000915 	stw	fp,36(sp)
   41950:	df000904 	addi	fp,sp,36
   41954:	e13fff15 	stw	r4,-4(fp)
   41958:	e1400215 	stw	r5,8(fp)
   4195c:	e1800315 	stw	r6,12(fp)
   41960:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   41964:	e0800204 	addi	r2,fp,8
   41968:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   4196c:	e0bfff17 	ldw	r2,-4(fp)
   41970:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   41974:	00006f06 	br	41b34 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   41978:	e0bff807 	ldb	r2,-32(fp)
   4197c:	10800960 	cmpeqi	r2,r2,37
   41980:	1000041e 	bne	r2,zero,41994 <alt_printf+0x50>
        {
            alt_putchar(c);
   41984:	e0bff807 	ldb	r2,-32(fp)
   41988:	1009883a 	mov	r4,r2
   4198c:	0041b700 	call	41b70 <alt_putchar>
   41990:	00006806 	br	41b34 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   41994:	e0bff717 	ldw	r2,-36(fp)
   41998:	10c00044 	addi	r3,r2,1
   4199c:	e0fff715 	stw	r3,-36(fp)
   419a0:	10800003 	ldbu	r2,0(r2)
   419a4:	e0bff805 	stb	r2,-32(fp)
   419a8:	e0bff807 	ldb	r2,-32(fp)
   419ac:	10006926 	beq	r2,zero,41b54 <alt_printf+0x210>
            {
                if (c == '%')
   419b0:	e0bff807 	ldb	r2,-32(fp)
   419b4:	10800958 	cmpnei	r2,r2,37
   419b8:	1000041e 	bne	r2,zero,419cc <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   419bc:	e0bff807 	ldb	r2,-32(fp)
   419c0:	1009883a 	mov	r4,r2
   419c4:	0041b700 	call	41b70 <alt_putchar>
   419c8:	00005a06 	br	41b34 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   419cc:	e0bff807 	ldb	r2,-32(fp)
   419d0:	108018d8 	cmpnei	r2,r2,99
   419d4:	1000081e 	bne	r2,zero,419f8 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   419d8:	e0bffe17 	ldw	r2,-8(fp)
   419dc:	10c00104 	addi	r3,r2,4
   419e0:	e0fffe15 	stw	r3,-8(fp)
   419e4:	10800017 	ldw	r2,0(r2)
   419e8:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   419ec:	e13ffd17 	ldw	r4,-12(fp)
   419f0:	0041b700 	call	41b70 <alt_putchar>
   419f4:	00004f06 	br	41b34 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   419f8:	e0bff807 	ldb	r2,-32(fp)
   419fc:	10801e18 	cmpnei	r2,r2,120
   41a00:	1000341e 	bne	r2,zero,41ad4 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   41a04:	e0bffe17 	ldw	r2,-8(fp)
   41a08:	10c00104 	addi	r3,r2,4
   41a0c:	e0fffe15 	stw	r3,-8(fp)
   41a10:	10800017 	ldw	r2,0(r2)
   41a14:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   41a18:	e0bffb17 	ldw	r2,-20(fp)
   41a1c:	1000031e 	bne	r2,zero,41a2c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   41a20:	01000c04 	movi	r4,48
   41a24:	0041b700 	call	41b70 <alt_putchar>
                        continue;
   41a28:	00004206 	br	41b34 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   41a2c:	00800704 	movi	r2,28
   41a30:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   41a34:	00000306 	br	41a44 <alt_printf+0x100>
                        digit_shift -= 4;
   41a38:	e0bff917 	ldw	r2,-28(fp)
   41a3c:	10bfff04 	addi	r2,r2,-4
   41a40:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   41a44:	00c003c4 	movi	r3,15
   41a48:	e0bff917 	ldw	r2,-28(fp)
   41a4c:	1884983a 	sll	r2,r3,r2
   41a50:	1007883a 	mov	r3,r2
   41a54:	e0bffb17 	ldw	r2,-20(fp)
   41a58:	1884703a 	and	r2,r3,r2
   41a5c:	103ff626 	beq	r2,zero,41a38 <__alt_data_end+0xfffd0cf8>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   41a60:	00001906 	br	41ac8 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   41a64:	00c003c4 	movi	r3,15
   41a68:	e0bff917 	ldw	r2,-28(fp)
   41a6c:	1884983a 	sll	r2,r3,r2
   41a70:	1007883a 	mov	r3,r2
   41a74:	e0bffb17 	ldw	r2,-20(fp)
   41a78:	1886703a 	and	r3,r3,r2
   41a7c:	e0bff917 	ldw	r2,-28(fp)
   41a80:	1884d83a 	srl	r2,r3,r2
   41a84:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   41a88:	e0bffc17 	ldw	r2,-16(fp)
   41a8c:	108002a8 	cmpgeui	r2,r2,10
   41a90:	1000041e 	bne	r2,zero,41aa4 <alt_printf+0x160>
                            c = '0' + digit;
   41a94:	e0bffc17 	ldw	r2,-16(fp)
   41a98:	10800c04 	addi	r2,r2,48
   41a9c:	e0bff805 	stb	r2,-32(fp)
   41aa0:	00000306 	br	41ab0 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   41aa4:	e0bffc17 	ldw	r2,-16(fp)
   41aa8:	108015c4 	addi	r2,r2,87
   41aac:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   41ab0:	e0bff807 	ldb	r2,-32(fp)
   41ab4:	1009883a 	mov	r4,r2
   41ab8:	0041b700 	call	41b70 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   41abc:	e0bff917 	ldw	r2,-28(fp)
   41ac0:	10bfff04 	addi	r2,r2,-4
   41ac4:	e0bff915 	stw	r2,-28(fp)
   41ac8:	e0bff917 	ldw	r2,-28(fp)
   41acc:	103fe50e 	bge	r2,zero,41a64 <__alt_data_end+0xfffd0d24>
   41ad0:	00001806 	br	41b34 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   41ad4:	e0bff807 	ldb	r2,-32(fp)
   41ad8:	10801cd8 	cmpnei	r2,r2,115
   41adc:	1000151e 	bne	r2,zero,41b34 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   41ae0:	e0bffe17 	ldw	r2,-8(fp)
   41ae4:	10c00104 	addi	r3,r2,4
   41ae8:	e0fffe15 	stw	r3,-8(fp)
   41aec:	10800017 	ldw	r2,0(r2)
   41af0:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   41af4:	00000906 	br	41b1c <alt_printf+0x1d8>
                      alt_putchar(*s++);
   41af8:	e0bffa17 	ldw	r2,-24(fp)
   41afc:	10c00044 	addi	r3,r2,1
   41b00:	e0fffa15 	stw	r3,-24(fp)
   41b04:	10800003 	ldbu	r2,0(r2)
   41b08:	10803fcc 	andi	r2,r2,255
   41b0c:	1080201c 	xori	r2,r2,128
   41b10:	10bfe004 	addi	r2,r2,-128
   41b14:	1009883a 	mov	r4,r2
   41b18:	0041b700 	call	41b70 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   41b1c:	e0bffa17 	ldw	r2,-24(fp)
   41b20:	10800003 	ldbu	r2,0(r2)
   41b24:	10803fcc 	andi	r2,r2,255
   41b28:	1080201c 	xori	r2,r2,128
   41b2c:	10bfe004 	addi	r2,r2,-128
   41b30:	103ff11e 	bne	r2,zero,41af8 <__alt_data_end+0xfffd0db8>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   41b34:	e0bff717 	ldw	r2,-36(fp)
   41b38:	10c00044 	addi	r3,r2,1
   41b3c:	e0fff715 	stw	r3,-36(fp)
   41b40:	10800003 	ldbu	r2,0(r2)
   41b44:	e0bff805 	stb	r2,-32(fp)
   41b48:	e0bff807 	ldb	r2,-32(fp)
   41b4c:	103f8a1e 	bne	r2,zero,41978 <__alt_data_end+0xfffd0c38>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   41b50:	00000106 	br	41b58 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   41b54:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   41b58:	0001883a 	nop
   41b5c:	e037883a 	mov	sp,fp
   41b60:	dfc00117 	ldw	ra,4(sp)
   41b64:	df000017 	ldw	fp,0(sp)
   41b68:	dec00504 	addi	sp,sp,20
   41b6c:	f800283a 	ret

00041b70 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   41b70:	defffd04 	addi	sp,sp,-12
   41b74:	dfc00215 	stw	ra,8(sp)
   41b78:	df000115 	stw	fp,4(sp)
   41b7c:	df000104 	addi	fp,sp,4
   41b80:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   41b84:	00800174 	movhi	r2,5
   41b88:	10a34b04 	addi	r2,r2,-29396
   41b8c:	10800017 	ldw	r2,0(r2)
   41b90:	10800217 	ldw	r2,8(r2)
   41b94:	100b883a 	mov	r5,r2
   41b98:	e13fff17 	ldw	r4,-4(fp)
   41b9c:	00449c00 	call	449c0 <putc>
#endif
#endif
}
   41ba0:	e037883a 	mov	sp,fp
   41ba4:	dfc00117 	ldw	ra,4(sp)
   41ba8:	df000017 	ldw	fp,0(sp)
   41bac:	dec00204 	addi	sp,sp,8
   41bb0:	f800283a 	ret

00041bb4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   41bb4:	defffd04 	addi	sp,sp,-12
   41bb8:	dfc00215 	stw	ra,8(sp)
   41bbc:	df000115 	stw	fp,4(sp)
   41bc0:	df000104 	addi	fp,sp,4
   41bc4:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   41bc8:	00800174 	movhi	r2,5
   41bcc:	10a34b04 	addi	r2,r2,-29396
   41bd0:	10800017 	ldw	r2,0(r2)
   41bd4:	10800217 	ldw	r2,8(r2)
   41bd8:	100b883a 	mov	r5,r2
   41bdc:	e13fff17 	ldw	r4,-4(fp)
   41be0:	00438300 	call	43830 <fputs>
#endif
#endif
}
   41be4:	e037883a 	mov	sp,fp
   41be8:	dfc00117 	ldw	ra,4(sp)
   41bec:	df000017 	ldw	fp,0(sp)
   41bf0:	dec00204 	addi	sp,sp,8
   41bf4:	f800283a 	ret

00041bf8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   41bf8:	defffd04 	addi	sp,sp,-12
   41bfc:	dfc00215 	stw	ra,8(sp)
   41c00:	df000115 	stw	fp,4(sp)
   41c04:	df000104 	addi	fp,sp,4
   41c08:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   41c0c:	01400174 	movhi	r5,5
   41c10:	29634304 	addi	r5,r5,-29428
   41c14:	e13fff17 	ldw	r4,-4(fp)
   41c18:	0042a2c0 	call	42a2c <alt_dev_llist_insert>
}
   41c1c:	e037883a 	mov	sp,fp
   41c20:	dfc00117 	ldw	ra,4(sp)
   41c24:	df000017 	ldw	fp,0(sp)
   41c28:	dec00204 	addi	sp,sp,8
   41c2c:	f800283a 	ret

00041c30 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   41c30:	defffd04 	addi	sp,sp,-12
   41c34:	dfc00215 	stw	ra,8(sp)
   41c38:	df000115 	stw	fp,4(sp)
   41c3c:	df000104 	addi	fp,sp,4
   41c40:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   41c44:	00434ac0 	call	434ac <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   41c48:	00800044 	movi	r2,1
   41c4c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   41c50:	0001883a 	nop
   41c54:	e037883a 	mov	sp,fp
   41c58:	dfc00117 	ldw	ra,4(sp)
   41c5c:	df000017 	ldw	fp,0(sp)
   41c60:	dec00204 	addi	sp,sp,8
   41c64:	f800283a 	ret

00041c68 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   41c68:	defffe04 	addi	sp,sp,-8
   41c6c:	dfc00115 	stw	ra,4(sp)
   41c70:	df000015 	stw	fp,0(sp)
   41c74:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   41c78:	01800144 	movi	r6,5
   41c7c:	000b883a 	mov	r5,zero
   41c80:	01000134 	movhi	r4,4
   41c84:	211cbe04 	addi	r4,r4,29432
   41c88:	0041e140 	call	41e14 <altera_avalon_jtag_uart_init>
   41c8c:	01000134 	movhi	r4,4
   41c90:	211cb404 	addi	r4,r4,29392
   41c94:	0041bf80 	call	41bf8 <alt_dev_reg>
}
   41c98:	0001883a 	nop
   41c9c:	e037883a 	mov	sp,fp
   41ca0:	dfc00117 	ldw	ra,4(sp)
   41ca4:	df000017 	ldw	fp,0(sp)
   41ca8:	dec00204 	addi	sp,sp,8
   41cac:	f800283a 	ret

00041cb0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   41cb0:	defffa04 	addi	sp,sp,-24
   41cb4:	dfc00515 	stw	ra,20(sp)
   41cb8:	df000415 	stw	fp,16(sp)
   41cbc:	df000404 	addi	fp,sp,16
   41cc0:	e13ffd15 	stw	r4,-12(fp)
   41cc4:	e17ffe15 	stw	r5,-8(fp)
   41cc8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   41ccc:	e0bffd17 	ldw	r2,-12(fp)
   41cd0:	10800017 	ldw	r2,0(r2)
   41cd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   41cd8:	e0bffc17 	ldw	r2,-16(fp)
   41cdc:	10c00a04 	addi	r3,r2,40
   41ce0:	e0bffd17 	ldw	r2,-12(fp)
   41ce4:	10800217 	ldw	r2,8(r2)
   41ce8:	100f883a 	mov	r7,r2
   41cec:	e1bfff17 	ldw	r6,-4(fp)
   41cf0:	e17ffe17 	ldw	r5,-8(fp)
   41cf4:	1809883a 	mov	r4,r3
   41cf8:	00422e80 	call	422e8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   41cfc:	e037883a 	mov	sp,fp
   41d00:	dfc00117 	ldw	ra,4(sp)
   41d04:	df000017 	ldw	fp,0(sp)
   41d08:	dec00204 	addi	sp,sp,8
   41d0c:	f800283a 	ret

00041d10 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   41d10:	defffa04 	addi	sp,sp,-24
   41d14:	dfc00515 	stw	ra,20(sp)
   41d18:	df000415 	stw	fp,16(sp)
   41d1c:	df000404 	addi	fp,sp,16
   41d20:	e13ffd15 	stw	r4,-12(fp)
   41d24:	e17ffe15 	stw	r5,-8(fp)
   41d28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   41d2c:	e0bffd17 	ldw	r2,-12(fp)
   41d30:	10800017 	ldw	r2,0(r2)
   41d34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   41d38:	e0bffc17 	ldw	r2,-16(fp)
   41d3c:	10c00a04 	addi	r3,r2,40
   41d40:	e0bffd17 	ldw	r2,-12(fp)
   41d44:	10800217 	ldw	r2,8(r2)
   41d48:	100f883a 	mov	r7,r2
   41d4c:	e1bfff17 	ldw	r6,-4(fp)
   41d50:	e17ffe17 	ldw	r5,-8(fp)
   41d54:	1809883a 	mov	r4,r3
   41d58:	00425040 	call	42504 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   41d5c:	e037883a 	mov	sp,fp
   41d60:	dfc00117 	ldw	ra,4(sp)
   41d64:	df000017 	ldw	fp,0(sp)
   41d68:	dec00204 	addi	sp,sp,8
   41d6c:	f800283a 	ret

00041d70 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   41d70:	defffc04 	addi	sp,sp,-16
   41d74:	dfc00315 	stw	ra,12(sp)
   41d78:	df000215 	stw	fp,8(sp)
   41d7c:	df000204 	addi	fp,sp,8
   41d80:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   41d84:	e0bfff17 	ldw	r2,-4(fp)
   41d88:	10800017 	ldw	r2,0(r2)
   41d8c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   41d90:	e0bffe17 	ldw	r2,-8(fp)
   41d94:	10c00a04 	addi	r3,r2,40
   41d98:	e0bfff17 	ldw	r2,-4(fp)
   41d9c:	10800217 	ldw	r2,8(r2)
   41da0:	100b883a 	mov	r5,r2
   41da4:	1809883a 	mov	r4,r3
   41da8:	00421900 	call	42190 <altera_avalon_jtag_uart_close>
}
   41dac:	e037883a 	mov	sp,fp
   41db0:	dfc00117 	ldw	ra,4(sp)
   41db4:	df000017 	ldw	fp,0(sp)
   41db8:	dec00204 	addi	sp,sp,8
   41dbc:	f800283a 	ret

00041dc0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   41dc0:	defffa04 	addi	sp,sp,-24
   41dc4:	dfc00515 	stw	ra,20(sp)
   41dc8:	df000415 	stw	fp,16(sp)
   41dcc:	df000404 	addi	fp,sp,16
   41dd0:	e13ffd15 	stw	r4,-12(fp)
   41dd4:	e17ffe15 	stw	r5,-8(fp)
   41dd8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   41ddc:	e0bffd17 	ldw	r2,-12(fp)
   41de0:	10800017 	ldw	r2,0(r2)
   41de4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   41de8:	e0bffc17 	ldw	r2,-16(fp)
   41dec:	10800a04 	addi	r2,r2,40
   41df0:	e1bfff17 	ldw	r6,-4(fp)
   41df4:	e17ffe17 	ldw	r5,-8(fp)
   41df8:	1009883a 	mov	r4,r2
   41dfc:	00421f80 	call	421f8 <altera_avalon_jtag_uart_ioctl>
}
   41e00:	e037883a 	mov	sp,fp
   41e04:	dfc00117 	ldw	ra,4(sp)
   41e08:	df000017 	ldw	fp,0(sp)
   41e0c:	dec00204 	addi	sp,sp,8
   41e10:	f800283a 	ret

00041e14 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   41e14:	defffa04 	addi	sp,sp,-24
   41e18:	dfc00515 	stw	ra,20(sp)
   41e1c:	df000415 	stw	fp,16(sp)
   41e20:	df000404 	addi	fp,sp,16
   41e24:	e13ffd15 	stw	r4,-12(fp)
   41e28:	e17ffe15 	stw	r5,-8(fp)
   41e2c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   41e30:	e0bffd17 	ldw	r2,-12(fp)
   41e34:	00c00044 	movi	r3,1
   41e38:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   41e3c:	e0bffd17 	ldw	r2,-12(fp)
   41e40:	10800017 	ldw	r2,0(r2)
   41e44:	10800104 	addi	r2,r2,4
   41e48:	1007883a 	mov	r3,r2
   41e4c:	e0bffd17 	ldw	r2,-12(fp)
   41e50:	10800817 	ldw	r2,32(r2)
   41e54:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   41e58:	e0bffe17 	ldw	r2,-8(fp)
   41e5c:	e0ffff17 	ldw	r3,-4(fp)
   41e60:	d8000015 	stw	zero,0(sp)
   41e64:	e1fffd17 	ldw	r7,-12(fp)
   41e68:	01800134 	movhi	r6,4
   41e6c:	3187b704 	addi	r6,r6,7900
   41e70:	180b883a 	mov	r5,r3
   41e74:	1009883a 	mov	r4,r2
   41e78:	0042bb00 	call	42bb0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   41e7c:	e0bffd17 	ldw	r2,-12(fp)
   41e80:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   41e84:	e0bffd17 	ldw	r2,-12(fp)
   41e88:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   41e8c:	00800174 	movhi	r2,5
   41e90:	10a9fe04 	addi	r2,r2,-22536
   41e94:	10800017 	ldw	r2,0(r2)
   41e98:	e1fffd17 	ldw	r7,-12(fp)
   41e9c:	01800134 	movhi	r6,4
   41ea0:	31883a04 	addi	r6,r6,8424
   41ea4:	100b883a 	mov	r5,r2
   41ea8:	1809883a 	mov	r4,r3
   41eac:	00427280 	call	42728 <alt_alarm_start>
   41eb0:	1000040e 	bge	r2,zero,41ec4 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   41eb4:	e0fffd17 	ldw	r3,-12(fp)
   41eb8:	00a00034 	movhi	r2,32768
   41ebc:	10bfffc4 	addi	r2,r2,-1
   41ec0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   41ec4:	0001883a 	nop
   41ec8:	e037883a 	mov	sp,fp
   41ecc:	dfc00117 	ldw	ra,4(sp)
   41ed0:	df000017 	ldw	fp,0(sp)
   41ed4:	dec00204 	addi	sp,sp,8
   41ed8:	f800283a 	ret

00041edc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   41edc:	defff804 	addi	sp,sp,-32
   41ee0:	df000715 	stw	fp,28(sp)
   41ee4:	df000704 	addi	fp,sp,28
   41ee8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   41eec:	e0bfff17 	ldw	r2,-4(fp)
   41ef0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   41ef4:	e0bffb17 	ldw	r2,-20(fp)
   41ef8:	10800017 	ldw	r2,0(r2)
   41efc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   41f00:	e0bffc17 	ldw	r2,-16(fp)
   41f04:	10800104 	addi	r2,r2,4
   41f08:	10800037 	ldwio	r2,0(r2)
   41f0c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   41f10:	e0bffd17 	ldw	r2,-12(fp)
   41f14:	1080c00c 	andi	r2,r2,768
   41f18:	10006d26 	beq	r2,zero,420d0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   41f1c:	e0bffd17 	ldw	r2,-12(fp)
   41f20:	1080400c 	andi	r2,r2,256
   41f24:	10003526 	beq	r2,zero,41ffc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   41f28:	00800074 	movhi	r2,1
   41f2c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   41f30:	e0bffb17 	ldw	r2,-20(fp)
   41f34:	10800a17 	ldw	r2,40(r2)
   41f38:	10800044 	addi	r2,r2,1
   41f3c:	1081ffcc 	andi	r2,r2,2047
   41f40:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   41f44:	e0bffb17 	ldw	r2,-20(fp)
   41f48:	10c00b17 	ldw	r3,44(r2)
   41f4c:	e0bffe17 	ldw	r2,-8(fp)
   41f50:	18801526 	beq	r3,r2,41fa8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   41f54:	e0bffc17 	ldw	r2,-16(fp)
   41f58:	10800037 	ldwio	r2,0(r2)
   41f5c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   41f60:	e0bff917 	ldw	r2,-28(fp)
   41f64:	10a0000c 	andi	r2,r2,32768
   41f68:	10001126 	beq	r2,zero,41fb0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   41f6c:	e0bffb17 	ldw	r2,-20(fp)
   41f70:	10800a17 	ldw	r2,40(r2)
   41f74:	e0fff917 	ldw	r3,-28(fp)
   41f78:	1809883a 	mov	r4,r3
   41f7c:	e0fffb17 	ldw	r3,-20(fp)
   41f80:	1885883a 	add	r2,r3,r2
   41f84:	10800e04 	addi	r2,r2,56
   41f88:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   41f8c:	e0bffb17 	ldw	r2,-20(fp)
   41f90:	10800a17 	ldw	r2,40(r2)
   41f94:	10800044 	addi	r2,r2,1
   41f98:	10c1ffcc 	andi	r3,r2,2047
   41f9c:	e0bffb17 	ldw	r2,-20(fp)
   41fa0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   41fa4:	003fe206 	br	41f30 <__alt_data_end+0xfffd11f0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   41fa8:	0001883a 	nop
   41fac:	00000106 	br	41fb4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   41fb0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   41fb4:	e0bff917 	ldw	r2,-28(fp)
   41fb8:	10bfffec 	andhi	r2,r2,65535
   41fbc:	10000f26 	beq	r2,zero,41ffc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   41fc0:	e0bffb17 	ldw	r2,-20(fp)
   41fc4:	10c00817 	ldw	r3,32(r2)
   41fc8:	00bfff84 	movi	r2,-2
   41fcc:	1886703a 	and	r3,r3,r2
   41fd0:	e0bffb17 	ldw	r2,-20(fp)
   41fd4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   41fd8:	e0bffc17 	ldw	r2,-16(fp)
   41fdc:	10800104 	addi	r2,r2,4
   41fe0:	1007883a 	mov	r3,r2
   41fe4:	e0bffb17 	ldw	r2,-20(fp)
   41fe8:	10800817 	ldw	r2,32(r2)
   41fec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   41ff0:	e0bffc17 	ldw	r2,-16(fp)
   41ff4:	10800104 	addi	r2,r2,4
   41ff8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   41ffc:	e0bffd17 	ldw	r2,-12(fp)
   42000:	1080800c 	andi	r2,r2,512
   42004:	103fbe26 	beq	r2,zero,41f00 <__alt_data_end+0xfffd11c0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   42008:	e0bffd17 	ldw	r2,-12(fp)
   4200c:	1004d43a 	srli	r2,r2,16
   42010:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   42014:	00001406 	br	42068 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   42018:	e0bffc17 	ldw	r2,-16(fp)
   4201c:	e0fffb17 	ldw	r3,-20(fp)
   42020:	18c00d17 	ldw	r3,52(r3)
   42024:	e13ffb17 	ldw	r4,-20(fp)
   42028:	20c7883a 	add	r3,r4,r3
   4202c:	18c20e04 	addi	r3,r3,2104
   42030:	18c00003 	ldbu	r3,0(r3)
   42034:	18c03fcc 	andi	r3,r3,255
   42038:	18c0201c 	xori	r3,r3,128
   4203c:	18ffe004 	addi	r3,r3,-128
   42040:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   42044:	e0bffb17 	ldw	r2,-20(fp)
   42048:	10800d17 	ldw	r2,52(r2)
   4204c:	10800044 	addi	r2,r2,1
   42050:	10c1ffcc 	andi	r3,r2,2047
   42054:	e0bffb17 	ldw	r2,-20(fp)
   42058:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4205c:	e0bffa17 	ldw	r2,-24(fp)
   42060:	10bfffc4 	addi	r2,r2,-1
   42064:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   42068:	e0bffa17 	ldw	r2,-24(fp)
   4206c:	10000526 	beq	r2,zero,42084 <altera_avalon_jtag_uart_irq+0x1a8>
   42070:	e0bffb17 	ldw	r2,-20(fp)
   42074:	10c00d17 	ldw	r3,52(r2)
   42078:	e0bffb17 	ldw	r2,-20(fp)
   4207c:	10800c17 	ldw	r2,48(r2)
   42080:	18bfe51e 	bne	r3,r2,42018 <__alt_data_end+0xfffd12d8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   42084:	e0bffa17 	ldw	r2,-24(fp)
   42088:	103f9d26 	beq	r2,zero,41f00 <__alt_data_end+0xfffd11c0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4208c:	e0bffb17 	ldw	r2,-20(fp)
   42090:	10c00817 	ldw	r3,32(r2)
   42094:	00bfff44 	movi	r2,-3
   42098:	1886703a 	and	r3,r3,r2
   4209c:	e0bffb17 	ldw	r2,-20(fp)
   420a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   420a4:	e0bffb17 	ldw	r2,-20(fp)
   420a8:	10800017 	ldw	r2,0(r2)
   420ac:	10800104 	addi	r2,r2,4
   420b0:	1007883a 	mov	r3,r2
   420b4:	e0bffb17 	ldw	r2,-20(fp)
   420b8:	10800817 	ldw	r2,32(r2)
   420bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   420c0:	e0bffc17 	ldw	r2,-16(fp)
   420c4:	10800104 	addi	r2,r2,4
   420c8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   420cc:	003f8c06 	br	41f00 <__alt_data_end+0xfffd11c0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   420d0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   420d4:	0001883a 	nop
   420d8:	e037883a 	mov	sp,fp
   420dc:	df000017 	ldw	fp,0(sp)
   420e0:	dec00104 	addi	sp,sp,4
   420e4:	f800283a 	ret

000420e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   420e8:	defff804 	addi	sp,sp,-32
   420ec:	df000715 	stw	fp,28(sp)
   420f0:	df000704 	addi	fp,sp,28
   420f4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   420f8:	e0bffb17 	ldw	r2,-20(fp)
   420fc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   42100:	e0bff917 	ldw	r2,-28(fp)
   42104:	10800017 	ldw	r2,0(r2)
   42108:	10800104 	addi	r2,r2,4
   4210c:	10800037 	ldwio	r2,0(r2)
   42110:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   42114:	e0bffa17 	ldw	r2,-24(fp)
   42118:	1081000c 	andi	r2,r2,1024
   4211c:	10000b26 	beq	r2,zero,4214c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   42120:	e0bff917 	ldw	r2,-28(fp)
   42124:	10800017 	ldw	r2,0(r2)
   42128:	10800104 	addi	r2,r2,4
   4212c:	1007883a 	mov	r3,r2
   42130:	e0bff917 	ldw	r2,-28(fp)
   42134:	10800817 	ldw	r2,32(r2)
   42138:	10810014 	ori	r2,r2,1024
   4213c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   42140:	e0bff917 	ldw	r2,-28(fp)
   42144:	10000915 	stw	zero,36(r2)
   42148:	00000a06 	br	42174 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4214c:	e0bff917 	ldw	r2,-28(fp)
   42150:	10c00917 	ldw	r3,36(r2)
   42154:	00a00034 	movhi	r2,32768
   42158:	10bfff04 	addi	r2,r2,-4
   4215c:	10c00536 	bltu	r2,r3,42174 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   42160:	e0bff917 	ldw	r2,-28(fp)
   42164:	10800917 	ldw	r2,36(r2)
   42168:	10c00044 	addi	r3,r2,1
   4216c:	e0bff917 	ldw	r2,-28(fp)
   42170:	10c00915 	stw	r3,36(r2)
   42174:	00800174 	movhi	r2,5
   42178:	10a9fe04 	addi	r2,r2,-22536
   4217c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   42180:	e037883a 	mov	sp,fp
   42184:	df000017 	ldw	fp,0(sp)
   42188:	dec00104 	addi	sp,sp,4
   4218c:	f800283a 	ret

00042190 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   42190:	defffd04 	addi	sp,sp,-12
   42194:	df000215 	stw	fp,8(sp)
   42198:	df000204 	addi	fp,sp,8
   4219c:	e13ffe15 	stw	r4,-8(fp)
   421a0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   421a4:	00000506 	br	421bc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   421a8:	e0bfff17 	ldw	r2,-4(fp)
   421ac:	1090000c 	andi	r2,r2,16384
   421b0:	10000226 	beq	r2,zero,421bc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   421b4:	00bffd44 	movi	r2,-11
   421b8:	00000b06 	br	421e8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   421bc:	e0bffe17 	ldw	r2,-8(fp)
   421c0:	10c00d17 	ldw	r3,52(r2)
   421c4:	e0bffe17 	ldw	r2,-8(fp)
   421c8:	10800c17 	ldw	r2,48(r2)
   421cc:	18800526 	beq	r3,r2,421e4 <altera_avalon_jtag_uart_close+0x54>
   421d0:	e0bffe17 	ldw	r2,-8(fp)
   421d4:	10c00917 	ldw	r3,36(r2)
   421d8:	e0bffe17 	ldw	r2,-8(fp)
   421dc:	10800117 	ldw	r2,4(r2)
   421e0:	18bff136 	bltu	r3,r2,421a8 <__alt_data_end+0xfffd1468>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   421e4:	0005883a 	mov	r2,zero
}
   421e8:	e037883a 	mov	sp,fp
   421ec:	df000017 	ldw	fp,0(sp)
   421f0:	dec00104 	addi	sp,sp,4
   421f4:	f800283a 	ret

000421f8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   421f8:	defffa04 	addi	sp,sp,-24
   421fc:	df000515 	stw	fp,20(sp)
   42200:	df000504 	addi	fp,sp,20
   42204:	e13ffd15 	stw	r4,-12(fp)
   42208:	e17ffe15 	stw	r5,-8(fp)
   4220c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   42210:	00bff9c4 	movi	r2,-25
   42214:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   42218:	e0bffe17 	ldw	r2,-8(fp)
   4221c:	10da8060 	cmpeqi	r3,r2,27137
   42220:	1800031e 	bne	r3,zero,42230 <altera_avalon_jtag_uart_ioctl+0x38>
   42224:	109a80a0 	cmpeqi	r2,r2,27138
   42228:	1000181e 	bne	r2,zero,4228c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   4222c:	00002906 	br	422d4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   42230:	e0bffd17 	ldw	r2,-12(fp)
   42234:	10c00117 	ldw	r3,4(r2)
   42238:	00a00034 	movhi	r2,32768
   4223c:	10bfffc4 	addi	r2,r2,-1
   42240:	18802126 	beq	r3,r2,422c8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   42244:	e0bfff17 	ldw	r2,-4(fp)
   42248:	10800017 	ldw	r2,0(r2)
   4224c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   42250:	e0bffc17 	ldw	r2,-16(fp)
   42254:	10800090 	cmplti	r2,r2,2
   42258:	1000061e 	bne	r2,zero,42274 <altera_avalon_jtag_uart_ioctl+0x7c>
   4225c:	e0fffc17 	ldw	r3,-16(fp)
   42260:	00a00034 	movhi	r2,32768
   42264:	10bfffc4 	addi	r2,r2,-1
   42268:	18800226 	beq	r3,r2,42274 <altera_avalon_jtag_uart_ioctl+0x7c>
   4226c:	e0bffc17 	ldw	r2,-16(fp)
   42270:	00000206 	br	4227c <altera_avalon_jtag_uart_ioctl+0x84>
   42274:	00a00034 	movhi	r2,32768
   42278:	10bfff84 	addi	r2,r2,-2
   4227c:	e0fffd17 	ldw	r3,-12(fp)
   42280:	18800115 	stw	r2,4(r3)
      rc = 0;
   42284:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   42288:	00000f06 	br	422c8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4228c:	e0bffd17 	ldw	r2,-12(fp)
   42290:	10c00117 	ldw	r3,4(r2)
   42294:	00a00034 	movhi	r2,32768
   42298:	10bfffc4 	addi	r2,r2,-1
   4229c:	18800c26 	beq	r3,r2,422d0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   422a0:	e0bffd17 	ldw	r2,-12(fp)
   422a4:	10c00917 	ldw	r3,36(r2)
   422a8:	e0bffd17 	ldw	r2,-12(fp)
   422ac:	10800117 	ldw	r2,4(r2)
   422b0:	1885803a 	cmpltu	r2,r3,r2
   422b4:	10c03fcc 	andi	r3,r2,255
   422b8:	e0bfff17 	ldw	r2,-4(fp)
   422bc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   422c0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   422c4:	00000206 	br	422d0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   422c8:	0001883a 	nop
   422cc:	00000106 	br	422d4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   422d0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   422d4:	e0bffb17 	ldw	r2,-20(fp)
}
   422d8:	e037883a 	mov	sp,fp
   422dc:	df000017 	ldw	fp,0(sp)
   422e0:	dec00104 	addi	sp,sp,4
   422e4:	f800283a 	ret

000422e8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   422e8:	defff304 	addi	sp,sp,-52
   422ec:	dfc00c15 	stw	ra,48(sp)
   422f0:	df000b15 	stw	fp,44(sp)
   422f4:	df000b04 	addi	fp,sp,44
   422f8:	e13ffc15 	stw	r4,-16(fp)
   422fc:	e17ffd15 	stw	r5,-12(fp)
   42300:	e1bffe15 	stw	r6,-8(fp)
   42304:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   42308:	e0bffd17 	ldw	r2,-12(fp)
   4230c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   42310:	00004706 	br	42430 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   42314:	e0bffc17 	ldw	r2,-16(fp)
   42318:	10800a17 	ldw	r2,40(r2)
   4231c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   42320:	e0bffc17 	ldw	r2,-16(fp)
   42324:	10800b17 	ldw	r2,44(r2)
   42328:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4232c:	e0fff717 	ldw	r3,-36(fp)
   42330:	e0bff817 	ldw	r2,-32(fp)
   42334:	18800536 	bltu	r3,r2,4234c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   42338:	e0fff717 	ldw	r3,-36(fp)
   4233c:	e0bff817 	ldw	r2,-32(fp)
   42340:	1885c83a 	sub	r2,r3,r2
   42344:	e0bff615 	stw	r2,-40(fp)
   42348:	00000406 	br	4235c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4234c:	00c20004 	movi	r3,2048
   42350:	e0bff817 	ldw	r2,-32(fp)
   42354:	1885c83a 	sub	r2,r3,r2
   42358:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4235c:	e0bff617 	ldw	r2,-40(fp)
   42360:	10001e26 	beq	r2,zero,423dc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   42364:	e0fffe17 	ldw	r3,-8(fp)
   42368:	e0bff617 	ldw	r2,-40(fp)
   4236c:	1880022e 	bgeu	r3,r2,42378 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   42370:	e0bffe17 	ldw	r2,-8(fp)
   42374:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   42378:	e0bffc17 	ldw	r2,-16(fp)
   4237c:	10c00e04 	addi	r3,r2,56
   42380:	e0bff817 	ldw	r2,-32(fp)
   42384:	1885883a 	add	r2,r3,r2
   42388:	e1bff617 	ldw	r6,-40(fp)
   4238c:	100b883a 	mov	r5,r2
   42390:	e13ff517 	ldw	r4,-44(fp)
   42394:	004467c0 	call	4467c <memcpy>
      ptr   += n;
   42398:	e0fff517 	ldw	r3,-44(fp)
   4239c:	e0bff617 	ldw	r2,-40(fp)
   423a0:	1885883a 	add	r2,r3,r2
   423a4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   423a8:	e0fffe17 	ldw	r3,-8(fp)
   423ac:	e0bff617 	ldw	r2,-40(fp)
   423b0:	1885c83a 	sub	r2,r3,r2
   423b4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   423b8:	e0fff817 	ldw	r3,-32(fp)
   423bc:	e0bff617 	ldw	r2,-40(fp)
   423c0:	1885883a 	add	r2,r3,r2
   423c4:	10c1ffcc 	andi	r3,r2,2047
   423c8:	e0bffc17 	ldw	r2,-16(fp)
   423cc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   423d0:	e0bffe17 	ldw	r2,-8(fp)
   423d4:	00bfcf16 	blt	zero,r2,42314 <__alt_data_end+0xfffd15d4>
   423d8:	00000106 	br	423e0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   423dc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   423e0:	e0fff517 	ldw	r3,-44(fp)
   423e4:	e0bffd17 	ldw	r2,-12(fp)
   423e8:	1880141e 	bne	r3,r2,4243c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   423ec:	e0bfff17 	ldw	r2,-4(fp)
   423f0:	1090000c 	andi	r2,r2,16384
   423f4:	1000131e 	bne	r2,zero,42444 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   423f8:	0001883a 	nop
   423fc:	e0bffc17 	ldw	r2,-16(fp)
   42400:	10c00a17 	ldw	r3,40(r2)
   42404:	e0bff717 	ldw	r2,-36(fp)
   42408:	1880051e 	bne	r3,r2,42420 <altera_avalon_jtag_uart_read+0x138>
   4240c:	e0bffc17 	ldw	r2,-16(fp)
   42410:	10c00917 	ldw	r3,36(r2)
   42414:	e0bffc17 	ldw	r2,-16(fp)
   42418:	10800117 	ldw	r2,4(r2)
   4241c:	18bff736 	bltu	r3,r2,423fc <__alt_data_end+0xfffd16bc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   42420:	e0bffc17 	ldw	r2,-16(fp)
   42424:	10c00a17 	ldw	r3,40(r2)
   42428:	e0bff717 	ldw	r2,-36(fp)
   4242c:	18800726 	beq	r3,r2,4244c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   42430:	e0bffe17 	ldw	r2,-8(fp)
   42434:	00bfb716 	blt	zero,r2,42314 <__alt_data_end+0xfffd15d4>
   42438:	00000506 	br	42450 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   4243c:	0001883a 	nop
   42440:	00000306 	br	42450 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   42444:	0001883a 	nop
   42448:	00000106 	br	42450 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   4244c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   42450:	e0fff517 	ldw	r3,-44(fp)
   42454:	e0bffd17 	ldw	r2,-12(fp)
   42458:	18801826 	beq	r3,r2,424bc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4245c:	0005303a 	rdctl	r2,status
   42460:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42464:	e0fffb17 	ldw	r3,-20(fp)
   42468:	00bfff84 	movi	r2,-2
   4246c:	1884703a 	and	r2,r3,r2
   42470:	1001703a 	wrctl	status,r2
  
  return context;
   42474:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   42478:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4247c:	e0bffc17 	ldw	r2,-16(fp)
   42480:	10800817 	ldw	r2,32(r2)
   42484:	10c00054 	ori	r3,r2,1
   42488:	e0bffc17 	ldw	r2,-16(fp)
   4248c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   42490:	e0bffc17 	ldw	r2,-16(fp)
   42494:	10800017 	ldw	r2,0(r2)
   42498:	10800104 	addi	r2,r2,4
   4249c:	1007883a 	mov	r3,r2
   424a0:	e0bffc17 	ldw	r2,-16(fp)
   424a4:	10800817 	ldw	r2,32(r2)
   424a8:	18800035 	stwio	r2,0(r3)
   424ac:	e0bffa17 	ldw	r2,-24(fp)
   424b0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   424b4:	e0bff917 	ldw	r2,-28(fp)
   424b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   424bc:	e0fff517 	ldw	r3,-44(fp)
   424c0:	e0bffd17 	ldw	r2,-12(fp)
   424c4:	18800426 	beq	r3,r2,424d8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   424c8:	e0fff517 	ldw	r3,-44(fp)
   424cc:	e0bffd17 	ldw	r2,-12(fp)
   424d0:	1885c83a 	sub	r2,r3,r2
   424d4:	00000606 	br	424f0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   424d8:	e0bfff17 	ldw	r2,-4(fp)
   424dc:	1090000c 	andi	r2,r2,16384
   424e0:	10000226 	beq	r2,zero,424ec <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   424e4:	00bffd44 	movi	r2,-11
   424e8:	00000106 	br	424f0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   424ec:	00bffec4 	movi	r2,-5
}
   424f0:	e037883a 	mov	sp,fp
   424f4:	dfc00117 	ldw	ra,4(sp)
   424f8:	df000017 	ldw	fp,0(sp)
   424fc:	dec00204 	addi	sp,sp,8
   42500:	f800283a 	ret

00042504 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   42504:	defff304 	addi	sp,sp,-52
   42508:	dfc00c15 	stw	ra,48(sp)
   4250c:	df000b15 	stw	fp,44(sp)
   42510:	df000b04 	addi	fp,sp,44
   42514:	e13ffc15 	stw	r4,-16(fp)
   42518:	e17ffd15 	stw	r5,-12(fp)
   4251c:	e1bffe15 	stw	r6,-8(fp)
   42520:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   42524:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   42528:	e0bffd17 	ldw	r2,-12(fp)
   4252c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   42530:	00003706 	br	42610 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   42534:	e0bffc17 	ldw	r2,-16(fp)
   42538:	10800c17 	ldw	r2,48(r2)
   4253c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   42540:	e0bffc17 	ldw	r2,-16(fp)
   42544:	10800d17 	ldw	r2,52(r2)
   42548:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4254c:	e0fff917 	ldw	r3,-28(fp)
   42550:	e0bff517 	ldw	r2,-44(fp)
   42554:	1880062e 	bgeu	r3,r2,42570 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   42558:	e0fff517 	ldw	r3,-44(fp)
   4255c:	e0bff917 	ldw	r2,-28(fp)
   42560:	1885c83a 	sub	r2,r3,r2
   42564:	10bfffc4 	addi	r2,r2,-1
   42568:	e0bff615 	stw	r2,-40(fp)
   4256c:	00000b06 	br	4259c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   42570:	e0bff517 	ldw	r2,-44(fp)
   42574:	10000526 	beq	r2,zero,4258c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   42578:	00c20004 	movi	r3,2048
   4257c:	e0bff917 	ldw	r2,-28(fp)
   42580:	1885c83a 	sub	r2,r3,r2
   42584:	e0bff615 	stw	r2,-40(fp)
   42588:	00000406 	br	4259c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4258c:	00c1ffc4 	movi	r3,2047
   42590:	e0bff917 	ldw	r2,-28(fp)
   42594:	1885c83a 	sub	r2,r3,r2
   42598:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4259c:	e0bff617 	ldw	r2,-40(fp)
   425a0:	10001e26 	beq	r2,zero,4261c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   425a4:	e0fffe17 	ldw	r3,-8(fp)
   425a8:	e0bff617 	ldw	r2,-40(fp)
   425ac:	1880022e 	bgeu	r3,r2,425b8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   425b0:	e0bffe17 	ldw	r2,-8(fp)
   425b4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   425b8:	e0bffc17 	ldw	r2,-16(fp)
   425bc:	10c20e04 	addi	r3,r2,2104
   425c0:	e0bff917 	ldw	r2,-28(fp)
   425c4:	1885883a 	add	r2,r3,r2
   425c8:	e1bff617 	ldw	r6,-40(fp)
   425cc:	e17ffd17 	ldw	r5,-12(fp)
   425d0:	1009883a 	mov	r4,r2
   425d4:	004467c0 	call	4467c <memcpy>
      ptr   += n;
   425d8:	e0fffd17 	ldw	r3,-12(fp)
   425dc:	e0bff617 	ldw	r2,-40(fp)
   425e0:	1885883a 	add	r2,r3,r2
   425e4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   425e8:	e0fffe17 	ldw	r3,-8(fp)
   425ec:	e0bff617 	ldw	r2,-40(fp)
   425f0:	1885c83a 	sub	r2,r3,r2
   425f4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   425f8:	e0fff917 	ldw	r3,-28(fp)
   425fc:	e0bff617 	ldw	r2,-40(fp)
   42600:	1885883a 	add	r2,r3,r2
   42604:	10c1ffcc 	andi	r3,r2,2047
   42608:	e0bffc17 	ldw	r2,-16(fp)
   4260c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   42610:	e0bffe17 	ldw	r2,-8(fp)
   42614:	00bfc716 	blt	zero,r2,42534 <__alt_data_end+0xfffd17f4>
   42618:	00000106 	br	42620 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   4261c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   42620:	0005303a 	rdctl	r2,status
   42624:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42628:	e0fffb17 	ldw	r3,-20(fp)
   4262c:	00bfff84 	movi	r2,-2
   42630:	1884703a 	and	r2,r3,r2
   42634:	1001703a 	wrctl	status,r2
  
  return context;
   42638:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4263c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   42640:	e0bffc17 	ldw	r2,-16(fp)
   42644:	10800817 	ldw	r2,32(r2)
   42648:	10c00094 	ori	r3,r2,2
   4264c:	e0bffc17 	ldw	r2,-16(fp)
   42650:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   42654:	e0bffc17 	ldw	r2,-16(fp)
   42658:	10800017 	ldw	r2,0(r2)
   4265c:	10800104 	addi	r2,r2,4
   42660:	1007883a 	mov	r3,r2
   42664:	e0bffc17 	ldw	r2,-16(fp)
   42668:	10800817 	ldw	r2,32(r2)
   4266c:	18800035 	stwio	r2,0(r3)
   42670:	e0bffa17 	ldw	r2,-24(fp)
   42674:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42678:	e0bff817 	ldw	r2,-32(fp)
   4267c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   42680:	e0bffe17 	ldw	r2,-8(fp)
   42684:	0080100e 	bge	zero,r2,426c8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   42688:	e0bfff17 	ldw	r2,-4(fp)
   4268c:	1090000c 	andi	r2,r2,16384
   42690:	1000101e 	bne	r2,zero,426d4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   42694:	0001883a 	nop
   42698:	e0bffc17 	ldw	r2,-16(fp)
   4269c:	10c00d17 	ldw	r3,52(r2)
   426a0:	e0bff517 	ldw	r2,-44(fp)
   426a4:	1880051e 	bne	r3,r2,426bc <altera_avalon_jtag_uart_write+0x1b8>
   426a8:	e0bffc17 	ldw	r2,-16(fp)
   426ac:	10c00917 	ldw	r3,36(r2)
   426b0:	e0bffc17 	ldw	r2,-16(fp)
   426b4:	10800117 	ldw	r2,4(r2)
   426b8:	18bff736 	bltu	r3,r2,42698 <__alt_data_end+0xfffd1958>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   426bc:	e0bffc17 	ldw	r2,-16(fp)
   426c0:	10800917 	ldw	r2,36(r2)
   426c4:	1000051e 	bne	r2,zero,426dc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   426c8:	e0bffe17 	ldw	r2,-8(fp)
   426cc:	00bfd016 	blt	zero,r2,42610 <__alt_data_end+0xfffd18d0>
   426d0:	00000306 	br	426e0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   426d4:	0001883a 	nop
   426d8:	00000106 	br	426e0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   426dc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   426e0:	e0fffd17 	ldw	r3,-12(fp)
   426e4:	e0bff717 	ldw	r2,-36(fp)
   426e8:	18800426 	beq	r3,r2,426fc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   426ec:	e0fffd17 	ldw	r3,-12(fp)
   426f0:	e0bff717 	ldw	r2,-36(fp)
   426f4:	1885c83a 	sub	r2,r3,r2
   426f8:	00000606 	br	42714 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   426fc:	e0bfff17 	ldw	r2,-4(fp)
   42700:	1090000c 	andi	r2,r2,16384
   42704:	10000226 	beq	r2,zero,42710 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   42708:	00bffd44 	movi	r2,-11
   4270c:	00000106 	br	42714 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   42710:	00bffec4 	movi	r2,-5
}
   42714:	e037883a 	mov	sp,fp
   42718:	dfc00117 	ldw	ra,4(sp)
   4271c:	df000017 	ldw	fp,0(sp)
   42720:	dec00204 	addi	sp,sp,8
   42724:	f800283a 	ret

00042728 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   42728:	defff504 	addi	sp,sp,-44
   4272c:	df000a15 	stw	fp,40(sp)
   42730:	df000a04 	addi	fp,sp,40
   42734:	e13ffc15 	stw	r4,-16(fp)
   42738:	e17ffd15 	stw	r5,-12(fp)
   4273c:	e1bffe15 	stw	r6,-8(fp)
   42740:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   42744:	e03ff615 	stw	zero,-40(fp)
   42748:	00800174 	movhi	r2,5
   4274c:	10a9fe04 	addi	r2,r2,-22536
   42750:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   42754:	10003f26 	beq	r2,zero,42854 <alt_alarm_start+0x12c>
  {
    if (alarm)
   42758:	e0bffc17 	ldw	r2,-16(fp)
   4275c:	10003b26 	beq	r2,zero,4284c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   42760:	e0bffc17 	ldw	r2,-16(fp)
   42764:	e0fffe17 	ldw	r3,-8(fp)
   42768:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   4276c:	e0bffc17 	ldw	r2,-16(fp)
   42770:	e0ffff17 	ldw	r3,-4(fp)
   42774:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   42778:	0005303a 	rdctl	r2,status
   4277c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42780:	e0fff917 	ldw	r3,-28(fp)
   42784:	00bfff84 	movi	r2,-2
   42788:	1884703a 	and	r2,r3,r2
   4278c:	1001703a 	wrctl	status,r2
  
  return context;
   42790:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   42794:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   42798:	00800174 	movhi	r2,5
   4279c:	10a9ff04 	addi	r2,r2,-22532
   427a0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   427a4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   427a8:	e0fffd17 	ldw	r3,-12(fp)
   427ac:	e0bff617 	ldw	r2,-40(fp)
   427b0:	1885883a 	add	r2,r3,r2
   427b4:	10c00044 	addi	r3,r2,1
   427b8:	e0bffc17 	ldw	r2,-16(fp)
   427bc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   427c0:	e0bffc17 	ldw	r2,-16(fp)
   427c4:	10c00217 	ldw	r3,8(r2)
   427c8:	e0bff617 	ldw	r2,-40(fp)
   427cc:	1880042e 	bgeu	r3,r2,427e0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   427d0:	e0bffc17 	ldw	r2,-16(fp)
   427d4:	00c00044 	movi	r3,1
   427d8:	10c00405 	stb	r3,16(r2)
   427dc:	00000206 	br	427e8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   427e0:	e0bffc17 	ldw	r2,-16(fp)
   427e4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   427e8:	e0fffc17 	ldw	r3,-16(fp)
   427ec:	00800174 	movhi	r2,5
   427f0:	10a34804 	addi	r2,r2,-29408
   427f4:	e0bffa15 	stw	r2,-24(fp)
   427f8:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   427fc:	e0bffb17 	ldw	r2,-20(fp)
   42800:	e0fffa17 	ldw	r3,-24(fp)
   42804:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   42808:	e0bffa17 	ldw	r2,-24(fp)
   4280c:	10c00017 	ldw	r3,0(r2)
   42810:	e0bffb17 	ldw	r2,-20(fp)
   42814:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   42818:	e0bffa17 	ldw	r2,-24(fp)
   4281c:	10800017 	ldw	r2,0(r2)
   42820:	e0fffb17 	ldw	r3,-20(fp)
   42824:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   42828:	e0bffa17 	ldw	r2,-24(fp)
   4282c:	e0fffb17 	ldw	r3,-20(fp)
   42830:	10c00015 	stw	r3,0(r2)
   42834:	e0bff817 	ldw	r2,-32(fp)
   42838:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4283c:	e0bff717 	ldw	r2,-36(fp)
   42840:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   42844:	0005883a 	mov	r2,zero
   42848:	00000306 	br	42858 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   4284c:	00bffa84 	movi	r2,-22
   42850:	00000106 	br	42858 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   42854:	00bfde84 	movi	r2,-134
  }
}
   42858:	e037883a 	mov	sp,fp
   4285c:	df000017 	ldw	fp,0(sp)
   42860:	dec00104 	addi	sp,sp,4
   42864:	f800283a 	ret

00042868 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42868:	defffe04 	addi	sp,sp,-8
   4286c:	dfc00115 	stw	ra,4(sp)
   42870:	df000015 	stw	fp,0(sp)
   42874:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42878:	00800174 	movhi	r2,5
   4287c:	10a34604 	addi	r2,r2,-29416
   42880:	10800017 	ldw	r2,0(r2)
   42884:	10000526 	beq	r2,zero,4289c <alt_get_errno+0x34>
   42888:	00800174 	movhi	r2,5
   4288c:	10a34604 	addi	r2,r2,-29416
   42890:	10800017 	ldw	r2,0(r2)
   42894:	103ee83a 	callr	r2
   42898:	00000206 	br	428a4 <alt_get_errno+0x3c>
   4289c:	00800174 	movhi	r2,5
   428a0:	10aa0004 	addi	r2,r2,-22528
}
   428a4:	e037883a 	mov	sp,fp
   428a8:	dfc00117 	ldw	ra,4(sp)
   428ac:	df000017 	ldw	fp,0(sp)
   428b0:	dec00204 	addi	sp,sp,8
   428b4:	f800283a 	ret

000428b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   428b8:	defffb04 	addi	sp,sp,-20
   428bc:	dfc00415 	stw	ra,16(sp)
   428c0:	df000315 	stw	fp,12(sp)
   428c4:	df000304 	addi	fp,sp,12
   428c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   428cc:	e0bfff17 	ldw	r2,-4(fp)
   428d0:	10000816 	blt	r2,zero,428f4 <close+0x3c>
   428d4:	01400304 	movi	r5,12
   428d8:	e13fff17 	ldw	r4,-4(fp)
   428dc:	0046b2c0 	call	46b2c <__mulsi3>
   428e0:	1007883a 	mov	r3,r2
   428e4:	00800174 	movhi	r2,5
   428e8:	10a0d604 	addi	r2,r2,-31912
   428ec:	1885883a 	add	r2,r3,r2
   428f0:	00000106 	br	428f8 <close+0x40>
   428f4:	0005883a 	mov	r2,zero
   428f8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   428fc:	e0bffd17 	ldw	r2,-12(fp)
   42900:	10001926 	beq	r2,zero,42968 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   42904:	e0bffd17 	ldw	r2,-12(fp)
   42908:	10800017 	ldw	r2,0(r2)
   4290c:	10800417 	ldw	r2,16(r2)
   42910:	10000626 	beq	r2,zero,4292c <close+0x74>
   42914:	e0bffd17 	ldw	r2,-12(fp)
   42918:	10800017 	ldw	r2,0(r2)
   4291c:	10800417 	ldw	r2,16(r2)
   42920:	e13ffd17 	ldw	r4,-12(fp)
   42924:	103ee83a 	callr	r2
   42928:	00000106 	br	42930 <close+0x78>
   4292c:	0005883a 	mov	r2,zero
   42930:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   42934:	e13fff17 	ldw	r4,-4(fp)
   42938:	00432840 	call	43284 <alt_release_fd>
    if (rval < 0)
   4293c:	e0bffe17 	ldw	r2,-8(fp)
   42940:	1000070e 	bge	r2,zero,42960 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   42944:	00428680 	call	42868 <alt_get_errno>
   42948:	1007883a 	mov	r3,r2
   4294c:	e0bffe17 	ldw	r2,-8(fp)
   42950:	0085c83a 	sub	r2,zero,r2
   42954:	18800015 	stw	r2,0(r3)
      return -1;
   42958:	00bfffc4 	movi	r2,-1
   4295c:	00000706 	br	4297c <close+0xc4>
    }
    return 0;
   42960:	0005883a 	mov	r2,zero
   42964:	00000506 	br	4297c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   42968:	00428680 	call	42868 <alt_get_errno>
   4296c:	1007883a 	mov	r3,r2
   42970:	00801444 	movi	r2,81
   42974:	18800015 	stw	r2,0(r3)
    return -1;
   42978:	00bfffc4 	movi	r2,-1
  }
}
   4297c:	e037883a 	mov	sp,fp
   42980:	dfc00117 	ldw	ra,4(sp)
   42984:	df000017 	ldw	fp,0(sp)
   42988:	dec00204 	addi	sp,sp,8
   4298c:	f800283a 	ret

00042990 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   42990:	deffff04 	addi	sp,sp,-4
   42994:	df000015 	stw	fp,0(sp)
   42998:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4299c:	0001883a 	nop
   429a0:	e037883a 	mov	sp,fp
   429a4:	df000017 	ldw	fp,0(sp)
   429a8:	dec00104 	addi	sp,sp,4
   429ac:	f800283a 	ret

000429b0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   429b0:	defffc04 	addi	sp,sp,-16
   429b4:	df000315 	stw	fp,12(sp)
   429b8:	df000304 	addi	fp,sp,12
   429bc:	e13ffd15 	stw	r4,-12(fp)
   429c0:	e17ffe15 	stw	r5,-8(fp)
   429c4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   429c8:	e0bfff17 	ldw	r2,-4(fp)
}
   429cc:	e037883a 	mov	sp,fp
   429d0:	df000017 	ldw	fp,0(sp)
   429d4:	dec00104 	addi	sp,sp,4
   429d8:	f800283a 	ret

000429dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   429dc:	defffe04 	addi	sp,sp,-8
   429e0:	dfc00115 	stw	ra,4(sp)
   429e4:	df000015 	stw	fp,0(sp)
   429e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   429ec:	00800174 	movhi	r2,5
   429f0:	10a34604 	addi	r2,r2,-29416
   429f4:	10800017 	ldw	r2,0(r2)
   429f8:	10000526 	beq	r2,zero,42a10 <alt_get_errno+0x34>
   429fc:	00800174 	movhi	r2,5
   42a00:	10a34604 	addi	r2,r2,-29416
   42a04:	10800017 	ldw	r2,0(r2)
   42a08:	103ee83a 	callr	r2
   42a0c:	00000206 	br	42a18 <alt_get_errno+0x3c>
   42a10:	00800174 	movhi	r2,5
   42a14:	10aa0004 	addi	r2,r2,-22528
}
   42a18:	e037883a 	mov	sp,fp
   42a1c:	dfc00117 	ldw	ra,4(sp)
   42a20:	df000017 	ldw	fp,0(sp)
   42a24:	dec00204 	addi	sp,sp,8
   42a28:	f800283a 	ret

00042a2c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   42a2c:	defffa04 	addi	sp,sp,-24
   42a30:	dfc00515 	stw	ra,20(sp)
   42a34:	df000415 	stw	fp,16(sp)
   42a38:	df000404 	addi	fp,sp,16
   42a3c:	e13ffe15 	stw	r4,-8(fp)
   42a40:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   42a44:	e0bffe17 	ldw	r2,-8(fp)
   42a48:	10000326 	beq	r2,zero,42a58 <alt_dev_llist_insert+0x2c>
   42a4c:	e0bffe17 	ldw	r2,-8(fp)
   42a50:	10800217 	ldw	r2,8(r2)
   42a54:	1000061e 	bne	r2,zero,42a70 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   42a58:	00429dc0 	call	429dc <alt_get_errno>
   42a5c:	1007883a 	mov	r3,r2
   42a60:	00800584 	movi	r2,22
   42a64:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   42a68:	00bffa84 	movi	r2,-22
   42a6c:	00001306 	br	42abc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   42a70:	e0bffe17 	ldw	r2,-8(fp)
   42a74:	e0ffff17 	ldw	r3,-4(fp)
   42a78:	e0fffc15 	stw	r3,-16(fp)
   42a7c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   42a80:	e0bffd17 	ldw	r2,-12(fp)
   42a84:	e0fffc17 	ldw	r3,-16(fp)
   42a88:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   42a8c:	e0bffc17 	ldw	r2,-16(fp)
   42a90:	10c00017 	ldw	r3,0(r2)
   42a94:	e0bffd17 	ldw	r2,-12(fp)
   42a98:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   42a9c:	e0bffc17 	ldw	r2,-16(fp)
   42aa0:	10800017 	ldw	r2,0(r2)
   42aa4:	e0fffd17 	ldw	r3,-12(fp)
   42aa8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   42aac:	e0bffc17 	ldw	r2,-16(fp)
   42ab0:	e0fffd17 	ldw	r3,-12(fp)
   42ab4:	10c00015 	stw	r3,0(r2)

  return 0;  
   42ab8:	0005883a 	mov	r2,zero
}
   42abc:	e037883a 	mov	sp,fp
   42ac0:	dfc00117 	ldw	ra,4(sp)
   42ac4:	df000017 	ldw	fp,0(sp)
   42ac8:	dec00204 	addi	sp,sp,8
   42acc:	f800283a 	ret

00042ad0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   42ad0:	defffd04 	addi	sp,sp,-12
   42ad4:	dfc00215 	stw	ra,8(sp)
   42ad8:	df000115 	stw	fp,4(sp)
   42adc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   42ae0:	00800134 	movhi	r2,4
   42ae4:	109c9404 	addi	r2,r2,29264
   42ae8:	e0bfff15 	stw	r2,-4(fp)
   42aec:	00000606 	br	42b08 <_do_ctors+0x38>
        (*ctor) (); 
   42af0:	e0bfff17 	ldw	r2,-4(fp)
   42af4:	10800017 	ldw	r2,0(r2)
   42af8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   42afc:	e0bfff17 	ldw	r2,-4(fp)
   42b00:	10bfff04 	addi	r2,r2,-4
   42b04:	e0bfff15 	stw	r2,-4(fp)
   42b08:	e0ffff17 	ldw	r3,-4(fp)
   42b0c:	00800134 	movhi	r2,4
   42b10:	109c9504 	addi	r2,r2,29268
   42b14:	18bff62e 	bgeu	r3,r2,42af0 <__alt_data_end+0xfffd1db0>
        (*ctor) (); 
}
   42b18:	0001883a 	nop
   42b1c:	e037883a 	mov	sp,fp
   42b20:	dfc00117 	ldw	ra,4(sp)
   42b24:	df000017 	ldw	fp,0(sp)
   42b28:	dec00204 	addi	sp,sp,8
   42b2c:	f800283a 	ret

00042b30 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   42b30:	defffd04 	addi	sp,sp,-12
   42b34:	dfc00215 	stw	ra,8(sp)
   42b38:	df000115 	stw	fp,4(sp)
   42b3c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   42b40:	00800134 	movhi	r2,4
   42b44:	109c9404 	addi	r2,r2,29264
   42b48:	e0bfff15 	stw	r2,-4(fp)
   42b4c:	00000606 	br	42b68 <_do_dtors+0x38>
        (*dtor) (); 
   42b50:	e0bfff17 	ldw	r2,-4(fp)
   42b54:	10800017 	ldw	r2,0(r2)
   42b58:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   42b5c:	e0bfff17 	ldw	r2,-4(fp)
   42b60:	10bfff04 	addi	r2,r2,-4
   42b64:	e0bfff15 	stw	r2,-4(fp)
   42b68:	e0ffff17 	ldw	r3,-4(fp)
   42b6c:	00800134 	movhi	r2,4
   42b70:	109c9504 	addi	r2,r2,29268
   42b74:	18bff62e 	bgeu	r3,r2,42b50 <__alt_data_end+0xfffd1e10>
        (*dtor) (); 
}
   42b78:	0001883a 	nop
   42b7c:	e037883a 	mov	sp,fp
   42b80:	dfc00117 	ldw	ra,4(sp)
   42b84:	df000017 	ldw	fp,0(sp)
   42b88:	dec00204 	addi	sp,sp,8
   42b8c:	f800283a 	ret

00042b90 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   42b90:	deffff04 	addi	sp,sp,-4
   42b94:	df000015 	stw	fp,0(sp)
   42b98:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   42b9c:	0001883a 	nop
   42ba0:	e037883a 	mov	sp,fp
   42ba4:	df000017 	ldw	fp,0(sp)
   42ba8:	dec00104 	addi	sp,sp,4
   42bac:	f800283a 	ret

00042bb0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   42bb0:	defff904 	addi	sp,sp,-28
   42bb4:	dfc00615 	stw	ra,24(sp)
   42bb8:	df000515 	stw	fp,20(sp)
   42bbc:	df000504 	addi	fp,sp,20
   42bc0:	e13ffc15 	stw	r4,-16(fp)
   42bc4:	e17ffd15 	stw	r5,-12(fp)
   42bc8:	e1bffe15 	stw	r6,-8(fp)
   42bcc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   42bd0:	e0800217 	ldw	r2,8(fp)
   42bd4:	d8800015 	stw	r2,0(sp)
   42bd8:	e1ffff17 	ldw	r7,-4(fp)
   42bdc:	e1bffe17 	ldw	r6,-8(fp)
   42be0:	e17ffd17 	ldw	r5,-12(fp)
   42be4:	e13ffc17 	ldw	r4,-16(fp)
   42be8:	0042d900 	call	42d90 <alt_iic_isr_register>
}  
   42bec:	e037883a 	mov	sp,fp
   42bf0:	dfc00117 	ldw	ra,4(sp)
   42bf4:	df000017 	ldw	fp,0(sp)
   42bf8:	dec00204 	addi	sp,sp,8
   42bfc:	f800283a 	ret

00042c00 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   42c00:	defff904 	addi	sp,sp,-28
   42c04:	df000615 	stw	fp,24(sp)
   42c08:	df000604 	addi	fp,sp,24
   42c0c:	e13ffe15 	stw	r4,-8(fp)
   42c10:	e17fff15 	stw	r5,-4(fp)
   42c14:	e0bfff17 	ldw	r2,-4(fp)
   42c18:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   42c1c:	0005303a 	rdctl	r2,status
   42c20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42c24:	e0fffb17 	ldw	r3,-20(fp)
   42c28:	00bfff84 	movi	r2,-2
   42c2c:	1884703a 	and	r2,r3,r2
   42c30:	1001703a 	wrctl	status,r2
  
  return context;
   42c34:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   42c38:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   42c3c:	00c00044 	movi	r3,1
   42c40:	e0bffa17 	ldw	r2,-24(fp)
   42c44:	1884983a 	sll	r2,r3,r2
   42c48:	1007883a 	mov	r3,r2
   42c4c:	00800174 	movhi	r2,5
   42c50:	10a9fd04 	addi	r2,r2,-22540
   42c54:	10800017 	ldw	r2,0(r2)
   42c58:	1886b03a 	or	r3,r3,r2
   42c5c:	00800174 	movhi	r2,5
   42c60:	10a9fd04 	addi	r2,r2,-22540
   42c64:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   42c68:	00800174 	movhi	r2,5
   42c6c:	10a9fd04 	addi	r2,r2,-22540
   42c70:	10800017 	ldw	r2,0(r2)
   42c74:	100170fa 	wrctl	ienable,r2
   42c78:	e0bffc17 	ldw	r2,-16(fp)
   42c7c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42c80:	e0bffd17 	ldw	r2,-12(fp)
   42c84:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   42c88:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   42c8c:	0001883a 	nop
}
   42c90:	e037883a 	mov	sp,fp
   42c94:	df000017 	ldw	fp,0(sp)
   42c98:	dec00104 	addi	sp,sp,4
   42c9c:	f800283a 	ret

00042ca0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   42ca0:	defff904 	addi	sp,sp,-28
   42ca4:	df000615 	stw	fp,24(sp)
   42ca8:	df000604 	addi	fp,sp,24
   42cac:	e13ffe15 	stw	r4,-8(fp)
   42cb0:	e17fff15 	stw	r5,-4(fp)
   42cb4:	e0bfff17 	ldw	r2,-4(fp)
   42cb8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   42cbc:	0005303a 	rdctl	r2,status
   42cc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42cc4:	e0fffb17 	ldw	r3,-20(fp)
   42cc8:	00bfff84 	movi	r2,-2
   42ccc:	1884703a 	and	r2,r3,r2
   42cd0:	1001703a 	wrctl	status,r2
  
  return context;
   42cd4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   42cd8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   42cdc:	00c00044 	movi	r3,1
   42ce0:	e0bffa17 	ldw	r2,-24(fp)
   42ce4:	1884983a 	sll	r2,r3,r2
   42ce8:	0084303a 	nor	r2,zero,r2
   42cec:	1007883a 	mov	r3,r2
   42cf0:	00800174 	movhi	r2,5
   42cf4:	10a9fd04 	addi	r2,r2,-22540
   42cf8:	10800017 	ldw	r2,0(r2)
   42cfc:	1886703a 	and	r3,r3,r2
   42d00:	00800174 	movhi	r2,5
   42d04:	10a9fd04 	addi	r2,r2,-22540
   42d08:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   42d0c:	00800174 	movhi	r2,5
   42d10:	10a9fd04 	addi	r2,r2,-22540
   42d14:	10800017 	ldw	r2,0(r2)
   42d18:	100170fa 	wrctl	ienable,r2
   42d1c:	e0bffc17 	ldw	r2,-16(fp)
   42d20:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42d24:	e0bffd17 	ldw	r2,-12(fp)
   42d28:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   42d2c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   42d30:	0001883a 	nop
}
   42d34:	e037883a 	mov	sp,fp
   42d38:	df000017 	ldw	fp,0(sp)
   42d3c:	dec00104 	addi	sp,sp,4
   42d40:	f800283a 	ret

00042d44 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   42d44:	defffc04 	addi	sp,sp,-16
   42d48:	df000315 	stw	fp,12(sp)
   42d4c:	df000304 	addi	fp,sp,12
   42d50:	e13ffe15 	stw	r4,-8(fp)
   42d54:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   42d58:	000530fa 	rdctl	r2,ienable
   42d5c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   42d60:	00c00044 	movi	r3,1
   42d64:	e0bfff17 	ldw	r2,-4(fp)
   42d68:	1884983a 	sll	r2,r3,r2
   42d6c:	1007883a 	mov	r3,r2
   42d70:	e0bffd17 	ldw	r2,-12(fp)
   42d74:	1884703a 	and	r2,r3,r2
   42d78:	1004c03a 	cmpne	r2,r2,zero
   42d7c:	10803fcc 	andi	r2,r2,255
}
   42d80:	e037883a 	mov	sp,fp
   42d84:	df000017 	ldw	fp,0(sp)
   42d88:	dec00104 	addi	sp,sp,4
   42d8c:	f800283a 	ret

00042d90 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   42d90:	defff504 	addi	sp,sp,-44
   42d94:	dfc00a15 	stw	ra,40(sp)
   42d98:	df000915 	stw	fp,36(sp)
   42d9c:	df000904 	addi	fp,sp,36
   42da0:	e13ffc15 	stw	r4,-16(fp)
   42da4:	e17ffd15 	stw	r5,-12(fp)
   42da8:	e1bffe15 	stw	r6,-8(fp)
   42dac:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   42db0:	00bffa84 	movi	r2,-22
   42db4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   42db8:	e0bffd17 	ldw	r2,-12(fp)
   42dbc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   42dc0:	e0bff817 	ldw	r2,-32(fp)
   42dc4:	10800808 	cmpgei	r2,r2,32
   42dc8:	1000271e 	bne	r2,zero,42e68 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   42dcc:	0005303a 	rdctl	r2,status
   42dd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42dd4:	e0fffb17 	ldw	r3,-20(fp)
   42dd8:	00bfff84 	movi	r2,-2
   42ddc:	1884703a 	and	r2,r3,r2
   42de0:	1001703a 	wrctl	status,r2
  
  return context;
   42de4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   42de8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   42dec:	00800174 	movhi	r2,5
   42df0:	10aa0e04 	addi	r2,r2,-22472
   42df4:	e0fff817 	ldw	r3,-32(fp)
   42df8:	180690fa 	slli	r3,r3,3
   42dfc:	10c5883a 	add	r2,r2,r3
   42e00:	e0fffe17 	ldw	r3,-8(fp)
   42e04:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   42e08:	00800174 	movhi	r2,5
   42e0c:	10aa0e04 	addi	r2,r2,-22472
   42e10:	e0fff817 	ldw	r3,-32(fp)
   42e14:	180690fa 	slli	r3,r3,3
   42e18:	10c5883a 	add	r2,r2,r3
   42e1c:	10800104 	addi	r2,r2,4
   42e20:	e0ffff17 	ldw	r3,-4(fp)
   42e24:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   42e28:	e0bffe17 	ldw	r2,-8(fp)
   42e2c:	10000526 	beq	r2,zero,42e44 <alt_iic_isr_register+0xb4>
   42e30:	e0bff817 	ldw	r2,-32(fp)
   42e34:	100b883a 	mov	r5,r2
   42e38:	e13ffc17 	ldw	r4,-16(fp)
   42e3c:	0042c000 	call	42c00 <alt_ic_irq_enable>
   42e40:	00000406 	br	42e54 <alt_iic_isr_register+0xc4>
   42e44:	e0bff817 	ldw	r2,-32(fp)
   42e48:	100b883a 	mov	r5,r2
   42e4c:	e13ffc17 	ldw	r4,-16(fp)
   42e50:	0042ca00 	call	42ca0 <alt_ic_irq_disable>
   42e54:	e0bff715 	stw	r2,-36(fp)
   42e58:	e0bffa17 	ldw	r2,-24(fp)
   42e5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42e60:	e0bff917 	ldw	r2,-28(fp)
   42e64:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   42e68:	e0bff717 	ldw	r2,-36(fp)
}
   42e6c:	e037883a 	mov	sp,fp
   42e70:	dfc00117 	ldw	ra,4(sp)
   42e74:	df000017 	ldw	fp,0(sp)
   42e78:	dec00204 	addi	sp,sp,8
   42e7c:	f800283a 	ret

00042e80 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   42e80:	defff804 	addi	sp,sp,-32
   42e84:	dfc00715 	stw	ra,28(sp)
   42e88:	df000615 	stw	fp,24(sp)
   42e8c:	dc000515 	stw	r16,20(sp)
   42e90:	df000604 	addi	fp,sp,24
   42e94:	e13ffb15 	stw	r4,-20(fp)
   42e98:	e17ffc15 	stw	r5,-16(fp)
   42e9c:	e1bffd15 	stw	r6,-12(fp)
   42ea0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   42ea4:	e1bffe17 	ldw	r6,-8(fp)
   42ea8:	e17ffd17 	ldw	r5,-12(fp)
   42eac:	e13ffc17 	ldw	r4,-16(fp)
   42eb0:	00431240 	call	43124 <open>
   42eb4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   42eb8:	e0bffa17 	ldw	r2,-24(fp)
   42ebc:	10002216 	blt	r2,zero,42f48 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   42ec0:	04000174 	movhi	r16,5
   42ec4:	8420d604 	addi	r16,r16,-31912
   42ec8:	e0bffa17 	ldw	r2,-24(fp)
   42ecc:	01400304 	movi	r5,12
   42ed0:	1009883a 	mov	r4,r2
   42ed4:	0046b2c0 	call	46b2c <__mulsi3>
   42ed8:	8085883a 	add	r2,r16,r2
   42edc:	10c00017 	ldw	r3,0(r2)
   42ee0:	e0bffb17 	ldw	r2,-20(fp)
   42ee4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   42ee8:	04000174 	movhi	r16,5
   42eec:	8420d604 	addi	r16,r16,-31912
   42ef0:	e0bffa17 	ldw	r2,-24(fp)
   42ef4:	01400304 	movi	r5,12
   42ef8:	1009883a 	mov	r4,r2
   42efc:	0046b2c0 	call	46b2c <__mulsi3>
   42f00:	8085883a 	add	r2,r16,r2
   42f04:	10800104 	addi	r2,r2,4
   42f08:	10c00017 	ldw	r3,0(r2)
   42f0c:	e0bffb17 	ldw	r2,-20(fp)
   42f10:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   42f14:	04000174 	movhi	r16,5
   42f18:	8420d604 	addi	r16,r16,-31912
   42f1c:	e0bffa17 	ldw	r2,-24(fp)
   42f20:	01400304 	movi	r5,12
   42f24:	1009883a 	mov	r4,r2
   42f28:	0046b2c0 	call	46b2c <__mulsi3>
   42f2c:	8085883a 	add	r2,r16,r2
   42f30:	10800204 	addi	r2,r2,8
   42f34:	10c00017 	ldw	r3,0(r2)
   42f38:	e0bffb17 	ldw	r2,-20(fp)
   42f3c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   42f40:	e13ffa17 	ldw	r4,-24(fp)
   42f44:	00432840 	call	43284 <alt_release_fd>
  }
} 
   42f48:	0001883a 	nop
   42f4c:	e6ffff04 	addi	sp,fp,-4
   42f50:	dfc00217 	ldw	ra,8(sp)
   42f54:	df000117 	ldw	fp,4(sp)
   42f58:	dc000017 	ldw	r16,0(sp)
   42f5c:	dec00304 	addi	sp,sp,12
   42f60:	f800283a 	ret

00042f64 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   42f64:	defffb04 	addi	sp,sp,-20
   42f68:	dfc00415 	stw	ra,16(sp)
   42f6c:	df000315 	stw	fp,12(sp)
   42f70:	df000304 	addi	fp,sp,12
   42f74:	e13ffd15 	stw	r4,-12(fp)
   42f78:	e17ffe15 	stw	r5,-8(fp)
   42f7c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   42f80:	01c07fc4 	movi	r7,511
   42f84:	01800044 	movi	r6,1
   42f88:	e17ffd17 	ldw	r5,-12(fp)
   42f8c:	01000174 	movhi	r4,5
   42f90:	2120d904 	addi	r4,r4,-31900
   42f94:	0042e800 	call	42e80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   42f98:	01c07fc4 	movi	r7,511
   42f9c:	000d883a 	mov	r6,zero
   42fa0:	e17ffe17 	ldw	r5,-8(fp)
   42fa4:	01000174 	movhi	r4,5
   42fa8:	2120d604 	addi	r4,r4,-31912
   42fac:	0042e800 	call	42e80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   42fb0:	01c07fc4 	movi	r7,511
   42fb4:	01800044 	movi	r6,1
   42fb8:	e17fff17 	ldw	r5,-4(fp)
   42fbc:	01000174 	movhi	r4,5
   42fc0:	2120dc04 	addi	r4,r4,-31888
   42fc4:	0042e800 	call	42e80 <alt_open_fd>
}  
   42fc8:	0001883a 	nop
   42fcc:	e037883a 	mov	sp,fp
   42fd0:	dfc00117 	ldw	ra,4(sp)
   42fd4:	df000017 	ldw	fp,0(sp)
   42fd8:	dec00204 	addi	sp,sp,8
   42fdc:	f800283a 	ret

00042fe0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42fe0:	defffe04 	addi	sp,sp,-8
   42fe4:	dfc00115 	stw	ra,4(sp)
   42fe8:	df000015 	stw	fp,0(sp)
   42fec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42ff0:	00800174 	movhi	r2,5
   42ff4:	10a34604 	addi	r2,r2,-29416
   42ff8:	10800017 	ldw	r2,0(r2)
   42ffc:	10000526 	beq	r2,zero,43014 <alt_get_errno+0x34>
   43000:	00800174 	movhi	r2,5
   43004:	10a34604 	addi	r2,r2,-29416
   43008:	10800017 	ldw	r2,0(r2)
   4300c:	103ee83a 	callr	r2
   43010:	00000206 	br	4301c <alt_get_errno+0x3c>
   43014:	00800174 	movhi	r2,5
   43018:	10aa0004 	addi	r2,r2,-22528
}
   4301c:	e037883a 	mov	sp,fp
   43020:	dfc00117 	ldw	ra,4(sp)
   43024:	df000017 	ldw	fp,0(sp)
   43028:	dec00204 	addi	sp,sp,8
   4302c:	f800283a 	ret

00043030 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   43030:	defffb04 	addi	sp,sp,-20
   43034:	dfc00415 	stw	ra,16(sp)
   43038:	df000315 	stw	fp,12(sp)
   4303c:	dc000215 	stw	r16,8(sp)
   43040:	df000304 	addi	fp,sp,12
   43044:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   43048:	e0bffe17 	ldw	r2,-8(fp)
   4304c:	10800217 	ldw	r2,8(r2)
   43050:	10d00034 	orhi	r3,r2,16384
   43054:	e0bffe17 	ldw	r2,-8(fp)
   43058:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4305c:	e03ffd15 	stw	zero,-12(fp)
   43060:	00002306 	br	430f0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   43064:	04000174 	movhi	r16,5
   43068:	8420d604 	addi	r16,r16,-31912
   4306c:	e0bffd17 	ldw	r2,-12(fp)
   43070:	01400304 	movi	r5,12
   43074:	1009883a 	mov	r4,r2
   43078:	0046b2c0 	call	46b2c <__mulsi3>
   4307c:	8085883a 	add	r2,r16,r2
   43080:	10c00017 	ldw	r3,0(r2)
   43084:	e0bffe17 	ldw	r2,-8(fp)
   43088:	10800017 	ldw	r2,0(r2)
   4308c:	1880151e 	bne	r3,r2,430e4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   43090:	04000174 	movhi	r16,5
   43094:	8420d604 	addi	r16,r16,-31912
   43098:	e0bffd17 	ldw	r2,-12(fp)
   4309c:	01400304 	movi	r5,12
   430a0:	1009883a 	mov	r4,r2
   430a4:	0046b2c0 	call	46b2c <__mulsi3>
   430a8:	8085883a 	add	r2,r16,r2
   430ac:	10800204 	addi	r2,r2,8
   430b0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   430b4:	10000b0e 	bge	r2,zero,430e4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   430b8:	01400304 	movi	r5,12
   430bc:	e13ffd17 	ldw	r4,-12(fp)
   430c0:	0046b2c0 	call	46b2c <__mulsi3>
   430c4:	1007883a 	mov	r3,r2
   430c8:	00800174 	movhi	r2,5
   430cc:	10a0d604 	addi	r2,r2,-31912
   430d0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   430d4:	e0bffe17 	ldw	r2,-8(fp)
   430d8:	18800226 	beq	r3,r2,430e4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   430dc:	00bffcc4 	movi	r2,-13
   430e0:	00000a06 	br	4310c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   430e4:	e0bffd17 	ldw	r2,-12(fp)
   430e8:	10800044 	addi	r2,r2,1
   430ec:	e0bffd15 	stw	r2,-12(fp)
   430f0:	00800174 	movhi	r2,5
   430f4:	10a34504 	addi	r2,r2,-29420
   430f8:	10800017 	ldw	r2,0(r2)
   430fc:	1007883a 	mov	r3,r2
   43100:	e0bffd17 	ldw	r2,-12(fp)
   43104:	18bfd72e 	bgeu	r3,r2,43064 <__alt_data_end+0xfffd2324>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   43108:	0005883a 	mov	r2,zero
}
   4310c:	e6ffff04 	addi	sp,fp,-4
   43110:	dfc00217 	ldw	ra,8(sp)
   43114:	df000117 	ldw	fp,4(sp)
   43118:	dc000017 	ldw	r16,0(sp)
   4311c:	dec00304 	addi	sp,sp,12
   43120:	f800283a 	ret

00043124 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   43124:	defff604 	addi	sp,sp,-40
   43128:	dfc00915 	stw	ra,36(sp)
   4312c:	df000815 	stw	fp,32(sp)
   43130:	df000804 	addi	fp,sp,32
   43134:	e13ffd15 	stw	r4,-12(fp)
   43138:	e17ffe15 	stw	r5,-8(fp)
   4313c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   43140:	00bfffc4 	movi	r2,-1
   43144:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   43148:	00bffb44 	movi	r2,-19
   4314c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   43150:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   43154:	01400174 	movhi	r5,5
   43158:	29634304 	addi	r5,r5,-29428
   4315c:	e13ffd17 	ldw	r4,-12(fp)
   43160:	00434d00 	call	434d0 <alt_find_dev>
   43164:	e0bff815 	stw	r2,-32(fp)
   43168:	e0bff817 	ldw	r2,-32(fp)
   4316c:	1000051e 	bne	r2,zero,43184 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   43170:	e13ffd17 	ldw	r4,-12(fp)
   43174:	00435600 	call	43560 <alt_find_file>
   43178:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4317c:	00800044 	movi	r2,1
   43180:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   43184:	e0bff817 	ldw	r2,-32(fp)
   43188:	10002b26 	beq	r2,zero,43238 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4318c:	e13ff817 	ldw	r4,-32(fp)
   43190:	00436740 	call	43674 <alt_get_fd>
   43194:	e0bff915 	stw	r2,-28(fp)
   43198:	e0bff917 	ldw	r2,-28(fp)
   4319c:	1000030e 	bge	r2,zero,431ac <open+0x88>
    {
      status = index;
   431a0:	e0bff917 	ldw	r2,-28(fp)
   431a4:	e0bffa15 	stw	r2,-24(fp)
   431a8:	00002506 	br	43240 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   431ac:	01400304 	movi	r5,12
   431b0:	e13ff917 	ldw	r4,-28(fp)
   431b4:	0046b2c0 	call	46b2c <__mulsi3>
   431b8:	1007883a 	mov	r3,r2
   431bc:	00800174 	movhi	r2,5
   431c0:	10a0d604 	addi	r2,r2,-31912
   431c4:	1885883a 	add	r2,r3,r2
   431c8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   431cc:	e0fffe17 	ldw	r3,-8(fp)
   431d0:	00900034 	movhi	r2,16384
   431d4:	10bfffc4 	addi	r2,r2,-1
   431d8:	1886703a 	and	r3,r3,r2
   431dc:	e0bffc17 	ldw	r2,-16(fp)
   431e0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   431e4:	e0bffb17 	ldw	r2,-20(fp)
   431e8:	1000051e 	bne	r2,zero,43200 <open+0xdc>
   431ec:	e13ffc17 	ldw	r4,-16(fp)
   431f0:	00430300 	call	43030 <alt_file_locked>
   431f4:	e0bffa15 	stw	r2,-24(fp)
   431f8:	e0bffa17 	ldw	r2,-24(fp)
   431fc:	10001016 	blt	r2,zero,43240 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   43200:	e0bff817 	ldw	r2,-32(fp)
   43204:	10800317 	ldw	r2,12(r2)
   43208:	10000826 	beq	r2,zero,4322c <open+0x108>
   4320c:	e0bff817 	ldw	r2,-32(fp)
   43210:	10800317 	ldw	r2,12(r2)
   43214:	e1ffff17 	ldw	r7,-4(fp)
   43218:	e1bffe17 	ldw	r6,-8(fp)
   4321c:	e17ffd17 	ldw	r5,-12(fp)
   43220:	e13ffc17 	ldw	r4,-16(fp)
   43224:	103ee83a 	callr	r2
   43228:	00000106 	br	43230 <open+0x10c>
   4322c:	0005883a 	mov	r2,zero
   43230:	e0bffa15 	stw	r2,-24(fp)
   43234:	00000206 	br	43240 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   43238:	00bffb44 	movi	r2,-19
   4323c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   43240:	e0bffa17 	ldw	r2,-24(fp)
   43244:	1000090e 	bge	r2,zero,4326c <open+0x148>
  {
    alt_release_fd (index);  
   43248:	e13ff917 	ldw	r4,-28(fp)
   4324c:	00432840 	call	43284 <alt_release_fd>
    ALT_ERRNO = -status;
   43250:	0042fe00 	call	42fe0 <alt_get_errno>
   43254:	1007883a 	mov	r3,r2
   43258:	e0bffa17 	ldw	r2,-24(fp)
   4325c:	0085c83a 	sub	r2,zero,r2
   43260:	18800015 	stw	r2,0(r3)
    return -1;
   43264:	00bfffc4 	movi	r2,-1
   43268:	00000106 	br	43270 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   4326c:	e0bff917 	ldw	r2,-28(fp)
}
   43270:	e037883a 	mov	sp,fp
   43274:	dfc00117 	ldw	ra,4(sp)
   43278:	df000017 	ldw	fp,0(sp)
   4327c:	dec00204 	addi	sp,sp,8
   43280:	f800283a 	ret

00043284 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   43284:	defffc04 	addi	sp,sp,-16
   43288:	dfc00315 	stw	ra,12(sp)
   4328c:	df000215 	stw	fp,8(sp)
   43290:	dc000115 	stw	r16,4(sp)
   43294:	df000204 	addi	fp,sp,8
   43298:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   4329c:	e0bffe17 	ldw	r2,-8(fp)
   432a0:	108000d0 	cmplti	r2,r2,3
   432a4:	1000111e 	bne	r2,zero,432ec <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   432a8:	04000174 	movhi	r16,5
   432ac:	8420d604 	addi	r16,r16,-31912
   432b0:	e0bffe17 	ldw	r2,-8(fp)
   432b4:	01400304 	movi	r5,12
   432b8:	1009883a 	mov	r4,r2
   432bc:	0046b2c0 	call	46b2c <__mulsi3>
   432c0:	8085883a 	add	r2,r16,r2
   432c4:	10800204 	addi	r2,r2,8
   432c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   432cc:	04000174 	movhi	r16,5
   432d0:	8420d604 	addi	r16,r16,-31912
   432d4:	e0bffe17 	ldw	r2,-8(fp)
   432d8:	01400304 	movi	r5,12
   432dc:	1009883a 	mov	r4,r2
   432e0:	0046b2c0 	call	46b2c <__mulsi3>
   432e4:	8085883a 	add	r2,r16,r2
   432e8:	10000015 	stw	zero,0(r2)
  }
}
   432ec:	0001883a 	nop
   432f0:	e6ffff04 	addi	sp,fp,-4
   432f4:	dfc00217 	ldw	ra,8(sp)
   432f8:	df000117 	ldw	fp,4(sp)
   432fc:	dc000017 	ldw	r16,0(sp)
   43300:	dec00304 	addi	sp,sp,12
   43304:	f800283a 	ret

00043308 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   43308:	defffa04 	addi	sp,sp,-24
   4330c:	df000515 	stw	fp,20(sp)
   43310:	df000504 	addi	fp,sp,20
   43314:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43318:	0005303a 	rdctl	r2,status
   4331c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43320:	e0fffc17 	ldw	r3,-16(fp)
   43324:	00bfff84 	movi	r2,-2
   43328:	1884703a 	and	r2,r3,r2
   4332c:	1001703a 	wrctl	status,r2
  
  return context;
   43330:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   43334:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   43338:	e0bfff17 	ldw	r2,-4(fp)
   4333c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   43340:	e0bffd17 	ldw	r2,-12(fp)
   43344:	10800017 	ldw	r2,0(r2)
   43348:	e0fffd17 	ldw	r3,-12(fp)
   4334c:	18c00117 	ldw	r3,4(r3)
   43350:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   43354:	e0bffd17 	ldw	r2,-12(fp)
   43358:	10800117 	ldw	r2,4(r2)
   4335c:	e0fffd17 	ldw	r3,-12(fp)
   43360:	18c00017 	ldw	r3,0(r3)
   43364:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   43368:	e0bffd17 	ldw	r2,-12(fp)
   4336c:	e0fffd17 	ldw	r3,-12(fp)
   43370:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   43374:	e0bffd17 	ldw	r2,-12(fp)
   43378:	e0fffd17 	ldw	r3,-12(fp)
   4337c:	10c00015 	stw	r3,0(r2)
   43380:	e0bffb17 	ldw	r2,-20(fp)
   43384:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43388:	e0bffe17 	ldw	r2,-8(fp)
   4338c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   43390:	0001883a 	nop
   43394:	e037883a 	mov	sp,fp
   43398:	df000017 	ldw	fp,0(sp)
   4339c:	dec00104 	addi	sp,sp,4
   433a0:	f800283a 	ret

000433a4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   433a4:	defffb04 	addi	sp,sp,-20
   433a8:	dfc00415 	stw	ra,16(sp)
   433ac:	df000315 	stw	fp,12(sp)
   433b0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   433b4:	d0a00717 	ldw	r2,-32740(gp)
   433b8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   433bc:	d0a6be17 	ldw	r2,-25864(gp)
   433c0:	10800044 	addi	r2,r2,1
   433c4:	d0a6be15 	stw	r2,-25864(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   433c8:	00002e06 	br	43484 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   433cc:	e0bffd17 	ldw	r2,-12(fp)
   433d0:	10800017 	ldw	r2,0(r2)
   433d4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   433d8:	e0bffd17 	ldw	r2,-12(fp)
   433dc:	10800403 	ldbu	r2,16(r2)
   433e0:	10803fcc 	andi	r2,r2,255
   433e4:	10000426 	beq	r2,zero,433f8 <alt_tick+0x54>
   433e8:	d0a6be17 	ldw	r2,-25864(gp)
   433ec:	1000021e 	bne	r2,zero,433f8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   433f0:	e0bffd17 	ldw	r2,-12(fp)
   433f4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   433f8:	e0bffd17 	ldw	r2,-12(fp)
   433fc:	10800217 	ldw	r2,8(r2)
   43400:	d0e6be17 	ldw	r3,-25864(gp)
   43404:	18801d36 	bltu	r3,r2,4347c <alt_tick+0xd8>
   43408:	e0bffd17 	ldw	r2,-12(fp)
   4340c:	10800403 	ldbu	r2,16(r2)
   43410:	10803fcc 	andi	r2,r2,255
   43414:	1000191e 	bne	r2,zero,4347c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   43418:	e0bffd17 	ldw	r2,-12(fp)
   4341c:	10800317 	ldw	r2,12(r2)
   43420:	e0fffd17 	ldw	r3,-12(fp)
   43424:	18c00517 	ldw	r3,20(r3)
   43428:	1809883a 	mov	r4,r3
   4342c:	103ee83a 	callr	r2
   43430:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   43434:	e0bfff17 	ldw	r2,-4(fp)
   43438:	1000031e 	bne	r2,zero,43448 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4343c:	e13ffd17 	ldw	r4,-12(fp)
   43440:	00433080 	call	43308 <alt_alarm_stop>
   43444:	00000d06 	br	4347c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   43448:	e0bffd17 	ldw	r2,-12(fp)
   4344c:	10c00217 	ldw	r3,8(r2)
   43450:	e0bfff17 	ldw	r2,-4(fp)
   43454:	1887883a 	add	r3,r3,r2
   43458:	e0bffd17 	ldw	r2,-12(fp)
   4345c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   43460:	e0bffd17 	ldw	r2,-12(fp)
   43464:	10c00217 	ldw	r3,8(r2)
   43468:	d0a6be17 	ldw	r2,-25864(gp)
   4346c:	1880032e 	bgeu	r3,r2,4347c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   43470:	e0bffd17 	ldw	r2,-12(fp)
   43474:	00c00044 	movi	r3,1
   43478:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4347c:	e0bffe17 	ldw	r2,-8(fp)
   43480:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   43484:	e0fffd17 	ldw	r3,-12(fp)
   43488:	d0a00704 	addi	r2,gp,-32740
   4348c:	18bfcf1e 	bne	r3,r2,433cc <__alt_data_end+0xfffd268c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   43490:	0001883a 	nop
}
   43494:	0001883a 	nop
   43498:	e037883a 	mov	sp,fp
   4349c:	dfc00117 	ldw	ra,4(sp)
   434a0:	df000017 	ldw	fp,0(sp)
   434a4:	dec00204 	addi	sp,sp,8
   434a8:	f800283a 	ret

000434ac <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   434ac:	deffff04 	addi	sp,sp,-4
   434b0:	df000015 	stw	fp,0(sp)
   434b4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   434b8:	000170fa 	wrctl	ienable,zero
}
   434bc:	0001883a 	nop
   434c0:	e037883a 	mov	sp,fp
   434c4:	df000017 	ldw	fp,0(sp)
   434c8:	dec00104 	addi	sp,sp,4
   434cc:	f800283a 	ret

000434d0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   434d0:	defffa04 	addi	sp,sp,-24
   434d4:	dfc00515 	stw	ra,20(sp)
   434d8:	df000415 	stw	fp,16(sp)
   434dc:	df000404 	addi	fp,sp,16
   434e0:	e13ffe15 	stw	r4,-8(fp)
   434e4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   434e8:	e0bfff17 	ldw	r2,-4(fp)
   434ec:	10800017 	ldw	r2,0(r2)
   434f0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   434f4:	e13ffe17 	ldw	r4,-8(fp)
   434f8:	00450400 	call	45040 <strlen>
   434fc:	10800044 	addi	r2,r2,1
   43500:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   43504:	00000d06 	br	4353c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   43508:	e0bffc17 	ldw	r2,-16(fp)
   4350c:	10800217 	ldw	r2,8(r2)
   43510:	e0fffd17 	ldw	r3,-12(fp)
   43514:	180d883a 	mov	r6,r3
   43518:	e17ffe17 	ldw	r5,-8(fp)
   4351c:	1009883a 	mov	r4,r2
   43520:	00446000 	call	44600 <memcmp>
   43524:	1000021e 	bne	r2,zero,43530 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   43528:	e0bffc17 	ldw	r2,-16(fp)
   4352c:	00000706 	br	4354c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   43530:	e0bffc17 	ldw	r2,-16(fp)
   43534:	10800017 	ldw	r2,0(r2)
   43538:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4353c:	e0fffc17 	ldw	r3,-16(fp)
   43540:	e0bfff17 	ldw	r2,-4(fp)
   43544:	18bff01e 	bne	r3,r2,43508 <__alt_data_end+0xfffd27c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   43548:	0005883a 	mov	r2,zero
}
   4354c:	e037883a 	mov	sp,fp
   43550:	dfc00117 	ldw	ra,4(sp)
   43554:	df000017 	ldw	fp,0(sp)
   43558:	dec00204 	addi	sp,sp,8
   4355c:	f800283a 	ret

00043560 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   43560:	defffb04 	addi	sp,sp,-20
   43564:	dfc00415 	stw	ra,16(sp)
   43568:	df000315 	stw	fp,12(sp)
   4356c:	df000304 	addi	fp,sp,12
   43570:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   43574:	00800174 	movhi	r2,5
   43578:	10a34104 	addi	r2,r2,-29436
   4357c:	10800017 	ldw	r2,0(r2)
   43580:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   43584:	00003106 	br	4364c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   43588:	e0bffd17 	ldw	r2,-12(fp)
   4358c:	10800217 	ldw	r2,8(r2)
   43590:	1009883a 	mov	r4,r2
   43594:	00450400 	call	45040 <strlen>
   43598:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4359c:	e0bffd17 	ldw	r2,-12(fp)
   435a0:	10c00217 	ldw	r3,8(r2)
   435a4:	e0bffe17 	ldw	r2,-8(fp)
   435a8:	10bfffc4 	addi	r2,r2,-1
   435ac:	1885883a 	add	r2,r3,r2
   435b0:	10800003 	ldbu	r2,0(r2)
   435b4:	10803fcc 	andi	r2,r2,255
   435b8:	1080201c 	xori	r2,r2,128
   435bc:	10bfe004 	addi	r2,r2,-128
   435c0:	10800bd8 	cmpnei	r2,r2,47
   435c4:	1000031e 	bne	r2,zero,435d4 <alt_find_file+0x74>
    {
      len -= 1;
   435c8:	e0bffe17 	ldw	r2,-8(fp)
   435cc:	10bfffc4 	addi	r2,r2,-1
   435d0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   435d4:	e0bffe17 	ldw	r2,-8(fp)
   435d8:	e0ffff17 	ldw	r3,-4(fp)
   435dc:	1885883a 	add	r2,r3,r2
   435e0:	10800003 	ldbu	r2,0(r2)
   435e4:	10803fcc 	andi	r2,r2,255
   435e8:	1080201c 	xori	r2,r2,128
   435ec:	10bfe004 	addi	r2,r2,-128
   435f0:	10800be0 	cmpeqi	r2,r2,47
   435f4:	1000081e 	bne	r2,zero,43618 <alt_find_file+0xb8>
   435f8:	e0bffe17 	ldw	r2,-8(fp)
   435fc:	e0ffff17 	ldw	r3,-4(fp)
   43600:	1885883a 	add	r2,r3,r2
   43604:	10800003 	ldbu	r2,0(r2)
   43608:	10803fcc 	andi	r2,r2,255
   4360c:	1080201c 	xori	r2,r2,128
   43610:	10bfe004 	addi	r2,r2,-128
   43614:	10000a1e 	bne	r2,zero,43640 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   43618:	e0bffd17 	ldw	r2,-12(fp)
   4361c:	10800217 	ldw	r2,8(r2)
   43620:	e0fffe17 	ldw	r3,-8(fp)
   43624:	180d883a 	mov	r6,r3
   43628:	e17fff17 	ldw	r5,-4(fp)
   4362c:	1009883a 	mov	r4,r2
   43630:	00446000 	call	44600 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   43634:	1000021e 	bne	r2,zero,43640 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   43638:	e0bffd17 	ldw	r2,-12(fp)
   4363c:	00000806 	br	43660 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   43640:	e0bffd17 	ldw	r2,-12(fp)
   43644:	10800017 	ldw	r2,0(r2)
   43648:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4364c:	e0fffd17 	ldw	r3,-12(fp)
   43650:	00800174 	movhi	r2,5
   43654:	10a34104 	addi	r2,r2,-29436
   43658:	18bfcb1e 	bne	r3,r2,43588 <__alt_data_end+0xfffd2848>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4365c:	0005883a 	mov	r2,zero
}
   43660:	e037883a 	mov	sp,fp
   43664:	dfc00117 	ldw	ra,4(sp)
   43668:	df000017 	ldw	fp,0(sp)
   4366c:	dec00204 	addi	sp,sp,8
   43670:	f800283a 	ret

00043674 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   43674:	defffa04 	addi	sp,sp,-24
   43678:	dfc00515 	stw	ra,20(sp)
   4367c:	df000415 	stw	fp,16(sp)
   43680:	dc000315 	stw	r16,12(sp)
   43684:	df000404 	addi	fp,sp,16
   43688:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   4368c:	00bffa04 	movi	r2,-24
   43690:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   43694:	e03ffc15 	stw	zero,-16(fp)
   43698:	00002106 	br	43720 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   4369c:	04000174 	movhi	r16,5
   436a0:	8420d604 	addi	r16,r16,-31912
   436a4:	e0bffc17 	ldw	r2,-16(fp)
   436a8:	01400304 	movi	r5,12
   436ac:	1009883a 	mov	r4,r2
   436b0:	0046b2c0 	call	46b2c <__mulsi3>
   436b4:	8085883a 	add	r2,r16,r2
   436b8:	10800017 	ldw	r2,0(r2)
   436bc:	1000151e 	bne	r2,zero,43714 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   436c0:	04000174 	movhi	r16,5
   436c4:	8420d604 	addi	r16,r16,-31912
   436c8:	e0bffc17 	ldw	r2,-16(fp)
   436cc:	01400304 	movi	r5,12
   436d0:	1009883a 	mov	r4,r2
   436d4:	0046b2c0 	call	46b2c <__mulsi3>
   436d8:	8085883a 	add	r2,r16,r2
   436dc:	e0fffe17 	ldw	r3,-8(fp)
   436e0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   436e4:	00800174 	movhi	r2,5
   436e8:	10a34504 	addi	r2,r2,-29420
   436ec:	10c00017 	ldw	r3,0(r2)
   436f0:	e0bffc17 	ldw	r2,-16(fp)
   436f4:	1880040e 	bge	r3,r2,43708 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   436f8:	00800174 	movhi	r2,5
   436fc:	10a34504 	addi	r2,r2,-29420
   43700:	e0fffc17 	ldw	r3,-16(fp)
   43704:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   43708:	e0bffc17 	ldw	r2,-16(fp)
   4370c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   43710:	00000606 	br	4372c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   43714:	e0bffc17 	ldw	r2,-16(fp)
   43718:	10800044 	addi	r2,r2,1
   4371c:	e0bffc15 	stw	r2,-16(fp)
   43720:	e0bffc17 	ldw	r2,-16(fp)
   43724:	10800810 	cmplti	r2,r2,32
   43728:	103fdc1e 	bne	r2,zero,4369c <__alt_data_end+0xfffd295c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4372c:	e0bffd17 	ldw	r2,-12(fp)
}
   43730:	e6ffff04 	addi	sp,fp,-4
   43734:	dfc00217 	ldw	ra,8(sp)
   43738:	df000117 	ldw	fp,4(sp)
   4373c:	dc000017 	ldw	r16,0(sp)
   43740:	dec00304 	addi	sp,sp,12
   43744:	f800283a 	ret

00043748 <atexit>:
   43748:	200b883a 	mov	r5,r4
   4374c:	000f883a 	mov	r7,zero
   43750:	000d883a 	mov	r6,zero
   43754:	0009883a 	mov	r4,zero
   43758:	00453841 	jmpi	45384 <__register_exitproc>

0004375c <exit>:
   4375c:	defffe04 	addi	sp,sp,-8
   43760:	000b883a 	mov	r5,zero
   43764:	dc000015 	stw	r16,0(sp)
   43768:	dfc00115 	stw	ra,4(sp)
   4376c:	2021883a 	mov	r16,r4
   43770:	004549c0 	call	4549c <__call_exitprocs>
   43774:	00800174 	movhi	r2,5
   43778:	10a34a04 	addi	r2,r2,-29400
   4377c:	11000017 	ldw	r4,0(r2)
   43780:	20800f17 	ldw	r2,60(r4)
   43784:	10000126 	beq	r2,zero,4378c <exit+0x30>
   43788:	103ee83a 	callr	r2
   4378c:	8009883a 	mov	r4,r16
   43790:	0046b540 	call	46b54 <_exit>

00043794 <_fputs_r>:
   43794:	defff804 	addi	sp,sp,-32
   43798:	dc400615 	stw	r17,24(sp)
   4379c:	2023883a 	mov	r17,r4
   437a0:	2809883a 	mov	r4,r5
   437a4:	dc000515 	stw	r16,20(sp)
   437a8:	dfc00715 	stw	ra,28(sp)
   437ac:	3021883a 	mov	r16,r6
   437b0:	d9400315 	stw	r5,12(sp)
   437b4:	00450400 	call	45040 <strlen>
   437b8:	d8800215 	stw	r2,8(sp)
   437bc:	d8800415 	stw	r2,16(sp)
   437c0:	d8800304 	addi	r2,sp,12
   437c4:	d8800015 	stw	r2,0(sp)
   437c8:	00800044 	movi	r2,1
   437cc:	d8800115 	stw	r2,4(sp)
   437d0:	88000226 	beq	r17,zero,437dc <_fputs_r+0x48>
   437d4:	88800e17 	ldw	r2,56(r17)
   437d8:	10001226 	beq	r2,zero,43824 <_fputs_r+0x90>
   437dc:	8080030b 	ldhu	r2,12(r16)
   437e0:	10c8000c 	andi	r3,r2,8192
   437e4:	1800061e 	bne	r3,zero,43800 <_fputs_r+0x6c>
   437e8:	81001917 	ldw	r4,100(r16)
   437ec:	00f7ffc4 	movi	r3,-8193
   437f0:	10880014 	ori	r2,r2,8192
   437f4:	20c6703a 	and	r3,r4,r3
   437f8:	8080030d 	sth	r2,12(r16)
   437fc:	80c01915 	stw	r3,100(r16)
   43800:	d80d883a 	mov	r6,sp
   43804:	800b883a 	mov	r5,r16
   43808:	8809883a 	mov	r4,r17
   4380c:	00438480 	call	43848 <__sfvwrite_r>
   43810:	dfc00717 	ldw	ra,28(sp)
   43814:	dc400617 	ldw	r17,24(sp)
   43818:	dc000517 	ldw	r16,20(sp)
   4381c:	dec00804 	addi	sp,sp,32
   43820:	f800283a 	ret
   43824:	8809883a 	mov	r4,r17
   43828:	0045c240 	call	45c24 <__sinit>
   4382c:	003feb06 	br	437dc <__alt_data_end+0xfffd2a9c>

00043830 <fputs>:
   43830:	00800174 	movhi	r2,5
   43834:	10a34b04 	addi	r2,r2,-29396
   43838:	280d883a 	mov	r6,r5
   4383c:	200b883a 	mov	r5,r4
   43840:	11000017 	ldw	r4,0(r2)
   43844:	00437941 	jmpi	43794 <_fputs_r>

00043848 <__sfvwrite_r>:
   43848:	30800217 	ldw	r2,8(r6)
   4384c:	10006726 	beq	r2,zero,439ec <__sfvwrite_r+0x1a4>
   43850:	28c0030b 	ldhu	r3,12(r5)
   43854:	defff404 	addi	sp,sp,-48
   43858:	dd400715 	stw	r21,28(sp)
   4385c:	dd000615 	stw	r20,24(sp)
   43860:	dc000215 	stw	r16,8(sp)
   43864:	dfc00b15 	stw	ra,44(sp)
   43868:	df000a15 	stw	fp,40(sp)
   4386c:	ddc00915 	stw	r23,36(sp)
   43870:	dd800815 	stw	r22,32(sp)
   43874:	dcc00515 	stw	r19,20(sp)
   43878:	dc800415 	stw	r18,16(sp)
   4387c:	dc400315 	stw	r17,12(sp)
   43880:	1880020c 	andi	r2,r3,8
   43884:	2821883a 	mov	r16,r5
   43888:	202b883a 	mov	r21,r4
   4388c:	3029883a 	mov	r20,r6
   43890:	10002726 	beq	r2,zero,43930 <__sfvwrite_r+0xe8>
   43894:	28800417 	ldw	r2,16(r5)
   43898:	10002526 	beq	r2,zero,43930 <__sfvwrite_r+0xe8>
   4389c:	1880008c 	andi	r2,r3,2
   438a0:	a4400017 	ldw	r17,0(r20)
   438a4:	10002a26 	beq	r2,zero,43950 <__sfvwrite_r+0x108>
   438a8:	05a00034 	movhi	r22,32768
   438ac:	0027883a 	mov	r19,zero
   438b0:	0025883a 	mov	r18,zero
   438b4:	b5bf0004 	addi	r22,r22,-1024
   438b8:	980d883a 	mov	r6,r19
   438bc:	a809883a 	mov	r4,r21
   438c0:	90004626 	beq	r18,zero,439dc <__sfvwrite_r+0x194>
   438c4:	900f883a 	mov	r7,r18
   438c8:	b480022e 	bgeu	r22,r18,438d4 <__sfvwrite_r+0x8c>
   438cc:	01e00034 	movhi	r7,32768
   438d0:	39ff0004 	addi	r7,r7,-1024
   438d4:	80800917 	ldw	r2,36(r16)
   438d8:	81400717 	ldw	r5,28(r16)
   438dc:	103ee83a 	callr	r2
   438e0:	00805a0e 	bge	zero,r2,43a4c <__sfvwrite_r+0x204>
   438e4:	a0c00217 	ldw	r3,8(r20)
   438e8:	98a7883a 	add	r19,r19,r2
   438ec:	90a5c83a 	sub	r18,r18,r2
   438f0:	1885c83a 	sub	r2,r3,r2
   438f4:	a0800215 	stw	r2,8(r20)
   438f8:	103fef1e 	bne	r2,zero,438b8 <__alt_data_end+0xfffd2b78>
   438fc:	0005883a 	mov	r2,zero
   43900:	dfc00b17 	ldw	ra,44(sp)
   43904:	df000a17 	ldw	fp,40(sp)
   43908:	ddc00917 	ldw	r23,36(sp)
   4390c:	dd800817 	ldw	r22,32(sp)
   43910:	dd400717 	ldw	r21,28(sp)
   43914:	dd000617 	ldw	r20,24(sp)
   43918:	dcc00517 	ldw	r19,20(sp)
   4391c:	dc800417 	ldw	r18,16(sp)
   43920:	dc400317 	ldw	r17,12(sp)
   43924:	dc000217 	ldw	r16,8(sp)
   43928:	dec00c04 	addi	sp,sp,48
   4392c:	f800283a 	ret
   43930:	800b883a 	mov	r5,r16
   43934:	a809883a 	mov	r4,r21
   43938:	00452300 	call	45230 <__swsetup_r>
   4393c:	1000ee1e 	bne	r2,zero,43cf8 <__sfvwrite_r+0x4b0>
   43940:	80c0030b 	ldhu	r3,12(r16)
   43944:	a4400017 	ldw	r17,0(r20)
   43948:	1880008c 	andi	r2,r3,2
   4394c:	103fd61e 	bne	r2,zero,438a8 <__alt_data_end+0xfffd2b68>
   43950:	1880004c 	andi	r2,r3,1
   43954:	1000421e 	bne	r2,zero,43a60 <__sfvwrite_r+0x218>
   43958:	0039883a 	mov	fp,zero
   4395c:	0025883a 	mov	r18,zero
   43960:	90001a26 	beq	r18,zero,439cc <__sfvwrite_r+0x184>
   43964:	1880800c 	andi	r2,r3,512
   43968:	84c00217 	ldw	r19,8(r16)
   4396c:	10002126 	beq	r2,zero,439f4 <__sfvwrite_r+0x1ac>
   43970:	982f883a 	mov	r23,r19
   43974:	94c09636 	bltu	r18,r19,43bd0 <__sfvwrite_r+0x388>
   43978:	1881200c 	andi	r2,r3,1152
   4397c:	1000a11e 	bne	r2,zero,43c04 <__sfvwrite_r+0x3bc>
   43980:	81000017 	ldw	r4,0(r16)
   43984:	b80d883a 	mov	r6,r23
   43988:	e00b883a 	mov	r5,fp
   4398c:	00447c40 	call	447c4 <memmove>
   43990:	80c00217 	ldw	r3,8(r16)
   43994:	81000017 	ldw	r4,0(r16)
   43998:	9005883a 	mov	r2,r18
   4399c:	1ce7c83a 	sub	r19,r3,r19
   439a0:	25cf883a 	add	r7,r4,r23
   439a4:	84c00215 	stw	r19,8(r16)
   439a8:	81c00015 	stw	r7,0(r16)
   439ac:	a0c00217 	ldw	r3,8(r20)
   439b0:	e0b9883a 	add	fp,fp,r2
   439b4:	90a5c83a 	sub	r18,r18,r2
   439b8:	18a7c83a 	sub	r19,r3,r2
   439bc:	a4c00215 	stw	r19,8(r20)
   439c0:	983fce26 	beq	r19,zero,438fc <__alt_data_end+0xfffd2bbc>
   439c4:	80c0030b 	ldhu	r3,12(r16)
   439c8:	903fe61e 	bne	r18,zero,43964 <__alt_data_end+0xfffd2c24>
   439cc:	8f000017 	ldw	fp,0(r17)
   439d0:	8c800117 	ldw	r18,4(r17)
   439d4:	8c400204 	addi	r17,r17,8
   439d8:	003fe106 	br	43960 <__alt_data_end+0xfffd2c20>
   439dc:	8cc00017 	ldw	r19,0(r17)
   439e0:	8c800117 	ldw	r18,4(r17)
   439e4:	8c400204 	addi	r17,r17,8
   439e8:	003fb306 	br	438b8 <__alt_data_end+0xfffd2b78>
   439ec:	0005883a 	mov	r2,zero
   439f0:	f800283a 	ret
   439f4:	81000017 	ldw	r4,0(r16)
   439f8:	80800417 	ldw	r2,16(r16)
   439fc:	11005a36 	bltu	r2,r4,43b68 <__sfvwrite_r+0x320>
   43a00:	85c00517 	ldw	r23,20(r16)
   43a04:	95c05836 	bltu	r18,r23,43b68 <__sfvwrite_r+0x320>
   43a08:	00a00034 	movhi	r2,32768
   43a0c:	10bfffc4 	addi	r2,r2,-1
   43a10:	9009883a 	mov	r4,r18
   43a14:	1480012e 	bgeu	r2,r18,43a1c <__sfvwrite_r+0x1d4>
   43a18:	1009883a 	mov	r4,r2
   43a1c:	b80b883a 	mov	r5,r23
   43a20:	00469780 	call	46978 <__divsi3>
   43a24:	b80b883a 	mov	r5,r23
   43a28:	1009883a 	mov	r4,r2
   43a2c:	0046b2c0 	call	46b2c <__mulsi3>
   43a30:	81400717 	ldw	r5,28(r16)
   43a34:	80c00917 	ldw	r3,36(r16)
   43a38:	100f883a 	mov	r7,r2
   43a3c:	e00d883a 	mov	r6,fp
   43a40:	a809883a 	mov	r4,r21
   43a44:	183ee83a 	callr	r3
   43a48:	00bfd816 	blt	zero,r2,439ac <__alt_data_end+0xfffd2c6c>
   43a4c:	8080030b 	ldhu	r2,12(r16)
   43a50:	10801014 	ori	r2,r2,64
   43a54:	8080030d 	sth	r2,12(r16)
   43a58:	00bfffc4 	movi	r2,-1
   43a5c:	003fa806 	br	43900 <__alt_data_end+0xfffd2bc0>
   43a60:	0027883a 	mov	r19,zero
   43a64:	0011883a 	mov	r8,zero
   43a68:	0039883a 	mov	fp,zero
   43a6c:	0025883a 	mov	r18,zero
   43a70:	90001f26 	beq	r18,zero,43af0 <__sfvwrite_r+0x2a8>
   43a74:	40005a26 	beq	r8,zero,43be0 <__sfvwrite_r+0x398>
   43a78:	982d883a 	mov	r22,r19
   43a7c:	94c0012e 	bgeu	r18,r19,43a84 <__sfvwrite_r+0x23c>
   43a80:	902d883a 	mov	r22,r18
   43a84:	81000017 	ldw	r4,0(r16)
   43a88:	80800417 	ldw	r2,16(r16)
   43a8c:	b02f883a 	mov	r23,r22
   43a90:	81c00517 	ldw	r7,20(r16)
   43a94:	1100032e 	bgeu	r2,r4,43aa4 <__sfvwrite_r+0x25c>
   43a98:	80c00217 	ldw	r3,8(r16)
   43a9c:	38c7883a 	add	r3,r7,r3
   43aa0:	1d801816 	blt	r3,r22,43b04 <__sfvwrite_r+0x2bc>
   43aa4:	b1c03e16 	blt	r22,r7,43ba0 <__sfvwrite_r+0x358>
   43aa8:	80800917 	ldw	r2,36(r16)
   43aac:	81400717 	ldw	r5,28(r16)
   43ab0:	e00d883a 	mov	r6,fp
   43ab4:	da000115 	stw	r8,4(sp)
   43ab8:	a809883a 	mov	r4,r21
   43abc:	103ee83a 	callr	r2
   43ac0:	102f883a 	mov	r23,r2
   43ac4:	da000117 	ldw	r8,4(sp)
   43ac8:	00bfe00e 	bge	zero,r2,43a4c <__alt_data_end+0xfffd2d0c>
   43acc:	9de7c83a 	sub	r19,r19,r23
   43ad0:	98001f26 	beq	r19,zero,43b50 <__sfvwrite_r+0x308>
   43ad4:	a0800217 	ldw	r2,8(r20)
   43ad8:	e5f9883a 	add	fp,fp,r23
   43adc:	95e5c83a 	sub	r18,r18,r23
   43ae0:	15efc83a 	sub	r23,r2,r23
   43ae4:	a5c00215 	stw	r23,8(r20)
   43ae8:	b83f8426 	beq	r23,zero,438fc <__alt_data_end+0xfffd2bbc>
   43aec:	903fe11e 	bne	r18,zero,43a74 <__alt_data_end+0xfffd2d34>
   43af0:	8f000017 	ldw	fp,0(r17)
   43af4:	8c800117 	ldw	r18,4(r17)
   43af8:	0011883a 	mov	r8,zero
   43afc:	8c400204 	addi	r17,r17,8
   43b00:	003fdb06 	br	43a70 <__alt_data_end+0xfffd2d30>
   43b04:	180d883a 	mov	r6,r3
   43b08:	e00b883a 	mov	r5,fp
   43b0c:	da000115 	stw	r8,4(sp)
   43b10:	d8c00015 	stw	r3,0(sp)
   43b14:	00447c40 	call	447c4 <memmove>
   43b18:	d8c00017 	ldw	r3,0(sp)
   43b1c:	80800017 	ldw	r2,0(r16)
   43b20:	800b883a 	mov	r5,r16
   43b24:	a809883a 	mov	r4,r21
   43b28:	10c5883a 	add	r2,r2,r3
   43b2c:	80800015 	stw	r2,0(r16)
   43b30:	d8c00015 	stw	r3,0(sp)
   43b34:	00458380 	call	45838 <_fflush_r>
   43b38:	d8c00017 	ldw	r3,0(sp)
   43b3c:	da000117 	ldw	r8,4(sp)
   43b40:	103fc21e 	bne	r2,zero,43a4c <__alt_data_end+0xfffd2d0c>
   43b44:	182f883a 	mov	r23,r3
   43b48:	9de7c83a 	sub	r19,r19,r23
   43b4c:	983fe11e 	bne	r19,zero,43ad4 <__alt_data_end+0xfffd2d94>
   43b50:	800b883a 	mov	r5,r16
   43b54:	a809883a 	mov	r4,r21
   43b58:	00458380 	call	45838 <_fflush_r>
   43b5c:	103fbb1e 	bne	r2,zero,43a4c <__alt_data_end+0xfffd2d0c>
   43b60:	0011883a 	mov	r8,zero
   43b64:	003fdb06 	br	43ad4 <__alt_data_end+0xfffd2d94>
   43b68:	94c0012e 	bgeu	r18,r19,43b70 <__sfvwrite_r+0x328>
   43b6c:	9027883a 	mov	r19,r18
   43b70:	980d883a 	mov	r6,r19
   43b74:	e00b883a 	mov	r5,fp
   43b78:	00447c40 	call	447c4 <memmove>
   43b7c:	80800217 	ldw	r2,8(r16)
   43b80:	80c00017 	ldw	r3,0(r16)
   43b84:	14c5c83a 	sub	r2,r2,r19
   43b88:	1cc7883a 	add	r3,r3,r19
   43b8c:	80800215 	stw	r2,8(r16)
   43b90:	80c00015 	stw	r3,0(r16)
   43b94:	10004326 	beq	r2,zero,43ca4 <__sfvwrite_r+0x45c>
   43b98:	9805883a 	mov	r2,r19
   43b9c:	003f8306 	br	439ac <__alt_data_end+0xfffd2c6c>
   43ba0:	b00d883a 	mov	r6,r22
   43ba4:	e00b883a 	mov	r5,fp
   43ba8:	da000115 	stw	r8,4(sp)
   43bac:	00447c40 	call	447c4 <memmove>
   43bb0:	80800217 	ldw	r2,8(r16)
   43bb4:	80c00017 	ldw	r3,0(r16)
   43bb8:	da000117 	ldw	r8,4(sp)
   43bbc:	1585c83a 	sub	r2,r2,r22
   43bc0:	1dad883a 	add	r22,r3,r22
   43bc4:	80800215 	stw	r2,8(r16)
   43bc8:	85800015 	stw	r22,0(r16)
   43bcc:	003fbf06 	br	43acc <__alt_data_end+0xfffd2d8c>
   43bd0:	81000017 	ldw	r4,0(r16)
   43bd4:	9027883a 	mov	r19,r18
   43bd8:	902f883a 	mov	r23,r18
   43bdc:	003f6906 	br	43984 <__alt_data_end+0xfffd2c44>
   43be0:	900d883a 	mov	r6,r18
   43be4:	01400284 	movi	r5,10
   43be8:	e009883a 	mov	r4,fp
   43bec:	004451c0 	call	4451c <memchr>
   43bf0:	10003e26 	beq	r2,zero,43cec <__sfvwrite_r+0x4a4>
   43bf4:	10800044 	addi	r2,r2,1
   43bf8:	1727c83a 	sub	r19,r2,fp
   43bfc:	02000044 	movi	r8,1
   43c00:	003f9d06 	br	43a78 <__alt_data_end+0xfffd2d38>
   43c04:	80800517 	ldw	r2,20(r16)
   43c08:	81400417 	ldw	r5,16(r16)
   43c0c:	81c00017 	ldw	r7,0(r16)
   43c10:	10a7883a 	add	r19,r2,r2
   43c14:	9885883a 	add	r2,r19,r2
   43c18:	1026d7fa 	srli	r19,r2,31
   43c1c:	396dc83a 	sub	r22,r7,r5
   43c20:	b1000044 	addi	r4,r22,1
   43c24:	9885883a 	add	r2,r19,r2
   43c28:	1027d07a 	srai	r19,r2,1
   43c2c:	2485883a 	add	r2,r4,r18
   43c30:	980d883a 	mov	r6,r19
   43c34:	9880022e 	bgeu	r19,r2,43c40 <__sfvwrite_r+0x3f8>
   43c38:	1027883a 	mov	r19,r2
   43c3c:	100d883a 	mov	r6,r2
   43c40:	18c1000c 	andi	r3,r3,1024
   43c44:	18001c26 	beq	r3,zero,43cb8 <__sfvwrite_r+0x470>
   43c48:	300b883a 	mov	r5,r6
   43c4c:	a809883a 	mov	r4,r21
   43c50:	0043d100 	call	43d10 <_malloc_r>
   43c54:	102f883a 	mov	r23,r2
   43c58:	10002926 	beq	r2,zero,43d00 <__sfvwrite_r+0x4b8>
   43c5c:	81400417 	ldw	r5,16(r16)
   43c60:	b00d883a 	mov	r6,r22
   43c64:	1009883a 	mov	r4,r2
   43c68:	004467c0 	call	4467c <memcpy>
   43c6c:	8080030b 	ldhu	r2,12(r16)
   43c70:	00fedfc4 	movi	r3,-1153
   43c74:	10c4703a 	and	r2,r2,r3
   43c78:	10802014 	ori	r2,r2,128
   43c7c:	8080030d 	sth	r2,12(r16)
   43c80:	bd89883a 	add	r4,r23,r22
   43c84:	9d8fc83a 	sub	r7,r19,r22
   43c88:	85c00415 	stw	r23,16(r16)
   43c8c:	84c00515 	stw	r19,20(r16)
   43c90:	81000015 	stw	r4,0(r16)
   43c94:	9027883a 	mov	r19,r18
   43c98:	81c00215 	stw	r7,8(r16)
   43c9c:	902f883a 	mov	r23,r18
   43ca0:	003f3806 	br	43984 <__alt_data_end+0xfffd2c44>
   43ca4:	800b883a 	mov	r5,r16
   43ca8:	a809883a 	mov	r4,r21
   43cac:	00458380 	call	45838 <_fflush_r>
   43cb0:	103fb926 	beq	r2,zero,43b98 <__alt_data_end+0xfffd2e58>
   43cb4:	003f6506 	br	43a4c <__alt_data_end+0xfffd2d0c>
   43cb8:	a809883a 	mov	r4,r21
   43cbc:	0044a880 	call	44a88 <_realloc_r>
   43cc0:	102f883a 	mov	r23,r2
   43cc4:	103fee1e 	bne	r2,zero,43c80 <__alt_data_end+0xfffd2f40>
   43cc8:	81400417 	ldw	r5,16(r16)
   43ccc:	a809883a 	mov	r4,r21
   43cd0:	0045d980 	call	45d98 <_free_r>
   43cd4:	8080030b 	ldhu	r2,12(r16)
   43cd8:	00ffdfc4 	movi	r3,-129
   43cdc:	1884703a 	and	r2,r3,r2
   43ce0:	00c00304 	movi	r3,12
   43ce4:	a8c00015 	stw	r3,0(r21)
   43ce8:	003f5906 	br	43a50 <__alt_data_end+0xfffd2d10>
   43cec:	94c00044 	addi	r19,r18,1
   43cf0:	02000044 	movi	r8,1
   43cf4:	003f6006 	br	43a78 <__alt_data_end+0xfffd2d38>
   43cf8:	00bfffc4 	movi	r2,-1
   43cfc:	003f0006 	br	43900 <__alt_data_end+0xfffd2bc0>
   43d00:	00800304 	movi	r2,12
   43d04:	a8800015 	stw	r2,0(r21)
   43d08:	8080030b 	ldhu	r2,12(r16)
   43d0c:	003f5006 	br	43a50 <__alt_data_end+0xfffd2d10>

00043d10 <_malloc_r>:
   43d10:	defff504 	addi	sp,sp,-44
   43d14:	dc800315 	stw	r18,12(sp)
   43d18:	dfc00a15 	stw	ra,40(sp)
   43d1c:	df000915 	stw	fp,36(sp)
   43d20:	ddc00815 	stw	r23,32(sp)
   43d24:	dd800715 	stw	r22,28(sp)
   43d28:	dd400615 	stw	r21,24(sp)
   43d2c:	dd000515 	stw	r20,20(sp)
   43d30:	dcc00415 	stw	r19,16(sp)
   43d34:	dc400215 	stw	r17,8(sp)
   43d38:	dc000115 	stw	r16,4(sp)
   43d3c:	288002c4 	addi	r2,r5,11
   43d40:	00c00584 	movi	r3,22
   43d44:	2025883a 	mov	r18,r4
   43d48:	18807f2e 	bgeu	r3,r2,43f48 <_malloc_r+0x238>
   43d4c:	047ffe04 	movi	r17,-8
   43d50:	1462703a 	and	r17,r2,r17
   43d54:	8800a316 	blt	r17,zero,43fe4 <_malloc_r+0x2d4>
   43d58:	8940a236 	bltu	r17,r5,43fe4 <_malloc_r+0x2d4>
   43d5c:	0046eb80 	call	46eb8 <__malloc_lock>
   43d60:	00807dc4 	movi	r2,503
   43d64:	1441e92e 	bgeu	r2,r17,4450c <_malloc_r+0x7fc>
   43d68:	8804d27a 	srli	r2,r17,9
   43d6c:	1000a126 	beq	r2,zero,43ff4 <_malloc_r+0x2e4>
   43d70:	00c00104 	movi	r3,4
   43d74:	18811e36 	bltu	r3,r2,441f0 <_malloc_r+0x4e0>
   43d78:	8804d1ba 	srli	r2,r17,6
   43d7c:	12000e44 	addi	r8,r2,57
   43d80:	11c00e04 	addi	r7,r2,56
   43d84:	4209883a 	add	r4,r8,r8
   43d88:	04c00174 	movhi	r19,5
   43d8c:	2109883a 	add	r4,r4,r4
   43d90:	9ce23f04 	addi	r19,r19,-30468
   43d94:	2109883a 	add	r4,r4,r4
   43d98:	9909883a 	add	r4,r19,r4
   43d9c:	24000117 	ldw	r16,4(r4)
   43da0:	213ffe04 	addi	r4,r4,-8
   43da4:	24009726 	beq	r4,r16,44004 <_malloc_r+0x2f4>
   43da8:	80800117 	ldw	r2,4(r16)
   43dac:	01bfff04 	movi	r6,-4
   43db0:	014003c4 	movi	r5,15
   43db4:	1184703a 	and	r2,r2,r6
   43db8:	1447c83a 	sub	r3,r2,r17
   43dbc:	28c00716 	blt	r5,r3,43ddc <_malloc_r+0xcc>
   43dc0:	1800920e 	bge	r3,zero,4400c <_malloc_r+0x2fc>
   43dc4:	84000317 	ldw	r16,12(r16)
   43dc8:	24008e26 	beq	r4,r16,44004 <_malloc_r+0x2f4>
   43dcc:	80800117 	ldw	r2,4(r16)
   43dd0:	1184703a 	and	r2,r2,r6
   43dd4:	1447c83a 	sub	r3,r2,r17
   43dd8:	28fff90e 	bge	r5,r3,43dc0 <__alt_data_end+0xfffd3080>
   43ddc:	3809883a 	mov	r4,r7
   43de0:	01800174 	movhi	r6,5
   43de4:	9c000417 	ldw	r16,16(r19)
   43de8:	31a23f04 	addi	r6,r6,-30468
   43dec:	32000204 	addi	r8,r6,8
   43df0:	82013426 	beq	r16,r8,442c4 <_malloc_r+0x5b4>
   43df4:	80c00117 	ldw	r3,4(r16)
   43df8:	00bfff04 	movi	r2,-4
   43dfc:	188e703a 	and	r7,r3,r2
   43e00:	3c45c83a 	sub	r2,r7,r17
   43e04:	00c003c4 	movi	r3,15
   43e08:	18811f16 	blt	r3,r2,44288 <_malloc_r+0x578>
   43e0c:	32000515 	stw	r8,20(r6)
   43e10:	32000415 	stw	r8,16(r6)
   43e14:	10007f0e 	bge	r2,zero,44014 <_malloc_r+0x304>
   43e18:	00807fc4 	movi	r2,511
   43e1c:	11c0fd36 	bltu	r2,r7,44214 <_malloc_r+0x504>
   43e20:	3806d0fa 	srli	r3,r7,3
   43e24:	01c00044 	movi	r7,1
   43e28:	30800117 	ldw	r2,4(r6)
   43e2c:	19400044 	addi	r5,r3,1
   43e30:	294b883a 	add	r5,r5,r5
   43e34:	1807d0ba 	srai	r3,r3,2
   43e38:	294b883a 	add	r5,r5,r5
   43e3c:	294b883a 	add	r5,r5,r5
   43e40:	298b883a 	add	r5,r5,r6
   43e44:	38c6983a 	sll	r3,r7,r3
   43e48:	29c00017 	ldw	r7,0(r5)
   43e4c:	2a7ffe04 	addi	r9,r5,-8
   43e50:	1886b03a 	or	r3,r3,r2
   43e54:	82400315 	stw	r9,12(r16)
   43e58:	81c00215 	stw	r7,8(r16)
   43e5c:	30c00115 	stw	r3,4(r6)
   43e60:	2c000015 	stw	r16,0(r5)
   43e64:	3c000315 	stw	r16,12(r7)
   43e68:	2005d0ba 	srai	r2,r4,2
   43e6c:	01400044 	movi	r5,1
   43e70:	288a983a 	sll	r5,r5,r2
   43e74:	19406f36 	bltu	r3,r5,44034 <_malloc_r+0x324>
   43e78:	28c4703a 	and	r2,r5,r3
   43e7c:	10000a1e 	bne	r2,zero,43ea8 <_malloc_r+0x198>
   43e80:	00bfff04 	movi	r2,-4
   43e84:	294b883a 	add	r5,r5,r5
   43e88:	2088703a 	and	r4,r4,r2
   43e8c:	28c4703a 	and	r2,r5,r3
   43e90:	21000104 	addi	r4,r4,4
   43e94:	1000041e 	bne	r2,zero,43ea8 <_malloc_r+0x198>
   43e98:	294b883a 	add	r5,r5,r5
   43e9c:	28c4703a 	and	r2,r5,r3
   43ea0:	21000104 	addi	r4,r4,4
   43ea4:	103ffc26 	beq	r2,zero,43e98 <__alt_data_end+0xfffd3158>
   43ea8:	02bfff04 	movi	r10,-4
   43eac:	024003c4 	movi	r9,15
   43eb0:	21800044 	addi	r6,r4,1
   43eb4:	318d883a 	add	r6,r6,r6
   43eb8:	318d883a 	add	r6,r6,r6
   43ebc:	318d883a 	add	r6,r6,r6
   43ec0:	998d883a 	add	r6,r19,r6
   43ec4:	333ffe04 	addi	r12,r6,-8
   43ec8:	2017883a 	mov	r11,r4
   43ecc:	31800104 	addi	r6,r6,4
   43ed0:	34000017 	ldw	r16,0(r6)
   43ed4:	31fffd04 	addi	r7,r6,-12
   43ed8:	81c0041e 	bne	r16,r7,43eec <_malloc_r+0x1dc>
   43edc:	0000fb06 	br	442cc <_malloc_r+0x5bc>
   43ee0:	1801030e 	bge	r3,zero,442f0 <_malloc_r+0x5e0>
   43ee4:	84000317 	ldw	r16,12(r16)
   43ee8:	81c0f826 	beq	r16,r7,442cc <_malloc_r+0x5bc>
   43eec:	80800117 	ldw	r2,4(r16)
   43ef0:	1284703a 	and	r2,r2,r10
   43ef4:	1447c83a 	sub	r3,r2,r17
   43ef8:	48fff90e 	bge	r9,r3,43ee0 <__alt_data_end+0xfffd31a0>
   43efc:	80800317 	ldw	r2,12(r16)
   43f00:	81000217 	ldw	r4,8(r16)
   43f04:	89400054 	ori	r5,r17,1
   43f08:	81400115 	stw	r5,4(r16)
   43f0c:	20800315 	stw	r2,12(r4)
   43f10:	11000215 	stw	r4,8(r2)
   43f14:	8463883a 	add	r17,r16,r17
   43f18:	9c400515 	stw	r17,20(r19)
   43f1c:	9c400415 	stw	r17,16(r19)
   43f20:	18800054 	ori	r2,r3,1
   43f24:	88800115 	stw	r2,4(r17)
   43f28:	8a000315 	stw	r8,12(r17)
   43f2c:	8a000215 	stw	r8,8(r17)
   43f30:	88e3883a 	add	r17,r17,r3
   43f34:	88c00015 	stw	r3,0(r17)
   43f38:	9009883a 	mov	r4,r18
   43f3c:	0046edc0 	call	46edc <__malloc_unlock>
   43f40:	80800204 	addi	r2,r16,8
   43f44:	00001b06 	br	43fb4 <_malloc_r+0x2a4>
   43f48:	04400404 	movi	r17,16
   43f4c:	89402536 	bltu	r17,r5,43fe4 <_malloc_r+0x2d4>
   43f50:	0046eb80 	call	46eb8 <__malloc_lock>
   43f54:	00800184 	movi	r2,6
   43f58:	01000084 	movi	r4,2
   43f5c:	04c00174 	movhi	r19,5
   43f60:	1085883a 	add	r2,r2,r2
   43f64:	9ce23f04 	addi	r19,r19,-30468
   43f68:	1085883a 	add	r2,r2,r2
   43f6c:	9885883a 	add	r2,r19,r2
   43f70:	14000117 	ldw	r16,4(r2)
   43f74:	10fffe04 	addi	r3,r2,-8
   43f78:	80c0d926 	beq	r16,r3,442e0 <_malloc_r+0x5d0>
   43f7c:	80c00117 	ldw	r3,4(r16)
   43f80:	81000317 	ldw	r4,12(r16)
   43f84:	00bfff04 	movi	r2,-4
   43f88:	1884703a 	and	r2,r3,r2
   43f8c:	81400217 	ldw	r5,8(r16)
   43f90:	8085883a 	add	r2,r16,r2
   43f94:	10c00117 	ldw	r3,4(r2)
   43f98:	29000315 	stw	r4,12(r5)
   43f9c:	21400215 	stw	r5,8(r4)
   43fa0:	18c00054 	ori	r3,r3,1
   43fa4:	10c00115 	stw	r3,4(r2)
   43fa8:	9009883a 	mov	r4,r18
   43fac:	0046edc0 	call	46edc <__malloc_unlock>
   43fb0:	80800204 	addi	r2,r16,8
   43fb4:	dfc00a17 	ldw	ra,40(sp)
   43fb8:	df000917 	ldw	fp,36(sp)
   43fbc:	ddc00817 	ldw	r23,32(sp)
   43fc0:	dd800717 	ldw	r22,28(sp)
   43fc4:	dd400617 	ldw	r21,24(sp)
   43fc8:	dd000517 	ldw	r20,20(sp)
   43fcc:	dcc00417 	ldw	r19,16(sp)
   43fd0:	dc800317 	ldw	r18,12(sp)
   43fd4:	dc400217 	ldw	r17,8(sp)
   43fd8:	dc000117 	ldw	r16,4(sp)
   43fdc:	dec00b04 	addi	sp,sp,44
   43fe0:	f800283a 	ret
   43fe4:	00800304 	movi	r2,12
   43fe8:	90800015 	stw	r2,0(r18)
   43fec:	0005883a 	mov	r2,zero
   43ff0:	003ff006 	br	43fb4 <__alt_data_end+0xfffd3274>
   43ff4:	01002004 	movi	r4,128
   43ff8:	02001004 	movi	r8,64
   43ffc:	01c00fc4 	movi	r7,63
   44000:	003f6106 	br	43d88 <__alt_data_end+0xfffd3048>
   44004:	4009883a 	mov	r4,r8
   44008:	003f7506 	br	43de0 <__alt_data_end+0xfffd30a0>
   4400c:	81000317 	ldw	r4,12(r16)
   44010:	003fde06 	br	43f8c <__alt_data_end+0xfffd324c>
   44014:	81c5883a 	add	r2,r16,r7
   44018:	11400117 	ldw	r5,4(r2)
   4401c:	9009883a 	mov	r4,r18
   44020:	29400054 	ori	r5,r5,1
   44024:	11400115 	stw	r5,4(r2)
   44028:	0046edc0 	call	46edc <__malloc_unlock>
   4402c:	80800204 	addi	r2,r16,8
   44030:	003fe006 	br	43fb4 <__alt_data_end+0xfffd3274>
   44034:	9c000217 	ldw	r16,8(r19)
   44038:	00bfff04 	movi	r2,-4
   4403c:	85800117 	ldw	r22,4(r16)
   44040:	b0ac703a 	and	r22,r22,r2
   44044:	b4400336 	bltu	r22,r17,44054 <_malloc_r+0x344>
   44048:	b445c83a 	sub	r2,r22,r17
   4404c:	00c003c4 	movi	r3,15
   44050:	18805d16 	blt	r3,r2,441c8 <_malloc_r+0x4b8>
   44054:	05c00174 	movhi	r23,5
   44058:	00800174 	movhi	r2,5
   4405c:	10aa0304 	addi	r2,r2,-22516
   44060:	bde34c04 	addi	r23,r23,-29392
   44064:	15400017 	ldw	r21,0(r2)
   44068:	b8c00017 	ldw	r3,0(r23)
   4406c:	00bfffc4 	movi	r2,-1
   44070:	858d883a 	add	r6,r16,r22
   44074:	8d6b883a 	add	r21,r17,r21
   44078:	1880ea26 	beq	r3,r2,44424 <_malloc_r+0x714>
   4407c:	ad4403c4 	addi	r21,r21,4111
   44080:	00bc0004 	movi	r2,-4096
   44084:	a8aa703a 	and	r21,r21,r2
   44088:	a80b883a 	mov	r5,r21
   4408c:	9009883a 	mov	r4,r18
   44090:	d9800015 	stw	r6,0(sp)
   44094:	0044fec0 	call	44fec <_sbrk_r>
   44098:	1029883a 	mov	r20,r2
   4409c:	00bfffc4 	movi	r2,-1
   440a0:	d9800017 	ldw	r6,0(sp)
   440a4:	a080e826 	beq	r20,r2,44448 <_malloc_r+0x738>
   440a8:	a180a636 	bltu	r20,r6,44344 <_malloc_r+0x634>
   440ac:	07000174 	movhi	fp,5
   440b0:	e72a0404 	addi	fp,fp,-22512
   440b4:	e0800017 	ldw	r2,0(fp)
   440b8:	a887883a 	add	r3,r21,r2
   440bc:	e0c00015 	stw	r3,0(fp)
   440c0:	3500e626 	beq	r6,r20,4445c <_malloc_r+0x74c>
   440c4:	b9000017 	ldw	r4,0(r23)
   440c8:	00bfffc4 	movi	r2,-1
   440cc:	2080ee26 	beq	r4,r2,44488 <_malloc_r+0x778>
   440d0:	a185c83a 	sub	r2,r20,r6
   440d4:	10c5883a 	add	r2,r2,r3
   440d8:	e0800015 	stw	r2,0(fp)
   440dc:	a0c001cc 	andi	r3,r20,7
   440e0:	1800bc26 	beq	r3,zero,443d4 <_malloc_r+0x6c4>
   440e4:	a0e9c83a 	sub	r20,r20,r3
   440e8:	00840204 	movi	r2,4104
   440ec:	a5000204 	addi	r20,r20,8
   440f0:	10c7c83a 	sub	r3,r2,r3
   440f4:	a545883a 	add	r2,r20,r21
   440f8:	1083ffcc 	andi	r2,r2,4095
   440fc:	18abc83a 	sub	r21,r3,r2
   44100:	a80b883a 	mov	r5,r21
   44104:	9009883a 	mov	r4,r18
   44108:	0044fec0 	call	44fec <_sbrk_r>
   4410c:	00ffffc4 	movi	r3,-1
   44110:	10c0e126 	beq	r2,r3,44498 <_malloc_r+0x788>
   44114:	1505c83a 	sub	r2,r2,r20
   44118:	1545883a 	add	r2,r2,r21
   4411c:	10800054 	ori	r2,r2,1
   44120:	e0c00017 	ldw	r3,0(fp)
   44124:	9d000215 	stw	r20,8(r19)
   44128:	a0800115 	stw	r2,4(r20)
   4412c:	a8c7883a 	add	r3,r21,r3
   44130:	e0c00015 	stw	r3,0(fp)
   44134:	84c00e26 	beq	r16,r19,44170 <_malloc_r+0x460>
   44138:	018003c4 	movi	r6,15
   4413c:	3580a72e 	bgeu	r6,r22,443dc <_malloc_r+0x6cc>
   44140:	81400117 	ldw	r5,4(r16)
   44144:	013ffe04 	movi	r4,-8
   44148:	b0bffd04 	addi	r2,r22,-12
   4414c:	1104703a 	and	r2,r2,r4
   44150:	2900004c 	andi	r4,r5,1
   44154:	2088b03a 	or	r4,r4,r2
   44158:	81000115 	stw	r4,4(r16)
   4415c:	01400144 	movi	r5,5
   44160:	8089883a 	add	r4,r16,r2
   44164:	21400115 	stw	r5,4(r4)
   44168:	21400215 	stw	r5,8(r4)
   4416c:	3080cd36 	bltu	r6,r2,444a4 <_malloc_r+0x794>
   44170:	00800174 	movhi	r2,5
   44174:	10aa0204 	addi	r2,r2,-22520
   44178:	11000017 	ldw	r4,0(r2)
   4417c:	20c0012e 	bgeu	r4,r3,44184 <_malloc_r+0x474>
   44180:	10c00015 	stw	r3,0(r2)
   44184:	00800174 	movhi	r2,5
   44188:	10aa0104 	addi	r2,r2,-22524
   4418c:	11000017 	ldw	r4,0(r2)
   44190:	9c000217 	ldw	r16,8(r19)
   44194:	20c0012e 	bgeu	r4,r3,4419c <_malloc_r+0x48c>
   44198:	10c00015 	stw	r3,0(r2)
   4419c:	80c00117 	ldw	r3,4(r16)
   441a0:	00bfff04 	movi	r2,-4
   441a4:	1886703a 	and	r3,r3,r2
   441a8:	1c45c83a 	sub	r2,r3,r17
   441ac:	1c400236 	bltu	r3,r17,441b8 <_malloc_r+0x4a8>
   441b0:	00c003c4 	movi	r3,15
   441b4:	18800416 	blt	r3,r2,441c8 <_malloc_r+0x4b8>
   441b8:	9009883a 	mov	r4,r18
   441bc:	0046edc0 	call	46edc <__malloc_unlock>
   441c0:	0005883a 	mov	r2,zero
   441c4:	003f7b06 	br	43fb4 <__alt_data_end+0xfffd3274>
   441c8:	88c00054 	ori	r3,r17,1
   441cc:	80c00115 	stw	r3,4(r16)
   441d0:	8463883a 	add	r17,r16,r17
   441d4:	10800054 	ori	r2,r2,1
   441d8:	9c400215 	stw	r17,8(r19)
   441dc:	88800115 	stw	r2,4(r17)
   441e0:	9009883a 	mov	r4,r18
   441e4:	0046edc0 	call	46edc <__malloc_unlock>
   441e8:	80800204 	addi	r2,r16,8
   441ec:	003f7106 	br	43fb4 <__alt_data_end+0xfffd3274>
   441f0:	00c00504 	movi	r3,20
   441f4:	18804a2e 	bgeu	r3,r2,44320 <_malloc_r+0x610>
   441f8:	00c01504 	movi	r3,84
   441fc:	18806e36 	bltu	r3,r2,443b8 <_malloc_r+0x6a8>
   44200:	8804d33a 	srli	r2,r17,12
   44204:	12001bc4 	addi	r8,r2,111
   44208:	11c01b84 	addi	r7,r2,110
   4420c:	4209883a 	add	r4,r8,r8
   44210:	003edd06 	br	43d88 <__alt_data_end+0xfffd3048>
   44214:	3804d27a 	srli	r2,r7,9
   44218:	00c00104 	movi	r3,4
   4421c:	1880442e 	bgeu	r3,r2,44330 <_malloc_r+0x620>
   44220:	00c00504 	movi	r3,20
   44224:	18808136 	bltu	r3,r2,4442c <_malloc_r+0x71c>
   44228:	11401704 	addi	r5,r2,92
   4422c:	10c016c4 	addi	r3,r2,91
   44230:	294b883a 	add	r5,r5,r5
   44234:	294b883a 	add	r5,r5,r5
   44238:	294b883a 	add	r5,r5,r5
   4423c:	994b883a 	add	r5,r19,r5
   44240:	28800017 	ldw	r2,0(r5)
   44244:	01800174 	movhi	r6,5
   44248:	297ffe04 	addi	r5,r5,-8
   4424c:	31a23f04 	addi	r6,r6,-30468
   44250:	28806526 	beq	r5,r2,443e8 <_malloc_r+0x6d8>
   44254:	01bfff04 	movi	r6,-4
   44258:	10c00117 	ldw	r3,4(r2)
   4425c:	1986703a 	and	r3,r3,r6
   44260:	38c0022e 	bgeu	r7,r3,4426c <_malloc_r+0x55c>
   44264:	10800217 	ldw	r2,8(r2)
   44268:	28bffb1e 	bne	r5,r2,44258 <__alt_data_end+0xfffd3518>
   4426c:	11400317 	ldw	r5,12(r2)
   44270:	98c00117 	ldw	r3,4(r19)
   44274:	81400315 	stw	r5,12(r16)
   44278:	80800215 	stw	r2,8(r16)
   4427c:	2c000215 	stw	r16,8(r5)
   44280:	14000315 	stw	r16,12(r2)
   44284:	003ef806 	br	43e68 <__alt_data_end+0xfffd3128>
   44288:	88c00054 	ori	r3,r17,1
   4428c:	80c00115 	stw	r3,4(r16)
   44290:	8463883a 	add	r17,r16,r17
   44294:	34400515 	stw	r17,20(r6)
   44298:	34400415 	stw	r17,16(r6)
   4429c:	10c00054 	ori	r3,r2,1
   442a0:	8a000315 	stw	r8,12(r17)
   442a4:	8a000215 	stw	r8,8(r17)
   442a8:	88c00115 	stw	r3,4(r17)
   442ac:	88a3883a 	add	r17,r17,r2
   442b0:	88800015 	stw	r2,0(r17)
   442b4:	9009883a 	mov	r4,r18
   442b8:	0046edc0 	call	46edc <__malloc_unlock>
   442bc:	80800204 	addi	r2,r16,8
   442c0:	003f3c06 	br	43fb4 <__alt_data_end+0xfffd3274>
   442c4:	30c00117 	ldw	r3,4(r6)
   442c8:	003ee706 	br	43e68 <__alt_data_end+0xfffd3128>
   442cc:	5ac00044 	addi	r11,r11,1
   442d0:	588000cc 	andi	r2,r11,3
   442d4:	31800204 	addi	r6,r6,8
   442d8:	103efd1e 	bne	r2,zero,43ed0 <__alt_data_end+0xfffd3190>
   442dc:	00002406 	br	44370 <_malloc_r+0x660>
   442e0:	14000317 	ldw	r16,12(r2)
   442e4:	143f251e 	bne	r2,r16,43f7c <__alt_data_end+0xfffd323c>
   442e8:	21000084 	addi	r4,r4,2
   442ec:	003ebc06 	br	43de0 <__alt_data_end+0xfffd30a0>
   442f0:	8085883a 	add	r2,r16,r2
   442f4:	10c00117 	ldw	r3,4(r2)
   442f8:	81000317 	ldw	r4,12(r16)
   442fc:	81400217 	ldw	r5,8(r16)
   44300:	18c00054 	ori	r3,r3,1
   44304:	10c00115 	stw	r3,4(r2)
   44308:	29000315 	stw	r4,12(r5)
   4430c:	21400215 	stw	r5,8(r4)
   44310:	9009883a 	mov	r4,r18
   44314:	0046edc0 	call	46edc <__malloc_unlock>
   44318:	80800204 	addi	r2,r16,8
   4431c:	003f2506 	br	43fb4 <__alt_data_end+0xfffd3274>
   44320:	12001704 	addi	r8,r2,92
   44324:	11c016c4 	addi	r7,r2,91
   44328:	4209883a 	add	r4,r8,r8
   4432c:	003e9606 	br	43d88 <__alt_data_end+0xfffd3048>
   44330:	3804d1ba 	srli	r2,r7,6
   44334:	11400e44 	addi	r5,r2,57
   44338:	10c00e04 	addi	r3,r2,56
   4433c:	294b883a 	add	r5,r5,r5
   44340:	003fbc06 	br	44234 <__alt_data_end+0xfffd34f4>
   44344:	84ff5926 	beq	r16,r19,440ac <__alt_data_end+0xfffd336c>
   44348:	00800174 	movhi	r2,5
   4434c:	10a23f04 	addi	r2,r2,-30468
   44350:	14000217 	ldw	r16,8(r2)
   44354:	00bfff04 	movi	r2,-4
   44358:	80c00117 	ldw	r3,4(r16)
   4435c:	1886703a 	and	r3,r3,r2
   44360:	003f9106 	br	441a8 <__alt_data_end+0xfffd3468>
   44364:	60800217 	ldw	r2,8(r12)
   44368:	213fffc4 	addi	r4,r4,-1
   4436c:	1300651e 	bne	r2,r12,44504 <_malloc_r+0x7f4>
   44370:	208000cc 	andi	r2,r4,3
   44374:	633ffe04 	addi	r12,r12,-8
   44378:	103ffa1e 	bne	r2,zero,44364 <__alt_data_end+0xfffd3624>
   4437c:	98800117 	ldw	r2,4(r19)
   44380:	0146303a 	nor	r3,zero,r5
   44384:	1884703a 	and	r2,r3,r2
   44388:	98800115 	stw	r2,4(r19)
   4438c:	294b883a 	add	r5,r5,r5
   44390:	117f2836 	bltu	r2,r5,44034 <__alt_data_end+0xfffd32f4>
   44394:	283f2726 	beq	r5,zero,44034 <__alt_data_end+0xfffd32f4>
   44398:	2886703a 	and	r3,r5,r2
   4439c:	5809883a 	mov	r4,r11
   443a0:	183ec31e 	bne	r3,zero,43eb0 <__alt_data_end+0xfffd3170>
   443a4:	294b883a 	add	r5,r5,r5
   443a8:	2886703a 	and	r3,r5,r2
   443ac:	21000104 	addi	r4,r4,4
   443b0:	183ffc26 	beq	r3,zero,443a4 <__alt_data_end+0xfffd3664>
   443b4:	003ebe06 	br	43eb0 <__alt_data_end+0xfffd3170>
   443b8:	00c05504 	movi	r3,340
   443bc:	18801236 	bltu	r3,r2,44408 <_malloc_r+0x6f8>
   443c0:	8804d3fa 	srli	r2,r17,15
   443c4:	12001e04 	addi	r8,r2,120
   443c8:	11c01dc4 	addi	r7,r2,119
   443cc:	4209883a 	add	r4,r8,r8
   443d0:	003e6d06 	br	43d88 <__alt_data_end+0xfffd3048>
   443d4:	00c40004 	movi	r3,4096
   443d8:	003f4606 	br	440f4 <__alt_data_end+0xfffd33b4>
   443dc:	00800044 	movi	r2,1
   443e0:	a0800115 	stw	r2,4(r20)
   443e4:	003f7406 	br	441b8 <__alt_data_end+0xfffd3478>
   443e8:	1805d0ba 	srai	r2,r3,2
   443ec:	01c00044 	movi	r7,1
   443f0:	30c00117 	ldw	r3,4(r6)
   443f4:	388e983a 	sll	r7,r7,r2
   443f8:	2805883a 	mov	r2,r5
   443fc:	38c6b03a 	or	r3,r7,r3
   44400:	30c00115 	stw	r3,4(r6)
   44404:	003f9b06 	br	44274 <__alt_data_end+0xfffd3534>
   44408:	00c15504 	movi	r3,1364
   4440c:	18801a36 	bltu	r3,r2,44478 <_malloc_r+0x768>
   44410:	8804d4ba 	srli	r2,r17,18
   44414:	12001f44 	addi	r8,r2,125
   44418:	11c01f04 	addi	r7,r2,124
   4441c:	4209883a 	add	r4,r8,r8
   44420:	003e5906 	br	43d88 <__alt_data_end+0xfffd3048>
   44424:	ad400404 	addi	r21,r21,16
   44428:	003f1706 	br	44088 <__alt_data_end+0xfffd3348>
   4442c:	00c01504 	movi	r3,84
   44430:	18802336 	bltu	r3,r2,444c0 <_malloc_r+0x7b0>
   44434:	3804d33a 	srli	r2,r7,12
   44438:	11401bc4 	addi	r5,r2,111
   4443c:	10c01b84 	addi	r3,r2,110
   44440:	294b883a 	add	r5,r5,r5
   44444:	003f7b06 	br	44234 <__alt_data_end+0xfffd34f4>
   44448:	9c000217 	ldw	r16,8(r19)
   4444c:	00bfff04 	movi	r2,-4
   44450:	80c00117 	ldw	r3,4(r16)
   44454:	1886703a 	and	r3,r3,r2
   44458:	003f5306 	br	441a8 <__alt_data_end+0xfffd3468>
   4445c:	3083ffcc 	andi	r2,r6,4095
   44460:	103f181e 	bne	r2,zero,440c4 <__alt_data_end+0xfffd3384>
   44464:	99000217 	ldw	r4,8(r19)
   44468:	b545883a 	add	r2,r22,r21
   4446c:	10800054 	ori	r2,r2,1
   44470:	20800115 	stw	r2,4(r4)
   44474:	003f3e06 	br	44170 <__alt_data_end+0xfffd3430>
   44478:	01003f84 	movi	r4,254
   4447c:	02001fc4 	movi	r8,127
   44480:	01c01f84 	movi	r7,126
   44484:	003e4006 	br	43d88 <__alt_data_end+0xfffd3048>
   44488:	00800174 	movhi	r2,5
   4448c:	10a34c04 	addi	r2,r2,-29392
   44490:	15000015 	stw	r20,0(r2)
   44494:	003f1106 	br	440dc <__alt_data_end+0xfffd339c>
   44498:	00800044 	movi	r2,1
   4449c:	002b883a 	mov	r21,zero
   444a0:	003f1f06 	br	44120 <__alt_data_end+0xfffd33e0>
   444a4:	81400204 	addi	r5,r16,8
   444a8:	9009883a 	mov	r4,r18
   444ac:	0045d980 	call	45d98 <_free_r>
   444b0:	00800174 	movhi	r2,5
   444b4:	10aa0404 	addi	r2,r2,-22512
   444b8:	10c00017 	ldw	r3,0(r2)
   444bc:	003f2c06 	br	44170 <__alt_data_end+0xfffd3430>
   444c0:	00c05504 	movi	r3,340
   444c4:	18800536 	bltu	r3,r2,444dc <_malloc_r+0x7cc>
   444c8:	3804d3fa 	srli	r2,r7,15
   444cc:	11401e04 	addi	r5,r2,120
   444d0:	10c01dc4 	addi	r3,r2,119
   444d4:	294b883a 	add	r5,r5,r5
   444d8:	003f5606 	br	44234 <__alt_data_end+0xfffd34f4>
   444dc:	00c15504 	movi	r3,1364
   444e0:	18800536 	bltu	r3,r2,444f8 <_malloc_r+0x7e8>
   444e4:	3804d4ba 	srli	r2,r7,18
   444e8:	11401f44 	addi	r5,r2,125
   444ec:	10c01f04 	addi	r3,r2,124
   444f0:	294b883a 	add	r5,r5,r5
   444f4:	003f4f06 	br	44234 <__alt_data_end+0xfffd34f4>
   444f8:	01403f84 	movi	r5,254
   444fc:	00c01f84 	movi	r3,126
   44500:	003f4c06 	br	44234 <__alt_data_end+0xfffd34f4>
   44504:	98800117 	ldw	r2,4(r19)
   44508:	003fa006 	br	4438c <__alt_data_end+0xfffd364c>
   4450c:	8808d0fa 	srli	r4,r17,3
   44510:	20800044 	addi	r2,r4,1
   44514:	1085883a 	add	r2,r2,r2
   44518:	003e9006 	br	43f5c <__alt_data_end+0xfffd321c>

0004451c <memchr>:
   4451c:	208000cc 	andi	r2,r4,3
   44520:	280f883a 	mov	r7,r5
   44524:	10003426 	beq	r2,zero,445f8 <memchr+0xdc>
   44528:	30bfffc4 	addi	r2,r6,-1
   4452c:	30001a26 	beq	r6,zero,44598 <memchr+0x7c>
   44530:	20c00003 	ldbu	r3,0(r4)
   44534:	29803fcc 	andi	r6,r5,255
   44538:	30c0051e 	bne	r6,r3,44550 <memchr+0x34>
   4453c:	00001806 	br	445a0 <memchr+0x84>
   44540:	10001526 	beq	r2,zero,44598 <memchr+0x7c>
   44544:	20c00003 	ldbu	r3,0(r4)
   44548:	10bfffc4 	addi	r2,r2,-1
   4454c:	30c01426 	beq	r6,r3,445a0 <memchr+0x84>
   44550:	21000044 	addi	r4,r4,1
   44554:	20c000cc 	andi	r3,r4,3
   44558:	183ff91e 	bne	r3,zero,44540 <__alt_data_end+0xfffd3800>
   4455c:	020000c4 	movi	r8,3
   44560:	40801136 	bltu	r8,r2,445a8 <memchr+0x8c>
   44564:	10000c26 	beq	r2,zero,44598 <memchr+0x7c>
   44568:	20c00003 	ldbu	r3,0(r4)
   4456c:	29403fcc 	andi	r5,r5,255
   44570:	28c00b26 	beq	r5,r3,445a0 <memchr+0x84>
   44574:	20c00044 	addi	r3,r4,1
   44578:	39803fcc 	andi	r6,r7,255
   4457c:	2089883a 	add	r4,r4,r2
   44580:	00000306 	br	44590 <memchr+0x74>
   44584:	18c00044 	addi	r3,r3,1
   44588:	197fffc3 	ldbu	r5,-1(r3)
   4458c:	31400526 	beq	r6,r5,445a4 <memchr+0x88>
   44590:	1805883a 	mov	r2,r3
   44594:	20fffb1e 	bne	r4,r3,44584 <__alt_data_end+0xfffd3844>
   44598:	0005883a 	mov	r2,zero
   4459c:	f800283a 	ret
   445a0:	2005883a 	mov	r2,r4
   445a4:	f800283a 	ret
   445a8:	28c03fcc 	andi	r3,r5,255
   445ac:	1812923a 	slli	r9,r3,8
   445b0:	02ffbff4 	movhi	r11,65279
   445b4:	02a02074 	movhi	r10,32897
   445b8:	48d2b03a 	or	r9,r9,r3
   445bc:	4806943a 	slli	r3,r9,16
   445c0:	5affbfc4 	addi	r11,r11,-257
   445c4:	52a02004 	addi	r10,r10,-32640
   445c8:	48d2b03a 	or	r9,r9,r3
   445cc:	20c00017 	ldw	r3,0(r4)
   445d0:	48c6f03a 	xor	r3,r9,r3
   445d4:	1acd883a 	add	r6,r3,r11
   445d8:	00c6303a 	nor	r3,zero,r3
   445dc:	30c6703a 	and	r3,r6,r3
   445e0:	1a86703a 	and	r3,r3,r10
   445e4:	183fe01e 	bne	r3,zero,44568 <__alt_data_end+0xfffd3828>
   445e8:	10bfff04 	addi	r2,r2,-4
   445ec:	21000104 	addi	r4,r4,4
   445f0:	40bff636 	bltu	r8,r2,445cc <__alt_data_end+0xfffd388c>
   445f4:	003fdb06 	br	44564 <__alt_data_end+0xfffd3824>
   445f8:	3005883a 	mov	r2,r6
   445fc:	003fd706 	br	4455c <__alt_data_end+0xfffd381c>

00044600 <memcmp>:
   44600:	01c000c4 	movi	r7,3
   44604:	3980192e 	bgeu	r7,r6,4466c <memcmp+0x6c>
   44608:	2144b03a 	or	r2,r4,r5
   4460c:	11c4703a 	and	r2,r2,r7
   44610:	10000f26 	beq	r2,zero,44650 <memcmp+0x50>
   44614:	20800003 	ldbu	r2,0(r4)
   44618:	28c00003 	ldbu	r3,0(r5)
   4461c:	10c0151e 	bne	r2,r3,44674 <memcmp+0x74>
   44620:	31bfff84 	addi	r6,r6,-2
   44624:	01ffffc4 	movi	r7,-1
   44628:	00000406 	br	4463c <memcmp+0x3c>
   4462c:	20800003 	ldbu	r2,0(r4)
   44630:	28c00003 	ldbu	r3,0(r5)
   44634:	31bfffc4 	addi	r6,r6,-1
   44638:	10c00e1e 	bne	r2,r3,44674 <memcmp+0x74>
   4463c:	21000044 	addi	r4,r4,1
   44640:	29400044 	addi	r5,r5,1
   44644:	31fff91e 	bne	r6,r7,4462c <__alt_data_end+0xfffd38ec>
   44648:	0005883a 	mov	r2,zero
   4464c:	f800283a 	ret
   44650:	20c00017 	ldw	r3,0(r4)
   44654:	28800017 	ldw	r2,0(r5)
   44658:	18bfee1e 	bne	r3,r2,44614 <__alt_data_end+0xfffd38d4>
   4465c:	31bfff04 	addi	r6,r6,-4
   44660:	21000104 	addi	r4,r4,4
   44664:	29400104 	addi	r5,r5,4
   44668:	39bff936 	bltu	r7,r6,44650 <__alt_data_end+0xfffd3910>
   4466c:	303fe91e 	bne	r6,zero,44614 <__alt_data_end+0xfffd38d4>
   44670:	003ff506 	br	44648 <__alt_data_end+0xfffd3908>
   44674:	10c5c83a 	sub	r2,r2,r3
   44678:	f800283a 	ret

0004467c <memcpy>:
   4467c:	defffd04 	addi	sp,sp,-12
   44680:	dfc00215 	stw	ra,8(sp)
   44684:	dc400115 	stw	r17,4(sp)
   44688:	dc000015 	stw	r16,0(sp)
   4468c:	00c003c4 	movi	r3,15
   44690:	2005883a 	mov	r2,r4
   44694:	1980452e 	bgeu	r3,r6,447ac <memcpy+0x130>
   44698:	2906b03a 	or	r3,r5,r4
   4469c:	18c000cc 	andi	r3,r3,3
   446a0:	1800441e 	bne	r3,zero,447b4 <memcpy+0x138>
   446a4:	347ffc04 	addi	r17,r6,-16
   446a8:	8822d13a 	srli	r17,r17,4
   446ac:	28c00104 	addi	r3,r5,4
   446b0:	23400104 	addi	r13,r4,4
   446b4:	8820913a 	slli	r16,r17,4
   446b8:	2b000204 	addi	r12,r5,8
   446bc:	22c00204 	addi	r11,r4,8
   446c0:	84000504 	addi	r16,r16,20
   446c4:	2a800304 	addi	r10,r5,12
   446c8:	22400304 	addi	r9,r4,12
   446cc:	2c21883a 	add	r16,r5,r16
   446d0:	2811883a 	mov	r8,r5
   446d4:	200f883a 	mov	r7,r4
   446d8:	41000017 	ldw	r4,0(r8)
   446dc:	1fc00017 	ldw	ra,0(r3)
   446e0:	63c00017 	ldw	r15,0(r12)
   446e4:	39000015 	stw	r4,0(r7)
   446e8:	53800017 	ldw	r14,0(r10)
   446ec:	6fc00015 	stw	ra,0(r13)
   446f0:	5bc00015 	stw	r15,0(r11)
   446f4:	4b800015 	stw	r14,0(r9)
   446f8:	18c00404 	addi	r3,r3,16
   446fc:	39c00404 	addi	r7,r7,16
   44700:	42000404 	addi	r8,r8,16
   44704:	6b400404 	addi	r13,r13,16
   44708:	63000404 	addi	r12,r12,16
   4470c:	5ac00404 	addi	r11,r11,16
   44710:	52800404 	addi	r10,r10,16
   44714:	4a400404 	addi	r9,r9,16
   44718:	1c3fef1e 	bne	r3,r16,446d8 <__alt_data_end+0xfffd3998>
   4471c:	89c00044 	addi	r7,r17,1
   44720:	380e913a 	slli	r7,r7,4
   44724:	310003cc 	andi	r4,r6,15
   44728:	02c000c4 	movi	r11,3
   4472c:	11c7883a 	add	r3,r2,r7
   44730:	29cb883a 	add	r5,r5,r7
   44734:	5900212e 	bgeu	r11,r4,447bc <memcpy+0x140>
   44738:	1813883a 	mov	r9,r3
   4473c:	2811883a 	mov	r8,r5
   44740:	200f883a 	mov	r7,r4
   44744:	42800017 	ldw	r10,0(r8)
   44748:	4a400104 	addi	r9,r9,4
   4474c:	39ffff04 	addi	r7,r7,-4
   44750:	4abfff15 	stw	r10,-4(r9)
   44754:	42000104 	addi	r8,r8,4
   44758:	59fffa36 	bltu	r11,r7,44744 <__alt_data_end+0xfffd3a04>
   4475c:	213fff04 	addi	r4,r4,-4
   44760:	2008d0ba 	srli	r4,r4,2
   44764:	318000cc 	andi	r6,r6,3
   44768:	21000044 	addi	r4,r4,1
   4476c:	2109883a 	add	r4,r4,r4
   44770:	2109883a 	add	r4,r4,r4
   44774:	1907883a 	add	r3,r3,r4
   44778:	290b883a 	add	r5,r5,r4
   4477c:	30000626 	beq	r6,zero,44798 <memcpy+0x11c>
   44780:	198d883a 	add	r6,r3,r6
   44784:	29c00003 	ldbu	r7,0(r5)
   44788:	18c00044 	addi	r3,r3,1
   4478c:	29400044 	addi	r5,r5,1
   44790:	19ffffc5 	stb	r7,-1(r3)
   44794:	19bffb1e 	bne	r3,r6,44784 <__alt_data_end+0xfffd3a44>
   44798:	dfc00217 	ldw	ra,8(sp)
   4479c:	dc400117 	ldw	r17,4(sp)
   447a0:	dc000017 	ldw	r16,0(sp)
   447a4:	dec00304 	addi	sp,sp,12
   447a8:	f800283a 	ret
   447ac:	2007883a 	mov	r3,r4
   447b0:	003ff206 	br	4477c <__alt_data_end+0xfffd3a3c>
   447b4:	2007883a 	mov	r3,r4
   447b8:	003ff106 	br	44780 <__alt_data_end+0xfffd3a40>
   447bc:	200d883a 	mov	r6,r4
   447c0:	003fee06 	br	4477c <__alt_data_end+0xfffd3a3c>

000447c4 <memmove>:
   447c4:	2005883a 	mov	r2,r4
   447c8:	29000b2e 	bgeu	r5,r4,447f8 <memmove+0x34>
   447cc:	298f883a 	add	r7,r5,r6
   447d0:	21c0092e 	bgeu	r4,r7,447f8 <memmove+0x34>
   447d4:	2187883a 	add	r3,r4,r6
   447d8:	198bc83a 	sub	r5,r3,r6
   447dc:	30004826 	beq	r6,zero,44900 <memmove+0x13c>
   447e0:	39ffffc4 	addi	r7,r7,-1
   447e4:	39000003 	ldbu	r4,0(r7)
   447e8:	18ffffc4 	addi	r3,r3,-1
   447ec:	19000005 	stb	r4,0(r3)
   447f0:	28fffb1e 	bne	r5,r3,447e0 <__alt_data_end+0xfffd3aa0>
   447f4:	f800283a 	ret
   447f8:	00c003c4 	movi	r3,15
   447fc:	1980412e 	bgeu	r3,r6,44904 <memmove+0x140>
   44800:	2886b03a 	or	r3,r5,r2
   44804:	18c000cc 	andi	r3,r3,3
   44808:	1800401e 	bne	r3,zero,4490c <memmove+0x148>
   4480c:	33fffc04 	addi	r15,r6,-16
   44810:	781ed13a 	srli	r15,r15,4
   44814:	28c00104 	addi	r3,r5,4
   44818:	13400104 	addi	r13,r2,4
   4481c:	781c913a 	slli	r14,r15,4
   44820:	2b000204 	addi	r12,r5,8
   44824:	12c00204 	addi	r11,r2,8
   44828:	73800504 	addi	r14,r14,20
   4482c:	2a800304 	addi	r10,r5,12
   44830:	12400304 	addi	r9,r2,12
   44834:	2b9d883a 	add	r14,r5,r14
   44838:	2811883a 	mov	r8,r5
   4483c:	100f883a 	mov	r7,r2
   44840:	41000017 	ldw	r4,0(r8)
   44844:	39c00404 	addi	r7,r7,16
   44848:	18c00404 	addi	r3,r3,16
   4484c:	393ffc15 	stw	r4,-16(r7)
   44850:	193ffc17 	ldw	r4,-16(r3)
   44854:	6b400404 	addi	r13,r13,16
   44858:	5ac00404 	addi	r11,r11,16
   4485c:	693ffc15 	stw	r4,-16(r13)
   44860:	61000017 	ldw	r4,0(r12)
   44864:	4a400404 	addi	r9,r9,16
   44868:	42000404 	addi	r8,r8,16
   4486c:	593ffc15 	stw	r4,-16(r11)
   44870:	51000017 	ldw	r4,0(r10)
   44874:	63000404 	addi	r12,r12,16
   44878:	52800404 	addi	r10,r10,16
   4487c:	493ffc15 	stw	r4,-16(r9)
   44880:	1bbfef1e 	bne	r3,r14,44840 <__alt_data_end+0xfffd3b00>
   44884:	79000044 	addi	r4,r15,1
   44888:	2008913a 	slli	r4,r4,4
   4488c:	328003cc 	andi	r10,r6,15
   44890:	02c000c4 	movi	r11,3
   44894:	1107883a 	add	r3,r2,r4
   44898:	290b883a 	add	r5,r5,r4
   4489c:	5a801e2e 	bgeu	r11,r10,44918 <memmove+0x154>
   448a0:	1813883a 	mov	r9,r3
   448a4:	2811883a 	mov	r8,r5
   448a8:	500f883a 	mov	r7,r10
   448ac:	41000017 	ldw	r4,0(r8)
   448b0:	4a400104 	addi	r9,r9,4
   448b4:	39ffff04 	addi	r7,r7,-4
   448b8:	493fff15 	stw	r4,-4(r9)
   448bc:	42000104 	addi	r8,r8,4
   448c0:	59fffa36 	bltu	r11,r7,448ac <__alt_data_end+0xfffd3b6c>
   448c4:	513fff04 	addi	r4,r10,-4
   448c8:	2008d0ba 	srli	r4,r4,2
   448cc:	318000cc 	andi	r6,r6,3
   448d0:	21000044 	addi	r4,r4,1
   448d4:	2109883a 	add	r4,r4,r4
   448d8:	2109883a 	add	r4,r4,r4
   448dc:	1907883a 	add	r3,r3,r4
   448e0:	290b883a 	add	r5,r5,r4
   448e4:	30000b26 	beq	r6,zero,44914 <memmove+0x150>
   448e8:	198d883a 	add	r6,r3,r6
   448ec:	29c00003 	ldbu	r7,0(r5)
   448f0:	18c00044 	addi	r3,r3,1
   448f4:	29400044 	addi	r5,r5,1
   448f8:	19ffffc5 	stb	r7,-1(r3)
   448fc:	19bffb1e 	bne	r3,r6,448ec <__alt_data_end+0xfffd3bac>
   44900:	f800283a 	ret
   44904:	1007883a 	mov	r3,r2
   44908:	003ff606 	br	448e4 <__alt_data_end+0xfffd3ba4>
   4490c:	1007883a 	mov	r3,r2
   44910:	003ff506 	br	448e8 <__alt_data_end+0xfffd3ba8>
   44914:	f800283a 	ret
   44918:	500d883a 	mov	r6,r10
   4491c:	003ff106 	br	448e4 <__alt_data_end+0xfffd3ba4>

00044920 <_putc_r>:
   44920:	defffc04 	addi	sp,sp,-16
   44924:	dc000215 	stw	r16,8(sp)
   44928:	dfc00315 	stw	ra,12(sp)
   4492c:	2021883a 	mov	r16,r4
   44930:	20000226 	beq	r4,zero,4493c <_putc_r+0x1c>
   44934:	20800e17 	ldw	r2,56(r4)
   44938:	10001b26 	beq	r2,zero,449a8 <_putc_r+0x88>
   4493c:	30800217 	ldw	r2,8(r6)
   44940:	10bfffc4 	addi	r2,r2,-1
   44944:	30800215 	stw	r2,8(r6)
   44948:	10000a16 	blt	r2,zero,44974 <_putc_r+0x54>
   4494c:	30800017 	ldw	r2,0(r6)
   44950:	11400005 	stb	r5,0(r2)
   44954:	30800017 	ldw	r2,0(r6)
   44958:	10c00044 	addi	r3,r2,1
   4495c:	30c00015 	stw	r3,0(r6)
   44960:	10800003 	ldbu	r2,0(r2)
   44964:	dfc00317 	ldw	ra,12(sp)
   44968:	dc000217 	ldw	r16,8(sp)
   4496c:	dec00404 	addi	sp,sp,16
   44970:	f800283a 	ret
   44974:	30c00617 	ldw	r3,24(r6)
   44978:	10c00616 	blt	r2,r3,44994 <_putc_r+0x74>
   4497c:	30800017 	ldw	r2,0(r6)
   44980:	00c00284 	movi	r3,10
   44984:	11400005 	stb	r5,0(r2)
   44988:	30800017 	ldw	r2,0(r6)
   4498c:	11400003 	ldbu	r5,0(r2)
   44990:	28fff11e 	bne	r5,r3,44958 <__alt_data_end+0xfffd3c18>
   44994:	8009883a 	mov	r4,r16
   44998:	dfc00317 	ldw	ra,12(sp)
   4499c:	dc000217 	ldw	r16,8(sp)
   449a0:	dec00404 	addi	sp,sp,16
   449a4:	00450d81 	jmpi	450d8 <__swbuf_r>
   449a8:	d9400015 	stw	r5,0(sp)
   449ac:	d9800115 	stw	r6,4(sp)
   449b0:	0045c240 	call	45c24 <__sinit>
   449b4:	d9800117 	ldw	r6,4(sp)
   449b8:	d9400017 	ldw	r5,0(sp)
   449bc:	003fdf06 	br	4493c <__alt_data_end+0xfffd3bfc>

000449c0 <putc>:
   449c0:	00800174 	movhi	r2,5
   449c4:	defffc04 	addi	sp,sp,-16
   449c8:	10a34b04 	addi	r2,r2,-29396
   449cc:	dc000115 	stw	r16,4(sp)
   449d0:	14000017 	ldw	r16,0(r2)
   449d4:	dc400215 	stw	r17,8(sp)
   449d8:	dfc00315 	stw	ra,12(sp)
   449dc:	2023883a 	mov	r17,r4
   449e0:	80000226 	beq	r16,zero,449ec <putc+0x2c>
   449e4:	80800e17 	ldw	r2,56(r16)
   449e8:	10001a26 	beq	r2,zero,44a54 <putc+0x94>
   449ec:	28800217 	ldw	r2,8(r5)
   449f0:	10bfffc4 	addi	r2,r2,-1
   449f4:	28800215 	stw	r2,8(r5)
   449f8:	10000b16 	blt	r2,zero,44a28 <putc+0x68>
   449fc:	28800017 	ldw	r2,0(r5)
   44a00:	14400005 	stb	r17,0(r2)
   44a04:	28800017 	ldw	r2,0(r5)
   44a08:	10c00044 	addi	r3,r2,1
   44a0c:	28c00015 	stw	r3,0(r5)
   44a10:	10800003 	ldbu	r2,0(r2)
   44a14:	dfc00317 	ldw	ra,12(sp)
   44a18:	dc400217 	ldw	r17,8(sp)
   44a1c:	dc000117 	ldw	r16,4(sp)
   44a20:	dec00404 	addi	sp,sp,16
   44a24:	f800283a 	ret
   44a28:	28c00617 	ldw	r3,24(r5)
   44a2c:	10c00e16 	blt	r2,r3,44a68 <putc+0xa8>
   44a30:	28800017 	ldw	r2,0(r5)
   44a34:	01000284 	movi	r4,10
   44a38:	14400005 	stb	r17,0(r2)
   44a3c:	28800017 	ldw	r2,0(r5)
   44a40:	10c00003 	ldbu	r3,0(r2)
   44a44:	193ff01e 	bne	r3,r4,44a08 <__alt_data_end+0xfffd3cc8>
   44a48:	280d883a 	mov	r6,r5
   44a4c:	180b883a 	mov	r5,r3
   44a50:	00000706 	br	44a70 <putc+0xb0>
   44a54:	8009883a 	mov	r4,r16
   44a58:	d9400015 	stw	r5,0(sp)
   44a5c:	0045c240 	call	45c24 <__sinit>
   44a60:	d9400017 	ldw	r5,0(sp)
   44a64:	003fe106 	br	449ec <__alt_data_end+0xfffd3cac>
   44a68:	280d883a 	mov	r6,r5
   44a6c:	880b883a 	mov	r5,r17
   44a70:	8009883a 	mov	r4,r16
   44a74:	dfc00317 	ldw	ra,12(sp)
   44a78:	dc400217 	ldw	r17,8(sp)
   44a7c:	dc000117 	ldw	r16,4(sp)
   44a80:	dec00404 	addi	sp,sp,16
   44a84:	00450d81 	jmpi	450d8 <__swbuf_r>

00044a88 <_realloc_r>:
   44a88:	defff604 	addi	sp,sp,-40
   44a8c:	dc400115 	stw	r17,4(sp)
   44a90:	dfc00915 	stw	ra,36(sp)
   44a94:	df000815 	stw	fp,32(sp)
   44a98:	ddc00715 	stw	r23,28(sp)
   44a9c:	dd800615 	stw	r22,24(sp)
   44aa0:	dd400515 	stw	r21,20(sp)
   44aa4:	dd000415 	stw	r20,16(sp)
   44aa8:	dcc00315 	stw	r19,12(sp)
   44aac:	dc800215 	stw	r18,8(sp)
   44ab0:	dc000015 	stw	r16,0(sp)
   44ab4:	3023883a 	mov	r17,r6
   44ab8:	2800b626 	beq	r5,zero,44d94 <_realloc_r+0x30c>
   44abc:	2829883a 	mov	r20,r5
   44ac0:	2025883a 	mov	r18,r4
   44ac4:	0046eb80 	call	46eb8 <__malloc_lock>
   44ac8:	a0ffff17 	ldw	r3,-4(r20)
   44acc:	043fff04 	movi	r16,-4
   44ad0:	888002c4 	addi	r2,r17,11
   44ad4:	01000584 	movi	r4,22
   44ad8:	a57ffe04 	addi	r21,r20,-8
   44adc:	1c20703a 	and	r16,r3,r16
   44ae0:	2080332e 	bgeu	r4,r2,44bb0 <_realloc_r+0x128>
   44ae4:	05bffe04 	movi	r22,-8
   44ae8:	15ac703a 	and	r22,r2,r22
   44aec:	b005883a 	mov	r2,r22
   44af0:	b0005716 	blt	r22,zero,44c50 <_realloc_r+0x1c8>
   44af4:	b4405636 	bltu	r22,r17,44c50 <_realloc_r+0x1c8>
   44af8:	8080300e 	bge	r16,r2,44bbc <_realloc_r+0x134>
   44afc:	07000174 	movhi	fp,5
   44b00:	e7223f04 	addi	fp,fp,-30468
   44b04:	e2000217 	ldw	r8,8(fp)
   44b08:	ac09883a 	add	r4,r21,r16
   44b0c:	22006126 	beq	r4,r8,44c94 <_realloc_r+0x20c>
   44b10:	22400117 	ldw	r9,4(r4)
   44b14:	01ffff84 	movi	r7,-2
   44b18:	49ce703a 	and	r7,r9,r7
   44b1c:	21cf883a 	add	r7,r4,r7
   44b20:	39800117 	ldw	r6,4(r7)
   44b24:	3180004c 	andi	r6,r6,1
   44b28:	30003e26 	beq	r6,zero,44c24 <_realloc_r+0x19c>
   44b2c:	18c0004c 	andi	r3,r3,1
   44b30:	18008126 	beq	r3,zero,44d38 <_realloc_r+0x2b0>
   44b34:	880b883a 	mov	r5,r17
   44b38:	9009883a 	mov	r4,r18
   44b3c:	0043d100 	call	43d10 <_malloc_r>
   44b40:	1023883a 	mov	r17,r2
   44b44:	10011e26 	beq	r2,zero,44fc0 <_realloc_r+0x538>
   44b48:	a0ffff17 	ldw	r3,-4(r20)
   44b4c:	113ffe04 	addi	r4,r2,-8
   44b50:	00bfff84 	movi	r2,-2
   44b54:	1884703a 	and	r2,r3,r2
   44b58:	a885883a 	add	r2,r21,r2
   44b5c:	2080ee26 	beq	r4,r2,44f18 <_realloc_r+0x490>
   44b60:	81bfff04 	addi	r6,r16,-4
   44b64:	00800904 	movi	r2,36
   44b68:	1180b836 	bltu	r2,r6,44e4c <_realloc_r+0x3c4>
   44b6c:	00c004c4 	movi	r3,19
   44b70:	19809536 	bltu	r3,r6,44dc8 <_realloc_r+0x340>
   44b74:	8805883a 	mov	r2,r17
   44b78:	a007883a 	mov	r3,r20
   44b7c:	19000017 	ldw	r4,0(r3)
   44b80:	11000015 	stw	r4,0(r2)
   44b84:	19000117 	ldw	r4,4(r3)
   44b88:	11000115 	stw	r4,4(r2)
   44b8c:	18c00217 	ldw	r3,8(r3)
   44b90:	10c00215 	stw	r3,8(r2)
   44b94:	a00b883a 	mov	r5,r20
   44b98:	9009883a 	mov	r4,r18
   44b9c:	0045d980 	call	45d98 <_free_r>
   44ba0:	9009883a 	mov	r4,r18
   44ba4:	0046edc0 	call	46edc <__malloc_unlock>
   44ba8:	8805883a 	mov	r2,r17
   44bac:	00001106 	br	44bf4 <_realloc_r+0x16c>
   44bb0:	00800404 	movi	r2,16
   44bb4:	102d883a 	mov	r22,r2
   44bb8:	003fce06 	br	44af4 <__alt_data_end+0xfffd3db4>
   44bbc:	a023883a 	mov	r17,r20
   44bc0:	858fc83a 	sub	r7,r16,r22
   44bc4:	008003c4 	movi	r2,15
   44bc8:	18c0004c 	andi	r3,r3,1
   44bcc:	11c02436 	bltu	r2,r7,44c60 <_realloc_r+0x1d8>
   44bd0:	1c06b03a 	or	r3,r3,r16
   44bd4:	a8c00115 	stw	r3,4(r21)
   44bd8:	ac21883a 	add	r16,r21,r16
   44bdc:	80800117 	ldw	r2,4(r16)
   44be0:	10800054 	ori	r2,r2,1
   44be4:	80800115 	stw	r2,4(r16)
   44be8:	9009883a 	mov	r4,r18
   44bec:	0046edc0 	call	46edc <__malloc_unlock>
   44bf0:	8805883a 	mov	r2,r17
   44bf4:	dfc00917 	ldw	ra,36(sp)
   44bf8:	df000817 	ldw	fp,32(sp)
   44bfc:	ddc00717 	ldw	r23,28(sp)
   44c00:	dd800617 	ldw	r22,24(sp)
   44c04:	dd400517 	ldw	r21,20(sp)
   44c08:	dd000417 	ldw	r20,16(sp)
   44c0c:	dcc00317 	ldw	r19,12(sp)
   44c10:	dc800217 	ldw	r18,8(sp)
   44c14:	dc400117 	ldw	r17,4(sp)
   44c18:	dc000017 	ldw	r16,0(sp)
   44c1c:	dec00a04 	addi	sp,sp,40
   44c20:	f800283a 	ret
   44c24:	017fff04 	movi	r5,-4
   44c28:	494a703a 	and	r5,r9,r5
   44c2c:	814d883a 	add	r6,r16,r5
   44c30:	30801e16 	blt	r6,r2,44cac <_realloc_r+0x224>
   44c34:	20800317 	ldw	r2,12(r4)
   44c38:	21000217 	ldw	r4,8(r4)
   44c3c:	a023883a 	mov	r17,r20
   44c40:	3021883a 	mov	r16,r6
   44c44:	20800315 	stw	r2,12(r4)
   44c48:	11000215 	stw	r4,8(r2)
   44c4c:	003fdc06 	br	44bc0 <__alt_data_end+0xfffd3e80>
   44c50:	00800304 	movi	r2,12
   44c54:	90800015 	stw	r2,0(r18)
   44c58:	0005883a 	mov	r2,zero
   44c5c:	003fe506 	br	44bf4 <__alt_data_end+0xfffd3eb4>
   44c60:	1d86b03a 	or	r3,r3,r22
   44c64:	a8c00115 	stw	r3,4(r21)
   44c68:	ad8b883a 	add	r5,r21,r22
   44c6c:	38c00054 	ori	r3,r7,1
   44c70:	28c00115 	stw	r3,4(r5)
   44c74:	29cf883a 	add	r7,r5,r7
   44c78:	38c00117 	ldw	r3,4(r7)
   44c7c:	29400204 	addi	r5,r5,8
   44c80:	9009883a 	mov	r4,r18
   44c84:	18800054 	ori	r2,r3,1
   44c88:	38800115 	stw	r2,4(r7)
   44c8c:	0045d980 	call	45d98 <_free_r>
   44c90:	003fd506 	br	44be8 <__alt_data_end+0xfffd3ea8>
   44c94:	21c00117 	ldw	r7,4(r4)
   44c98:	017fff04 	movi	r5,-4
   44c9c:	b1800404 	addi	r6,r22,16
   44ca0:	394a703a 	and	r5,r7,r5
   44ca4:	814f883a 	add	r7,r16,r5
   44ca8:	39805b0e 	bge	r7,r6,44e18 <_realloc_r+0x390>
   44cac:	18c0004c 	andi	r3,r3,1
   44cb0:	183fa01e 	bne	r3,zero,44b34 <__alt_data_end+0xfffd3df4>
   44cb4:	a4fffe17 	ldw	r19,-8(r20)
   44cb8:	00ffff04 	movi	r3,-4
   44cbc:	ace7c83a 	sub	r19,r21,r19
   44cc0:	99800117 	ldw	r6,4(r19)
   44cc4:	30c6703a 	and	r3,r6,r3
   44cc8:	20002026 	beq	r4,zero,44d4c <_realloc_r+0x2c4>
   44ccc:	80ef883a 	add	r23,r16,r3
   44cd0:	b96f883a 	add	r23,r23,r5
   44cd4:	22006126 	beq	r4,r8,44e5c <_realloc_r+0x3d4>
   44cd8:	b8801c16 	blt	r23,r2,44d4c <_realloc_r+0x2c4>
   44cdc:	20800317 	ldw	r2,12(r4)
   44ce0:	20c00217 	ldw	r3,8(r4)
   44ce4:	81bfff04 	addi	r6,r16,-4
   44ce8:	01000904 	movi	r4,36
   44cec:	18800315 	stw	r2,12(r3)
   44cf0:	10c00215 	stw	r3,8(r2)
   44cf4:	98c00217 	ldw	r3,8(r19)
   44cf8:	98800317 	ldw	r2,12(r19)
   44cfc:	9c400204 	addi	r17,r19,8
   44d00:	18800315 	stw	r2,12(r3)
   44d04:	10c00215 	stw	r3,8(r2)
   44d08:	21801b36 	bltu	r4,r6,44d78 <_realloc_r+0x2f0>
   44d0c:	008004c4 	movi	r2,19
   44d10:	1180362e 	bgeu	r2,r6,44dec <_realloc_r+0x364>
   44d14:	a0800017 	ldw	r2,0(r20)
   44d18:	98800215 	stw	r2,8(r19)
   44d1c:	a0800117 	ldw	r2,4(r20)
   44d20:	98800315 	stw	r2,12(r19)
   44d24:	008006c4 	movi	r2,27
   44d28:	11808136 	bltu	r2,r6,44f30 <_realloc_r+0x4a8>
   44d2c:	98800404 	addi	r2,r19,16
   44d30:	a5000204 	addi	r20,r20,8
   44d34:	00002e06 	br	44df0 <_realloc_r+0x368>
   44d38:	a4fffe17 	ldw	r19,-8(r20)
   44d3c:	00ffff04 	movi	r3,-4
   44d40:	ace7c83a 	sub	r19,r21,r19
   44d44:	99000117 	ldw	r4,4(r19)
   44d48:	20c6703a 	and	r3,r4,r3
   44d4c:	983f7926 	beq	r19,zero,44b34 <__alt_data_end+0xfffd3df4>
   44d50:	80ef883a 	add	r23,r16,r3
   44d54:	b8bf7716 	blt	r23,r2,44b34 <__alt_data_end+0xfffd3df4>
   44d58:	98800317 	ldw	r2,12(r19)
   44d5c:	98c00217 	ldw	r3,8(r19)
   44d60:	81bfff04 	addi	r6,r16,-4
   44d64:	01000904 	movi	r4,36
   44d68:	18800315 	stw	r2,12(r3)
   44d6c:	10c00215 	stw	r3,8(r2)
   44d70:	9c400204 	addi	r17,r19,8
   44d74:	21bfe52e 	bgeu	r4,r6,44d0c <__alt_data_end+0xfffd3fcc>
   44d78:	a00b883a 	mov	r5,r20
   44d7c:	8809883a 	mov	r4,r17
   44d80:	00447c40 	call	447c4 <memmove>
   44d84:	98c00117 	ldw	r3,4(r19)
   44d88:	b821883a 	mov	r16,r23
   44d8c:	982b883a 	mov	r21,r19
   44d90:	003f8b06 	br	44bc0 <__alt_data_end+0xfffd3e80>
   44d94:	300b883a 	mov	r5,r6
   44d98:	dfc00917 	ldw	ra,36(sp)
   44d9c:	df000817 	ldw	fp,32(sp)
   44da0:	ddc00717 	ldw	r23,28(sp)
   44da4:	dd800617 	ldw	r22,24(sp)
   44da8:	dd400517 	ldw	r21,20(sp)
   44dac:	dd000417 	ldw	r20,16(sp)
   44db0:	dcc00317 	ldw	r19,12(sp)
   44db4:	dc800217 	ldw	r18,8(sp)
   44db8:	dc400117 	ldw	r17,4(sp)
   44dbc:	dc000017 	ldw	r16,0(sp)
   44dc0:	dec00a04 	addi	sp,sp,40
   44dc4:	0043d101 	jmpi	43d10 <_malloc_r>
   44dc8:	a0c00017 	ldw	r3,0(r20)
   44dcc:	88c00015 	stw	r3,0(r17)
   44dd0:	a0c00117 	ldw	r3,4(r20)
   44dd4:	88c00115 	stw	r3,4(r17)
   44dd8:	00c006c4 	movi	r3,27
   44ddc:	19804636 	bltu	r3,r6,44ef8 <_realloc_r+0x470>
   44de0:	88800204 	addi	r2,r17,8
   44de4:	a0c00204 	addi	r3,r20,8
   44de8:	003f6406 	br	44b7c <__alt_data_end+0xfffd3e3c>
   44dec:	8805883a 	mov	r2,r17
   44df0:	a0c00017 	ldw	r3,0(r20)
   44df4:	b821883a 	mov	r16,r23
   44df8:	982b883a 	mov	r21,r19
   44dfc:	10c00015 	stw	r3,0(r2)
   44e00:	a0c00117 	ldw	r3,4(r20)
   44e04:	10c00115 	stw	r3,4(r2)
   44e08:	a0c00217 	ldw	r3,8(r20)
   44e0c:	10c00215 	stw	r3,8(r2)
   44e10:	98c00117 	ldw	r3,4(r19)
   44e14:	003f6a06 	br	44bc0 <__alt_data_end+0xfffd3e80>
   44e18:	adab883a 	add	r21,r21,r22
   44e1c:	3d85c83a 	sub	r2,r7,r22
   44e20:	e5400215 	stw	r21,8(fp)
   44e24:	10800054 	ori	r2,r2,1
   44e28:	a8800115 	stw	r2,4(r21)
   44e2c:	a0bfff17 	ldw	r2,-4(r20)
   44e30:	9009883a 	mov	r4,r18
   44e34:	1080004c 	andi	r2,r2,1
   44e38:	1584b03a 	or	r2,r2,r22
   44e3c:	a0bfff15 	stw	r2,-4(r20)
   44e40:	0046edc0 	call	46edc <__malloc_unlock>
   44e44:	a005883a 	mov	r2,r20
   44e48:	003f6a06 	br	44bf4 <__alt_data_end+0xfffd3eb4>
   44e4c:	a00b883a 	mov	r5,r20
   44e50:	8809883a 	mov	r4,r17
   44e54:	00447c40 	call	447c4 <memmove>
   44e58:	003f4e06 	br	44b94 <__alt_data_end+0xfffd3e54>
   44e5c:	b1000404 	addi	r4,r22,16
   44e60:	b93fba16 	blt	r23,r4,44d4c <__alt_data_end+0xfffd400c>
   44e64:	98800317 	ldw	r2,12(r19)
   44e68:	98c00217 	ldw	r3,8(r19)
   44e6c:	81bfff04 	addi	r6,r16,-4
   44e70:	01000904 	movi	r4,36
   44e74:	18800315 	stw	r2,12(r3)
   44e78:	10c00215 	stw	r3,8(r2)
   44e7c:	9c400204 	addi	r17,r19,8
   44e80:	21804336 	bltu	r4,r6,44f90 <_realloc_r+0x508>
   44e84:	008004c4 	movi	r2,19
   44e88:	11803f2e 	bgeu	r2,r6,44f88 <_realloc_r+0x500>
   44e8c:	a0800017 	ldw	r2,0(r20)
   44e90:	98800215 	stw	r2,8(r19)
   44e94:	a0800117 	ldw	r2,4(r20)
   44e98:	98800315 	stw	r2,12(r19)
   44e9c:	008006c4 	movi	r2,27
   44ea0:	11803f36 	bltu	r2,r6,44fa0 <_realloc_r+0x518>
   44ea4:	98800404 	addi	r2,r19,16
   44ea8:	a5000204 	addi	r20,r20,8
   44eac:	a0c00017 	ldw	r3,0(r20)
   44eb0:	10c00015 	stw	r3,0(r2)
   44eb4:	a0c00117 	ldw	r3,4(r20)
   44eb8:	10c00115 	stw	r3,4(r2)
   44ebc:	a0c00217 	ldw	r3,8(r20)
   44ec0:	10c00215 	stw	r3,8(r2)
   44ec4:	9d87883a 	add	r3,r19,r22
   44ec8:	bd85c83a 	sub	r2,r23,r22
   44ecc:	e0c00215 	stw	r3,8(fp)
   44ed0:	10800054 	ori	r2,r2,1
   44ed4:	18800115 	stw	r2,4(r3)
   44ed8:	98800117 	ldw	r2,4(r19)
   44edc:	9009883a 	mov	r4,r18
   44ee0:	1080004c 	andi	r2,r2,1
   44ee4:	1584b03a 	or	r2,r2,r22
   44ee8:	98800115 	stw	r2,4(r19)
   44eec:	0046edc0 	call	46edc <__malloc_unlock>
   44ef0:	8805883a 	mov	r2,r17
   44ef4:	003f3f06 	br	44bf4 <__alt_data_end+0xfffd3eb4>
   44ef8:	a0c00217 	ldw	r3,8(r20)
   44efc:	88c00215 	stw	r3,8(r17)
   44f00:	a0c00317 	ldw	r3,12(r20)
   44f04:	88c00315 	stw	r3,12(r17)
   44f08:	30801126 	beq	r6,r2,44f50 <_realloc_r+0x4c8>
   44f0c:	88800404 	addi	r2,r17,16
   44f10:	a0c00404 	addi	r3,r20,16
   44f14:	003f1906 	br	44b7c <__alt_data_end+0xfffd3e3c>
   44f18:	893fff17 	ldw	r4,-4(r17)
   44f1c:	00bfff04 	movi	r2,-4
   44f20:	a023883a 	mov	r17,r20
   44f24:	2084703a 	and	r2,r4,r2
   44f28:	80a1883a 	add	r16,r16,r2
   44f2c:	003f2406 	br	44bc0 <__alt_data_end+0xfffd3e80>
   44f30:	a0800217 	ldw	r2,8(r20)
   44f34:	98800415 	stw	r2,16(r19)
   44f38:	a0800317 	ldw	r2,12(r20)
   44f3c:	98800515 	stw	r2,20(r19)
   44f40:	31000a26 	beq	r6,r4,44f6c <_realloc_r+0x4e4>
   44f44:	98800604 	addi	r2,r19,24
   44f48:	a5000404 	addi	r20,r20,16
   44f4c:	003fa806 	br	44df0 <__alt_data_end+0xfffd40b0>
   44f50:	a1000417 	ldw	r4,16(r20)
   44f54:	88800604 	addi	r2,r17,24
   44f58:	a0c00604 	addi	r3,r20,24
   44f5c:	89000415 	stw	r4,16(r17)
   44f60:	a1000517 	ldw	r4,20(r20)
   44f64:	89000515 	stw	r4,20(r17)
   44f68:	003f0406 	br	44b7c <__alt_data_end+0xfffd3e3c>
   44f6c:	a0c00417 	ldw	r3,16(r20)
   44f70:	a5000604 	addi	r20,r20,24
   44f74:	98800804 	addi	r2,r19,32
   44f78:	98c00615 	stw	r3,24(r19)
   44f7c:	a0ffff17 	ldw	r3,-4(r20)
   44f80:	98c00715 	stw	r3,28(r19)
   44f84:	003f9a06 	br	44df0 <__alt_data_end+0xfffd40b0>
   44f88:	8805883a 	mov	r2,r17
   44f8c:	003fc706 	br	44eac <__alt_data_end+0xfffd416c>
   44f90:	a00b883a 	mov	r5,r20
   44f94:	8809883a 	mov	r4,r17
   44f98:	00447c40 	call	447c4 <memmove>
   44f9c:	003fc906 	br	44ec4 <__alt_data_end+0xfffd4184>
   44fa0:	a0800217 	ldw	r2,8(r20)
   44fa4:	98800415 	stw	r2,16(r19)
   44fa8:	a0800317 	ldw	r2,12(r20)
   44fac:	98800515 	stw	r2,20(r19)
   44fb0:	31000726 	beq	r6,r4,44fd0 <_realloc_r+0x548>
   44fb4:	98800604 	addi	r2,r19,24
   44fb8:	a5000404 	addi	r20,r20,16
   44fbc:	003fbb06 	br	44eac <__alt_data_end+0xfffd416c>
   44fc0:	9009883a 	mov	r4,r18
   44fc4:	0046edc0 	call	46edc <__malloc_unlock>
   44fc8:	0005883a 	mov	r2,zero
   44fcc:	003f0906 	br	44bf4 <__alt_data_end+0xfffd3eb4>
   44fd0:	a0c00417 	ldw	r3,16(r20)
   44fd4:	a5000604 	addi	r20,r20,24
   44fd8:	98800804 	addi	r2,r19,32
   44fdc:	98c00615 	stw	r3,24(r19)
   44fe0:	a0ffff17 	ldw	r3,-4(r20)
   44fe4:	98c00715 	stw	r3,28(r19)
   44fe8:	003fb006 	br	44eac <__alt_data_end+0xfffd416c>

00044fec <_sbrk_r>:
   44fec:	defffd04 	addi	sp,sp,-12
   44ff0:	dc000015 	stw	r16,0(sp)
   44ff4:	04000174 	movhi	r16,5
   44ff8:	dc400115 	stw	r17,4(sp)
   44ffc:	842a0004 	addi	r16,r16,-22528
   45000:	2023883a 	mov	r17,r4
   45004:	2809883a 	mov	r4,r5
   45008:	dfc00215 	stw	ra,8(sp)
   4500c:	80000015 	stw	zero,0(r16)
   45010:	00470540 	call	47054 <sbrk>
   45014:	00ffffc4 	movi	r3,-1
   45018:	10c00526 	beq	r2,r3,45030 <_sbrk_r+0x44>
   4501c:	dfc00217 	ldw	ra,8(sp)
   45020:	dc400117 	ldw	r17,4(sp)
   45024:	dc000017 	ldw	r16,0(sp)
   45028:	dec00304 	addi	sp,sp,12
   4502c:	f800283a 	ret
   45030:	80c00017 	ldw	r3,0(r16)
   45034:	183ff926 	beq	r3,zero,4501c <__alt_data_end+0xfffd42dc>
   45038:	88c00015 	stw	r3,0(r17)
   4503c:	003ff706 	br	4501c <__alt_data_end+0xfffd42dc>

00045040 <strlen>:
   45040:	208000cc 	andi	r2,r4,3
   45044:	10002026 	beq	r2,zero,450c8 <strlen+0x88>
   45048:	20800007 	ldb	r2,0(r4)
   4504c:	10002026 	beq	r2,zero,450d0 <strlen+0x90>
   45050:	2005883a 	mov	r2,r4
   45054:	00000206 	br	45060 <strlen+0x20>
   45058:	10c00007 	ldb	r3,0(r2)
   4505c:	18001826 	beq	r3,zero,450c0 <strlen+0x80>
   45060:	10800044 	addi	r2,r2,1
   45064:	10c000cc 	andi	r3,r2,3
   45068:	183ffb1e 	bne	r3,zero,45058 <__alt_data_end+0xfffd4318>
   4506c:	10c00017 	ldw	r3,0(r2)
   45070:	01ffbff4 	movhi	r7,65279
   45074:	39ffbfc4 	addi	r7,r7,-257
   45078:	00ca303a 	nor	r5,zero,r3
   4507c:	01a02074 	movhi	r6,32897
   45080:	19c7883a 	add	r3,r3,r7
   45084:	31a02004 	addi	r6,r6,-32640
   45088:	1946703a 	and	r3,r3,r5
   4508c:	1986703a 	and	r3,r3,r6
   45090:	1800091e 	bne	r3,zero,450b8 <strlen+0x78>
   45094:	10800104 	addi	r2,r2,4
   45098:	10c00017 	ldw	r3,0(r2)
   4509c:	19cb883a 	add	r5,r3,r7
   450a0:	00c6303a 	nor	r3,zero,r3
   450a4:	28c6703a 	and	r3,r5,r3
   450a8:	1986703a 	and	r3,r3,r6
   450ac:	183ff926 	beq	r3,zero,45094 <__alt_data_end+0xfffd4354>
   450b0:	00000106 	br	450b8 <strlen+0x78>
   450b4:	10800044 	addi	r2,r2,1
   450b8:	10c00007 	ldb	r3,0(r2)
   450bc:	183ffd1e 	bne	r3,zero,450b4 <__alt_data_end+0xfffd4374>
   450c0:	1105c83a 	sub	r2,r2,r4
   450c4:	f800283a 	ret
   450c8:	2005883a 	mov	r2,r4
   450cc:	003fe706 	br	4506c <__alt_data_end+0xfffd432c>
   450d0:	0005883a 	mov	r2,zero
   450d4:	f800283a 	ret

000450d8 <__swbuf_r>:
   450d8:	defffb04 	addi	sp,sp,-20
   450dc:	dcc00315 	stw	r19,12(sp)
   450e0:	dc800215 	stw	r18,8(sp)
   450e4:	dc000015 	stw	r16,0(sp)
   450e8:	dfc00415 	stw	ra,16(sp)
   450ec:	dc400115 	stw	r17,4(sp)
   450f0:	2025883a 	mov	r18,r4
   450f4:	2827883a 	mov	r19,r5
   450f8:	3021883a 	mov	r16,r6
   450fc:	20000226 	beq	r4,zero,45108 <__swbuf_r+0x30>
   45100:	20800e17 	ldw	r2,56(r4)
   45104:	10004226 	beq	r2,zero,45210 <__swbuf_r+0x138>
   45108:	80800617 	ldw	r2,24(r16)
   4510c:	8100030b 	ldhu	r4,12(r16)
   45110:	80800215 	stw	r2,8(r16)
   45114:	2080020c 	andi	r2,r4,8
   45118:	10003626 	beq	r2,zero,451f4 <__swbuf_r+0x11c>
   4511c:	80c00417 	ldw	r3,16(r16)
   45120:	18003426 	beq	r3,zero,451f4 <__swbuf_r+0x11c>
   45124:	2088000c 	andi	r2,r4,8192
   45128:	9c403fcc 	andi	r17,r19,255
   4512c:	10001a26 	beq	r2,zero,45198 <__swbuf_r+0xc0>
   45130:	80800017 	ldw	r2,0(r16)
   45134:	81000517 	ldw	r4,20(r16)
   45138:	10c7c83a 	sub	r3,r2,r3
   4513c:	1900200e 	bge	r3,r4,451c0 <__swbuf_r+0xe8>
   45140:	18c00044 	addi	r3,r3,1
   45144:	81000217 	ldw	r4,8(r16)
   45148:	11400044 	addi	r5,r2,1
   4514c:	81400015 	stw	r5,0(r16)
   45150:	213fffc4 	addi	r4,r4,-1
   45154:	81000215 	stw	r4,8(r16)
   45158:	14c00005 	stb	r19,0(r2)
   4515c:	80800517 	ldw	r2,20(r16)
   45160:	10c01e26 	beq	r2,r3,451dc <__swbuf_r+0x104>
   45164:	8080030b 	ldhu	r2,12(r16)
   45168:	1080004c 	andi	r2,r2,1
   4516c:	10000226 	beq	r2,zero,45178 <__swbuf_r+0xa0>
   45170:	00800284 	movi	r2,10
   45174:	88801926 	beq	r17,r2,451dc <__swbuf_r+0x104>
   45178:	8805883a 	mov	r2,r17
   4517c:	dfc00417 	ldw	ra,16(sp)
   45180:	dcc00317 	ldw	r19,12(sp)
   45184:	dc800217 	ldw	r18,8(sp)
   45188:	dc400117 	ldw	r17,4(sp)
   4518c:	dc000017 	ldw	r16,0(sp)
   45190:	dec00504 	addi	sp,sp,20
   45194:	f800283a 	ret
   45198:	81401917 	ldw	r5,100(r16)
   4519c:	00b7ffc4 	movi	r2,-8193
   451a0:	21080014 	ori	r4,r4,8192
   451a4:	2884703a 	and	r2,r5,r2
   451a8:	80801915 	stw	r2,100(r16)
   451ac:	80800017 	ldw	r2,0(r16)
   451b0:	8100030d 	sth	r4,12(r16)
   451b4:	81000517 	ldw	r4,20(r16)
   451b8:	10c7c83a 	sub	r3,r2,r3
   451bc:	193fe016 	blt	r3,r4,45140 <__alt_data_end+0xfffd4400>
   451c0:	800b883a 	mov	r5,r16
   451c4:	9009883a 	mov	r4,r18
   451c8:	00458380 	call	45838 <_fflush_r>
   451cc:	1000071e 	bne	r2,zero,451ec <__swbuf_r+0x114>
   451d0:	80800017 	ldw	r2,0(r16)
   451d4:	00c00044 	movi	r3,1
   451d8:	003fda06 	br	45144 <__alt_data_end+0xfffd4404>
   451dc:	800b883a 	mov	r5,r16
   451e0:	9009883a 	mov	r4,r18
   451e4:	00458380 	call	45838 <_fflush_r>
   451e8:	103fe326 	beq	r2,zero,45178 <__alt_data_end+0xfffd4438>
   451ec:	00bfffc4 	movi	r2,-1
   451f0:	003fe206 	br	4517c <__alt_data_end+0xfffd443c>
   451f4:	800b883a 	mov	r5,r16
   451f8:	9009883a 	mov	r4,r18
   451fc:	00452300 	call	45230 <__swsetup_r>
   45200:	103ffa1e 	bne	r2,zero,451ec <__alt_data_end+0xfffd44ac>
   45204:	8100030b 	ldhu	r4,12(r16)
   45208:	80c00417 	ldw	r3,16(r16)
   4520c:	003fc506 	br	45124 <__alt_data_end+0xfffd43e4>
   45210:	0045c240 	call	45c24 <__sinit>
   45214:	003fbc06 	br	45108 <__alt_data_end+0xfffd43c8>

00045218 <__swbuf>:
   45218:	00800174 	movhi	r2,5
   4521c:	10a34b04 	addi	r2,r2,-29396
   45220:	280d883a 	mov	r6,r5
   45224:	200b883a 	mov	r5,r4
   45228:	11000017 	ldw	r4,0(r2)
   4522c:	00450d81 	jmpi	450d8 <__swbuf_r>

00045230 <__swsetup_r>:
   45230:	00800174 	movhi	r2,5
   45234:	defffd04 	addi	sp,sp,-12
   45238:	10a34b04 	addi	r2,r2,-29396
   4523c:	dc400115 	stw	r17,4(sp)
   45240:	2023883a 	mov	r17,r4
   45244:	11000017 	ldw	r4,0(r2)
   45248:	dc000015 	stw	r16,0(sp)
   4524c:	dfc00215 	stw	ra,8(sp)
   45250:	2821883a 	mov	r16,r5
   45254:	20000226 	beq	r4,zero,45260 <__swsetup_r+0x30>
   45258:	20800e17 	ldw	r2,56(r4)
   4525c:	10003126 	beq	r2,zero,45324 <__swsetup_r+0xf4>
   45260:	8080030b 	ldhu	r2,12(r16)
   45264:	10c0020c 	andi	r3,r2,8
   45268:	1009883a 	mov	r4,r2
   4526c:	18000f26 	beq	r3,zero,452ac <__swsetup_r+0x7c>
   45270:	80c00417 	ldw	r3,16(r16)
   45274:	18001526 	beq	r3,zero,452cc <__swsetup_r+0x9c>
   45278:	1100004c 	andi	r4,r2,1
   4527c:	20001c1e 	bne	r4,zero,452f0 <__swsetup_r+0xc0>
   45280:	1080008c 	andi	r2,r2,2
   45284:	1000291e 	bne	r2,zero,4532c <__swsetup_r+0xfc>
   45288:	80800517 	ldw	r2,20(r16)
   4528c:	80800215 	stw	r2,8(r16)
   45290:	18001c26 	beq	r3,zero,45304 <__swsetup_r+0xd4>
   45294:	0005883a 	mov	r2,zero
   45298:	dfc00217 	ldw	ra,8(sp)
   4529c:	dc400117 	ldw	r17,4(sp)
   452a0:	dc000017 	ldw	r16,0(sp)
   452a4:	dec00304 	addi	sp,sp,12
   452a8:	f800283a 	ret
   452ac:	2080040c 	andi	r2,r4,16
   452b0:	10002e26 	beq	r2,zero,4536c <__swsetup_r+0x13c>
   452b4:	2080010c 	andi	r2,r4,4
   452b8:	10001e1e 	bne	r2,zero,45334 <__swsetup_r+0x104>
   452bc:	80c00417 	ldw	r3,16(r16)
   452c0:	20800214 	ori	r2,r4,8
   452c4:	8080030d 	sth	r2,12(r16)
   452c8:	183feb1e 	bne	r3,zero,45278 <__alt_data_end+0xfffd4538>
   452cc:	1100a00c 	andi	r4,r2,640
   452d0:	01408004 	movi	r5,512
   452d4:	217fe826 	beq	r4,r5,45278 <__alt_data_end+0xfffd4538>
   452d8:	800b883a 	mov	r5,r16
   452dc:	8809883a 	mov	r4,r17
   452e0:	00462300 	call	46230 <__smakebuf_r>
   452e4:	8080030b 	ldhu	r2,12(r16)
   452e8:	80c00417 	ldw	r3,16(r16)
   452ec:	003fe206 	br	45278 <__alt_data_end+0xfffd4538>
   452f0:	80800517 	ldw	r2,20(r16)
   452f4:	80000215 	stw	zero,8(r16)
   452f8:	0085c83a 	sub	r2,zero,r2
   452fc:	80800615 	stw	r2,24(r16)
   45300:	183fe41e 	bne	r3,zero,45294 <__alt_data_end+0xfffd4554>
   45304:	80c0030b 	ldhu	r3,12(r16)
   45308:	0005883a 	mov	r2,zero
   4530c:	1900200c 	andi	r4,r3,128
   45310:	203fe126 	beq	r4,zero,45298 <__alt_data_end+0xfffd4558>
   45314:	18c01014 	ori	r3,r3,64
   45318:	80c0030d 	sth	r3,12(r16)
   4531c:	00bfffc4 	movi	r2,-1
   45320:	003fdd06 	br	45298 <__alt_data_end+0xfffd4558>
   45324:	0045c240 	call	45c24 <__sinit>
   45328:	003fcd06 	br	45260 <__alt_data_end+0xfffd4520>
   4532c:	0005883a 	mov	r2,zero
   45330:	003fd606 	br	4528c <__alt_data_end+0xfffd454c>
   45334:	81400c17 	ldw	r5,48(r16)
   45338:	28000626 	beq	r5,zero,45354 <__swsetup_r+0x124>
   4533c:	80801004 	addi	r2,r16,64
   45340:	28800326 	beq	r5,r2,45350 <__swsetup_r+0x120>
   45344:	8809883a 	mov	r4,r17
   45348:	0045d980 	call	45d98 <_free_r>
   4534c:	8100030b 	ldhu	r4,12(r16)
   45350:	80000c15 	stw	zero,48(r16)
   45354:	80c00417 	ldw	r3,16(r16)
   45358:	00bff6c4 	movi	r2,-37
   4535c:	1108703a 	and	r4,r2,r4
   45360:	80000115 	stw	zero,4(r16)
   45364:	80c00015 	stw	r3,0(r16)
   45368:	003fd506 	br	452c0 <__alt_data_end+0xfffd4580>
   4536c:	00800244 	movi	r2,9
   45370:	88800015 	stw	r2,0(r17)
   45374:	20801014 	ori	r2,r4,64
   45378:	8080030d 	sth	r2,12(r16)
   4537c:	00bfffc4 	movi	r2,-1
   45380:	003fc506 	br	45298 <__alt_data_end+0xfffd4558>

00045384 <__register_exitproc>:
   45384:	defffa04 	addi	sp,sp,-24
   45388:	dc000315 	stw	r16,12(sp)
   4538c:	04000174 	movhi	r16,5
   45390:	84234a04 	addi	r16,r16,-29400
   45394:	80c00017 	ldw	r3,0(r16)
   45398:	dc400415 	stw	r17,16(sp)
   4539c:	dfc00515 	stw	ra,20(sp)
   453a0:	18805217 	ldw	r2,328(r3)
   453a4:	2023883a 	mov	r17,r4
   453a8:	10003726 	beq	r2,zero,45488 <__register_exitproc+0x104>
   453ac:	10c00117 	ldw	r3,4(r2)
   453b0:	010007c4 	movi	r4,31
   453b4:	20c00e16 	blt	r4,r3,453f0 <__register_exitproc+0x6c>
   453b8:	1a000044 	addi	r8,r3,1
   453bc:	8800221e 	bne	r17,zero,45448 <__register_exitproc+0xc4>
   453c0:	18c00084 	addi	r3,r3,2
   453c4:	18c7883a 	add	r3,r3,r3
   453c8:	18c7883a 	add	r3,r3,r3
   453cc:	12000115 	stw	r8,4(r2)
   453d0:	10c7883a 	add	r3,r2,r3
   453d4:	19400015 	stw	r5,0(r3)
   453d8:	0005883a 	mov	r2,zero
   453dc:	dfc00517 	ldw	ra,20(sp)
   453e0:	dc400417 	ldw	r17,16(sp)
   453e4:	dc000317 	ldw	r16,12(sp)
   453e8:	dec00604 	addi	sp,sp,24
   453ec:	f800283a 	ret
   453f0:	00800034 	movhi	r2,0
   453f4:	10800004 	addi	r2,r2,0
   453f8:	10002626 	beq	r2,zero,45494 <__register_exitproc+0x110>
   453fc:	01006404 	movi	r4,400
   45400:	d9400015 	stw	r5,0(sp)
   45404:	d9800115 	stw	r6,4(sp)
   45408:	d9c00215 	stw	r7,8(sp)
   4540c:	00000000 	call	0 <__alt_mem_onchip_mem-0x40000>
   45410:	d9400017 	ldw	r5,0(sp)
   45414:	d9800117 	ldw	r6,4(sp)
   45418:	d9c00217 	ldw	r7,8(sp)
   4541c:	10001d26 	beq	r2,zero,45494 <__register_exitproc+0x110>
   45420:	81000017 	ldw	r4,0(r16)
   45424:	10000115 	stw	zero,4(r2)
   45428:	02000044 	movi	r8,1
   4542c:	22405217 	ldw	r9,328(r4)
   45430:	0007883a 	mov	r3,zero
   45434:	12400015 	stw	r9,0(r2)
   45438:	20805215 	stw	r2,328(r4)
   4543c:	10006215 	stw	zero,392(r2)
   45440:	10006315 	stw	zero,396(r2)
   45444:	883fde26 	beq	r17,zero,453c0 <__alt_data_end+0xfffd4680>
   45448:	18c9883a 	add	r4,r3,r3
   4544c:	2109883a 	add	r4,r4,r4
   45450:	1109883a 	add	r4,r2,r4
   45454:	21802215 	stw	r6,136(r4)
   45458:	01800044 	movi	r6,1
   4545c:	12406217 	ldw	r9,392(r2)
   45460:	30cc983a 	sll	r6,r6,r3
   45464:	4992b03a 	or	r9,r9,r6
   45468:	12406215 	stw	r9,392(r2)
   4546c:	21c04215 	stw	r7,264(r4)
   45470:	01000084 	movi	r4,2
   45474:	893fd21e 	bne	r17,r4,453c0 <__alt_data_end+0xfffd4680>
   45478:	11006317 	ldw	r4,396(r2)
   4547c:	218cb03a 	or	r6,r4,r6
   45480:	11806315 	stw	r6,396(r2)
   45484:	003fce06 	br	453c0 <__alt_data_end+0xfffd4680>
   45488:	18805304 	addi	r2,r3,332
   4548c:	18805215 	stw	r2,328(r3)
   45490:	003fc606 	br	453ac <__alt_data_end+0xfffd466c>
   45494:	00bfffc4 	movi	r2,-1
   45498:	003fd006 	br	453dc <__alt_data_end+0xfffd469c>

0004549c <__call_exitprocs>:
   4549c:	defff504 	addi	sp,sp,-44
   454a0:	df000915 	stw	fp,36(sp)
   454a4:	dd400615 	stw	r21,24(sp)
   454a8:	dc800315 	stw	r18,12(sp)
   454ac:	dfc00a15 	stw	ra,40(sp)
   454b0:	ddc00815 	stw	r23,32(sp)
   454b4:	dd800715 	stw	r22,28(sp)
   454b8:	dd000515 	stw	r20,20(sp)
   454bc:	dcc00415 	stw	r19,16(sp)
   454c0:	dc400215 	stw	r17,8(sp)
   454c4:	dc000115 	stw	r16,4(sp)
   454c8:	d9000015 	stw	r4,0(sp)
   454cc:	2839883a 	mov	fp,r5
   454d0:	04800044 	movi	r18,1
   454d4:	057fffc4 	movi	r21,-1
   454d8:	00800174 	movhi	r2,5
   454dc:	10a34a04 	addi	r2,r2,-29400
   454e0:	12000017 	ldw	r8,0(r2)
   454e4:	45005217 	ldw	r20,328(r8)
   454e8:	44c05204 	addi	r19,r8,328
   454ec:	a0001c26 	beq	r20,zero,45560 <__call_exitprocs+0xc4>
   454f0:	a0800117 	ldw	r2,4(r20)
   454f4:	15ffffc4 	addi	r23,r2,-1
   454f8:	b8000d16 	blt	r23,zero,45530 <__call_exitprocs+0x94>
   454fc:	14000044 	addi	r16,r2,1
   45500:	8421883a 	add	r16,r16,r16
   45504:	8421883a 	add	r16,r16,r16
   45508:	84402004 	addi	r17,r16,128
   4550c:	a463883a 	add	r17,r20,r17
   45510:	a421883a 	add	r16,r20,r16
   45514:	e0001e26 	beq	fp,zero,45590 <__call_exitprocs+0xf4>
   45518:	80804017 	ldw	r2,256(r16)
   4551c:	e0801c26 	beq	fp,r2,45590 <__call_exitprocs+0xf4>
   45520:	bdffffc4 	addi	r23,r23,-1
   45524:	843fff04 	addi	r16,r16,-4
   45528:	8c7fff04 	addi	r17,r17,-4
   4552c:	bd7ff91e 	bne	r23,r21,45514 <__alt_data_end+0xfffd47d4>
   45530:	00800034 	movhi	r2,0
   45534:	10800004 	addi	r2,r2,0
   45538:	10000926 	beq	r2,zero,45560 <__call_exitprocs+0xc4>
   4553c:	a0800117 	ldw	r2,4(r20)
   45540:	1000301e 	bne	r2,zero,45604 <__call_exitprocs+0x168>
   45544:	a0800017 	ldw	r2,0(r20)
   45548:	10003226 	beq	r2,zero,45614 <__call_exitprocs+0x178>
   4554c:	a009883a 	mov	r4,r20
   45550:	98800015 	stw	r2,0(r19)
   45554:	00000000 	call	0 <__alt_mem_onchip_mem-0x40000>
   45558:	9d000017 	ldw	r20,0(r19)
   4555c:	a03fe41e 	bne	r20,zero,454f0 <__alt_data_end+0xfffd47b0>
   45560:	dfc00a17 	ldw	ra,40(sp)
   45564:	df000917 	ldw	fp,36(sp)
   45568:	ddc00817 	ldw	r23,32(sp)
   4556c:	dd800717 	ldw	r22,28(sp)
   45570:	dd400617 	ldw	r21,24(sp)
   45574:	dd000517 	ldw	r20,20(sp)
   45578:	dcc00417 	ldw	r19,16(sp)
   4557c:	dc800317 	ldw	r18,12(sp)
   45580:	dc400217 	ldw	r17,8(sp)
   45584:	dc000117 	ldw	r16,4(sp)
   45588:	dec00b04 	addi	sp,sp,44
   4558c:	f800283a 	ret
   45590:	a0800117 	ldw	r2,4(r20)
   45594:	80c00017 	ldw	r3,0(r16)
   45598:	10bfffc4 	addi	r2,r2,-1
   4559c:	15c01426 	beq	r2,r23,455f0 <__call_exitprocs+0x154>
   455a0:	80000015 	stw	zero,0(r16)
   455a4:	183fde26 	beq	r3,zero,45520 <__alt_data_end+0xfffd47e0>
   455a8:	95c8983a 	sll	r4,r18,r23
   455ac:	a0806217 	ldw	r2,392(r20)
   455b0:	a5800117 	ldw	r22,4(r20)
   455b4:	2084703a 	and	r2,r4,r2
   455b8:	10000b26 	beq	r2,zero,455e8 <__call_exitprocs+0x14c>
   455bc:	a0806317 	ldw	r2,396(r20)
   455c0:	2088703a 	and	r4,r4,r2
   455c4:	20000c1e 	bne	r4,zero,455f8 <__call_exitprocs+0x15c>
   455c8:	89400017 	ldw	r5,0(r17)
   455cc:	d9000017 	ldw	r4,0(sp)
   455d0:	183ee83a 	callr	r3
   455d4:	a0800117 	ldw	r2,4(r20)
   455d8:	15bfbf1e 	bne	r2,r22,454d8 <__alt_data_end+0xfffd4798>
   455dc:	98800017 	ldw	r2,0(r19)
   455e0:	153fcf26 	beq	r2,r20,45520 <__alt_data_end+0xfffd47e0>
   455e4:	003fbc06 	br	454d8 <__alt_data_end+0xfffd4798>
   455e8:	183ee83a 	callr	r3
   455ec:	003ff906 	br	455d4 <__alt_data_end+0xfffd4894>
   455f0:	a5c00115 	stw	r23,4(r20)
   455f4:	003feb06 	br	455a4 <__alt_data_end+0xfffd4864>
   455f8:	89000017 	ldw	r4,0(r17)
   455fc:	183ee83a 	callr	r3
   45600:	003ff406 	br	455d4 <__alt_data_end+0xfffd4894>
   45604:	a0800017 	ldw	r2,0(r20)
   45608:	a027883a 	mov	r19,r20
   4560c:	1029883a 	mov	r20,r2
   45610:	003fb606 	br	454ec <__alt_data_end+0xfffd47ac>
   45614:	0005883a 	mov	r2,zero
   45618:	003ffb06 	br	45608 <__alt_data_end+0xfffd48c8>

0004561c <__sflush_r>:
   4561c:	2880030b 	ldhu	r2,12(r5)
   45620:	defffb04 	addi	sp,sp,-20
   45624:	dcc00315 	stw	r19,12(sp)
   45628:	dc400115 	stw	r17,4(sp)
   4562c:	dfc00415 	stw	ra,16(sp)
   45630:	dc800215 	stw	r18,8(sp)
   45634:	dc000015 	stw	r16,0(sp)
   45638:	10c0020c 	andi	r3,r2,8
   4563c:	2823883a 	mov	r17,r5
   45640:	2027883a 	mov	r19,r4
   45644:	1800311e 	bne	r3,zero,4570c <__sflush_r+0xf0>
   45648:	28c00117 	ldw	r3,4(r5)
   4564c:	10820014 	ori	r2,r2,2048
   45650:	2880030d 	sth	r2,12(r5)
   45654:	00c04b0e 	bge	zero,r3,45784 <__sflush_r+0x168>
   45658:	8a000a17 	ldw	r8,40(r17)
   4565c:	40002326 	beq	r8,zero,456ec <__sflush_r+0xd0>
   45660:	9c000017 	ldw	r16,0(r19)
   45664:	10c4000c 	andi	r3,r2,4096
   45668:	98000015 	stw	zero,0(r19)
   4566c:	18004826 	beq	r3,zero,45790 <__sflush_r+0x174>
   45670:	89801417 	ldw	r6,80(r17)
   45674:	10c0010c 	andi	r3,r2,4
   45678:	18000626 	beq	r3,zero,45694 <__sflush_r+0x78>
   4567c:	88c00117 	ldw	r3,4(r17)
   45680:	88800c17 	ldw	r2,48(r17)
   45684:	30cdc83a 	sub	r6,r6,r3
   45688:	10000226 	beq	r2,zero,45694 <__sflush_r+0x78>
   4568c:	88800f17 	ldw	r2,60(r17)
   45690:	308dc83a 	sub	r6,r6,r2
   45694:	89400717 	ldw	r5,28(r17)
   45698:	000f883a 	mov	r7,zero
   4569c:	9809883a 	mov	r4,r19
   456a0:	403ee83a 	callr	r8
   456a4:	00ffffc4 	movi	r3,-1
   456a8:	10c04426 	beq	r2,r3,457bc <__sflush_r+0x1a0>
   456ac:	88c0030b 	ldhu	r3,12(r17)
   456b0:	89000417 	ldw	r4,16(r17)
   456b4:	88000115 	stw	zero,4(r17)
   456b8:	197dffcc 	andi	r5,r3,63487
   456bc:	8940030d 	sth	r5,12(r17)
   456c0:	89000015 	stw	r4,0(r17)
   456c4:	18c4000c 	andi	r3,r3,4096
   456c8:	18002c1e 	bne	r3,zero,4577c <__sflush_r+0x160>
   456cc:	89400c17 	ldw	r5,48(r17)
   456d0:	9c000015 	stw	r16,0(r19)
   456d4:	28000526 	beq	r5,zero,456ec <__sflush_r+0xd0>
   456d8:	88801004 	addi	r2,r17,64
   456dc:	28800226 	beq	r5,r2,456e8 <__sflush_r+0xcc>
   456e0:	9809883a 	mov	r4,r19
   456e4:	0045d980 	call	45d98 <_free_r>
   456e8:	88000c15 	stw	zero,48(r17)
   456ec:	0005883a 	mov	r2,zero
   456f0:	dfc00417 	ldw	ra,16(sp)
   456f4:	dcc00317 	ldw	r19,12(sp)
   456f8:	dc800217 	ldw	r18,8(sp)
   456fc:	dc400117 	ldw	r17,4(sp)
   45700:	dc000017 	ldw	r16,0(sp)
   45704:	dec00504 	addi	sp,sp,20
   45708:	f800283a 	ret
   4570c:	2c800417 	ldw	r18,16(r5)
   45710:	903ff626 	beq	r18,zero,456ec <__alt_data_end+0xfffd49ac>
   45714:	2c000017 	ldw	r16,0(r5)
   45718:	108000cc 	andi	r2,r2,3
   4571c:	2c800015 	stw	r18,0(r5)
   45720:	84a1c83a 	sub	r16,r16,r18
   45724:	1000131e 	bne	r2,zero,45774 <__sflush_r+0x158>
   45728:	28800517 	ldw	r2,20(r5)
   4572c:	88800215 	stw	r2,8(r17)
   45730:	04000316 	blt	zero,r16,45740 <__sflush_r+0x124>
   45734:	003fed06 	br	456ec <__alt_data_end+0xfffd49ac>
   45738:	90a5883a 	add	r18,r18,r2
   4573c:	043feb0e 	bge	zero,r16,456ec <__alt_data_end+0xfffd49ac>
   45740:	88800917 	ldw	r2,36(r17)
   45744:	89400717 	ldw	r5,28(r17)
   45748:	800f883a 	mov	r7,r16
   4574c:	900d883a 	mov	r6,r18
   45750:	9809883a 	mov	r4,r19
   45754:	103ee83a 	callr	r2
   45758:	80a1c83a 	sub	r16,r16,r2
   4575c:	00bff616 	blt	zero,r2,45738 <__alt_data_end+0xfffd49f8>
   45760:	88c0030b 	ldhu	r3,12(r17)
   45764:	00bfffc4 	movi	r2,-1
   45768:	18c01014 	ori	r3,r3,64
   4576c:	88c0030d 	sth	r3,12(r17)
   45770:	003fdf06 	br	456f0 <__alt_data_end+0xfffd49b0>
   45774:	0005883a 	mov	r2,zero
   45778:	003fec06 	br	4572c <__alt_data_end+0xfffd49ec>
   4577c:	88801415 	stw	r2,80(r17)
   45780:	003fd206 	br	456cc <__alt_data_end+0xfffd498c>
   45784:	28c00f17 	ldw	r3,60(r5)
   45788:	00ffb316 	blt	zero,r3,45658 <__alt_data_end+0xfffd4918>
   4578c:	003fd706 	br	456ec <__alt_data_end+0xfffd49ac>
   45790:	89400717 	ldw	r5,28(r17)
   45794:	000d883a 	mov	r6,zero
   45798:	01c00044 	movi	r7,1
   4579c:	9809883a 	mov	r4,r19
   457a0:	403ee83a 	callr	r8
   457a4:	100d883a 	mov	r6,r2
   457a8:	00bfffc4 	movi	r2,-1
   457ac:	30801426 	beq	r6,r2,45800 <__sflush_r+0x1e4>
   457b0:	8880030b 	ldhu	r2,12(r17)
   457b4:	8a000a17 	ldw	r8,40(r17)
   457b8:	003fae06 	br	45674 <__alt_data_end+0xfffd4934>
   457bc:	98c00017 	ldw	r3,0(r19)
   457c0:	183fba26 	beq	r3,zero,456ac <__alt_data_end+0xfffd496c>
   457c4:	01000744 	movi	r4,29
   457c8:	19000626 	beq	r3,r4,457e4 <__sflush_r+0x1c8>
   457cc:	01000584 	movi	r4,22
   457d0:	19000426 	beq	r3,r4,457e4 <__sflush_r+0x1c8>
   457d4:	88c0030b 	ldhu	r3,12(r17)
   457d8:	18c01014 	ori	r3,r3,64
   457dc:	88c0030d 	sth	r3,12(r17)
   457e0:	003fc306 	br	456f0 <__alt_data_end+0xfffd49b0>
   457e4:	8880030b 	ldhu	r2,12(r17)
   457e8:	88c00417 	ldw	r3,16(r17)
   457ec:	88000115 	stw	zero,4(r17)
   457f0:	10bdffcc 	andi	r2,r2,63487
   457f4:	8880030d 	sth	r2,12(r17)
   457f8:	88c00015 	stw	r3,0(r17)
   457fc:	003fb306 	br	456cc <__alt_data_end+0xfffd498c>
   45800:	98800017 	ldw	r2,0(r19)
   45804:	103fea26 	beq	r2,zero,457b0 <__alt_data_end+0xfffd4a70>
   45808:	00c00744 	movi	r3,29
   4580c:	10c00226 	beq	r2,r3,45818 <__sflush_r+0x1fc>
   45810:	00c00584 	movi	r3,22
   45814:	10c0031e 	bne	r2,r3,45824 <__sflush_r+0x208>
   45818:	9c000015 	stw	r16,0(r19)
   4581c:	0005883a 	mov	r2,zero
   45820:	003fb306 	br	456f0 <__alt_data_end+0xfffd49b0>
   45824:	88c0030b 	ldhu	r3,12(r17)
   45828:	3005883a 	mov	r2,r6
   4582c:	18c01014 	ori	r3,r3,64
   45830:	88c0030d 	sth	r3,12(r17)
   45834:	003fae06 	br	456f0 <__alt_data_end+0xfffd49b0>

00045838 <_fflush_r>:
   45838:	defffd04 	addi	sp,sp,-12
   4583c:	dc000115 	stw	r16,4(sp)
   45840:	dfc00215 	stw	ra,8(sp)
   45844:	2021883a 	mov	r16,r4
   45848:	20000226 	beq	r4,zero,45854 <_fflush_r+0x1c>
   4584c:	20800e17 	ldw	r2,56(r4)
   45850:	10000c26 	beq	r2,zero,45884 <_fflush_r+0x4c>
   45854:	2880030f 	ldh	r2,12(r5)
   45858:	1000051e 	bne	r2,zero,45870 <_fflush_r+0x38>
   4585c:	0005883a 	mov	r2,zero
   45860:	dfc00217 	ldw	ra,8(sp)
   45864:	dc000117 	ldw	r16,4(sp)
   45868:	dec00304 	addi	sp,sp,12
   4586c:	f800283a 	ret
   45870:	8009883a 	mov	r4,r16
   45874:	dfc00217 	ldw	ra,8(sp)
   45878:	dc000117 	ldw	r16,4(sp)
   4587c:	dec00304 	addi	sp,sp,12
   45880:	004561c1 	jmpi	4561c <__sflush_r>
   45884:	d9400015 	stw	r5,0(sp)
   45888:	0045c240 	call	45c24 <__sinit>
   4588c:	d9400017 	ldw	r5,0(sp)
   45890:	003ff006 	br	45854 <__alt_data_end+0xfffd4b14>

00045894 <fflush>:
   45894:	20000526 	beq	r4,zero,458ac <fflush+0x18>
   45898:	00800174 	movhi	r2,5
   4589c:	10a34b04 	addi	r2,r2,-29396
   458a0:	200b883a 	mov	r5,r4
   458a4:	11000017 	ldw	r4,0(r2)
   458a8:	00458381 	jmpi	45838 <_fflush_r>
   458ac:	00800174 	movhi	r2,5
   458b0:	10a34a04 	addi	r2,r2,-29400
   458b4:	11000017 	ldw	r4,0(r2)
   458b8:	01400134 	movhi	r5,4
   458bc:	29560e04 	addi	r5,r5,22584
   458c0:	004616c1 	jmpi	4616c <_fwalk_reent>

000458c4 <__fp_unlock>:
   458c4:	0005883a 	mov	r2,zero
   458c8:	f800283a 	ret

000458cc <_cleanup_r>:
   458cc:	01400134 	movhi	r5,4
   458d0:	2959c104 	addi	r5,r5,26372
   458d4:	004616c1 	jmpi	4616c <_fwalk_reent>

000458d8 <__sinit.part.1>:
   458d8:	defff704 	addi	sp,sp,-36
   458dc:	00c00134 	movhi	r3,4
   458e0:	dfc00815 	stw	ra,32(sp)
   458e4:	ddc00715 	stw	r23,28(sp)
   458e8:	dd800615 	stw	r22,24(sp)
   458ec:	dd400515 	stw	r21,20(sp)
   458f0:	dd000415 	stw	r20,16(sp)
   458f4:	dcc00315 	stw	r19,12(sp)
   458f8:	dc800215 	stw	r18,8(sp)
   458fc:	dc400115 	stw	r17,4(sp)
   45900:	dc000015 	stw	r16,0(sp)
   45904:	18d63304 	addi	r3,r3,22732
   45908:	24000117 	ldw	r16,4(r4)
   4590c:	20c00f15 	stw	r3,60(r4)
   45910:	2080bb04 	addi	r2,r4,748
   45914:	00c000c4 	movi	r3,3
   45918:	20c0b915 	stw	r3,740(r4)
   4591c:	2080ba15 	stw	r2,744(r4)
   45920:	2000b815 	stw	zero,736(r4)
   45924:	05c00204 	movi	r23,8
   45928:	00800104 	movi	r2,4
   4592c:	2025883a 	mov	r18,r4
   45930:	b80d883a 	mov	r6,r23
   45934:	81001704 	addi	r4,r16,92
   45938:	000b883a 	mov	r5,zero
   4593c:	80000015 	stw	zero,0(r16)
   45940:	80000115 	stw	zero,4(r16)
   45944:	80000215 	stw	zero,8(r16)
   45948:	8080030d 	sth	r2,12(r16)
   4594c:	80001915 	stw	zero,100(r16)
   45950:	8000038d 	sth	zero,14(r16)
   45954:	80000415 	stw	zero,16(r16)
   45958:	80000515 	stw	zero,20(r16)
   4595c:	80000615 	stw	zero,24(r16)
   45960:	00463ec0 	call	463ec <memset>
   45964:	05800134 	movhi	r22,4
   45968:	94400217 	ldw	r17,8(r18)
   4596c:	05400134 	movhi	r21,4
   45970:	05000134 	movhi	r20,4
   45974:	04c00134 	movhi	r19,4
   45978:	b5994504 	addi	r22,r22,25876
   4597c:	ad595c04 	addi	r21,r21,25968
   45980:	a5197b04 	addi	r20,r20,26092
   45984:	9cd99204 	addi	r19,r19,26184
   45988:	85800815 	stw	r22,32(r16)
   4598c:	85400915 	stw	r21,36(r16)
   45990:	85000a15 	stw	r20,40(r16)
   45994:	84c00b15 	stw	r19,44(r16)
   45998:	84000715 	stw	r16,28(r16)
   4599c:	00800284 	movi	r2,10
   459a0:	8880030d 	sth	r2,12(r17)
   459a4:	00800044 	movi	r2,1
   459a8:	b80d883a 	mov	r6,r23
   459ac:	89001704 	addi	r4,r17,92
   459b0:	000b883a 	mov	r5,zero
   459b4:	88000015 	stw	zero,0(r17)
   459b8:	88000115 	stw	zero,4(r17)
   459bc:	88000215 	stw	zero,8(r17)
   459c0:	88001915 	stw	zero,100(r17)
   459c4:	8880038d 	sth	r2,14(r17)
   459c8:	88000415 	stw	zero,16(r17)
   459cc:	88000515 	stw	zero,20(r17)
   459d0:	88000615 	stw	zero,24(r17)
   459d4:	00463ec0 	call	463ec <memset>
   459d8:	94000317 	ldw	r16,12(r18)
   459dc:	00800484 	movi	r2,18
   459e0:	8c400715 	stw	r17,28(r17)
   459e4:	8d800815 	stw	r22,32(r17)
   459e8:	8d400915 	stw	r21,36(r17)
   459ec:	8d000a15 	stw	r20,40(r17)
   459f0:	8cc00b15 	stw	r19,44(r17)
   459f4:	8080030d 	sth	r2,12(r16)
   459f8:	00800084 	movi	r2,2
   459fc:	80000015 	stw	zero,0(r16)
   45a00:	80000115 	stw	zero,4(r16)
   45a04:	80000215 	stw	zero,8(r16)
   45a08:	80001915 	stw	zero,100(r16)
   45a0c:	8080038d 	sth	r2,14(r16)
   45a10:	80000415 	stw	zero,16(r16)
   45a14:	80000515 	stw	zero,20(r16)
   45a18:	80000615 	stw	zero,24(r16)
   45a1c:	b80d883a 	mov	r6,r23
   45a20:	000b883a 	mov	r5,zero
   45a24:	81001704 	addi	r4,r16,92
   45a28:	00463ec0 	call	463ec <memset>
   45a2c:	00800044 	movi	r2,1
   45a30:	84000715 	stw	r16,28(r16)
   45a34:	85800815 	stw	r22,32(r16)
   45a38:	85400915 	stw	r21,36(r16)
   45a3c:	85000a15 	stw	r20,40(r16)
   45a40:	84c00b15 	stw	r19,44(r16)
   45a44:	90800e15 	stw	r2,56(r18)
   45a48:	dfc00817 	ldw	ra,32(sp)
   45a4c:	ddc00717 	ldw	r23,28(sp)
   45a50:	dd800617 	ldw	r22,24(sp)
   45a54:	dd400517 	ldw	r21,20(sp)
   45a58:	dd000417 	ldw	r20,16(sp)
   45a5c:	dcc00317 	ldw	r19,12(sp)
   45a60:	dc800217 	ldw	r18,8(sp)
   45a64:	dc400117 	ldw	r17,4(sp)
   45a68:	dc000017 	ldw	r16,0(sp)
   45a6c:	dec00904 	addi	sp,sp,36
   45a70:	f800283a 	ret

00045a74 <__fp_lock>:
   45a74:	0005883a 	mov	r2,zero
   45a78:	f800283a 	ret

00045a7c <__sfmoreglue>:
   45a7c:	defffc04 	addi	sp,sp,-16
   45a80:	dc800215 	stw	r18,8(sp)
   45a84:	2825883a 	mov	r18,r5
   45a88:	dc000015 	stw	r16,0(sp)
   45a8c:	01401a04 	movi	r5,104
   45a90:	2021883a 	mov	r16,r4
   45a94:	913fffc4 	addi	r4,r18,-1
   45a98:	dfc00315 	stw	ra,12(sp)
   45a9c:	dc400115 	stw	r17,4(sp)
   45aa0:	0046b2c0 	call	46b2c <__mulsi3>
   45aa4:	8009883a 	mov	r4,r16
   45aa8:	11401d04 	addi	r5,r2,116
   45aac:	1023883a 	mov	r17,r2
   45ab0:	0043d100 	call	43d10 <_malloc_r>
   45ab4:	1021883a 	mov	r16,r2
   45ab8:	10000726 	beq	r2,zero,45ad8 <__sfmoreglue+0x5c>
   45abc:	11000304 	addi	r4,r2,12
   45ac0:	10000015 	stw	zero,0(r2)
   45ac4:	14800115 	stw	r18,4(r2)
   45ac8:	11000215 	stw	r4,8(r2)
   45acc:	89801a04 	addi	r6,r17,104
   45ad0:	000b883a 	mov	r5,zero
   45ad4:	00463ec0 	call	463ec <memset>
   45ad8:	8005883a 	mov	r2,r16
   45adc:	dfc00317 	ldw	ra,12(sp)
   45ae0:	dc800217 	ldw	r18,8(sp)
   45ae4:	dc400117 	ldw	r17,4(sp)
   45ae8:	dc000017 	ldw	r16,0(sp)
   45aec:	dec00404 	addi	sp,sp,16
   45af0:	f800283a 	ret

00045af4 <__sfp>:
   45af4:	defffb04 	addi	sp,sp,-20
   45af8:	dc000015 	stw	r16,0(sp)
   45afc:	04000174 	movhi	r16,5
   45b00:	84234a04 	addi	r16,r16,-29400
   45b04:	dcc00315 	stw	r19,12(sp)
   45b08:	2027883a 	mov	r19,r4
   45b0c:	81000017 	ldw	r4,0(r16)
   45b10:	dfc00415 	stw	ra,16(sp)
   45b14:	dc800215 	stw	r18,8(sp)
   45b18:	20800e17 	ldw	r2,56(r4)
   45b1c:	dc400115 	stw	r17,4(sp)
   45b20:	1000021e 	bne	r2,zero,45b2c <__sfp+0x38>
   45b24:	00458d80 	call	458d8 <__sinit.part.1>
   45b28:	81000017 	ldw	r4,0(r16)
   45b2c:	2480b804 	addi	r18,r4,736
   45b30:	047fffc4 	movi	r17,-1
   45b34:	91000117 	ldw	r4,4(r18)
   45b38:	94000217 	ldw	r16,8(r18)
   45b3c:	213fffc4 	addi	r4,r4,-1
   45b40:	20000a16 	blt	r4,zero,45b6c <__sfp+0x78>
   45b44:	8080030f 	ldh	r2,12(r16)
   45b48:	10000c26 	beq	r2,zero,45b7c <__sfp+0x88>
   45b4c:	80c01d04 	addi	r3,r16,116
   45b50:	00000206 	br	45b5c <__sfp+0x68>
   45b54:	18bfe60f 	ldh	r2,-104(r3)
   45b58:	10000826 	beq	r2,zero,45b7c <__sfp+0x88>
   45b5c:	213fffc4 	addi	r4,r4,-1
   45b60:	1c3ffd04 	addi	r16,r3,-12
   45b64:	18c01a04 	addi	r3,r3,104
   45b68:	247ffa1e 	bne	r4,r17,45b54 <__alt_data_end+0xfffd4e14>
   45b6c:	90800017 	ldw	r2,0(r18)
   45b70:	10001d26 	beq	r2,zero,45be8 <__sfp+0xf4>
   45b74:	1025883a 	mov	r18,r2
   45b78:	003fee06 	br	45b34 <__alt_data_end+0xfffd4df4>
   45b7c:	00bfffc4 	movi	r2,-1
   45b80:	8080038d 	sth	r2,14(r16)
   45b84:	00800044 	movi	r2,1
   45b88:	8080030d 	sth	r2,12(r16)
   45b8c:	80001915 	stw	zero,100(r16)
   45b90:	80000015 	stw	zero,0(r16)
   45b94:	80000215 	stw	zero,8(r16)
   45b98:	80000115 	stw	zero,4(r16)
   45b9c:	80000415 	stw	zero,16(r16)
   45ba0:	80000515 	stw	zero,20(r16)
   45ba4:	80000615 	stw	zero,24(r16)
   45ba8:	01800204 	movi	r6,8
   45bac:	000b883a 	mov	r5,zero
   45bb0:	81001704 	addi	r4,r16,92
   45bb4:	00463ec0 	call	463ec <memset>
   45bb8:	8005883a 	mov	r2,r16
   45bbc:	80000c15 	stw	zero,48(r16)
   45bc0:	80000d15 	stw	zero,52(r16)
   45bc4:	80001115 	stw	zero,68(r16)
   45bc8:	80001215 	stw	zero,72(r16)
   45bcc:	dfc00417 	ldw	ra,16(sp)
   45bd0:	dcc00317 	ldw	r19,12(sp)
   45bd4:	dc800217 	ldw	r18,8(sp)
   45bd8:	dc400117 	ldw	r17,4(sp)
   45bdc:	dc000017 	ldw	r16,0(sp)
   45be0:	dec00504 	addi	sp,sp,20
   45be4:	f800283a 	ret
   45be8:	01400104 	movi	r5,4
   45bec:	9809883a 	mov	r4,r19
   45bf0:	0045a7c0 	call	45a7c <__sfmoreglue>
   45bf4:	90800015 	stw	r2,0(r18)
   45bf8:	103fde1e 	bne	r2,zero,45b74 <__alt_data_end+0xfffd4e34>
   45bfc:	00800304 	movi	r2,12
   45c00:	98800015 	stw	r2,0(r19)
   45c04:	0005883a 	mov	r2,zero
   45c08:	003ff006 	br	45bcc <__alt_data_end+0xfffd4e8c>

00045c0c <_cleanup>:
   45c0c:	00800174 	movhi	r2,5
   45c10:	10a34a04 	addi	r2,r2,-29400
   45c14:	11000017 	ldw	r4,0(r2)
   45c18:	01400134 	movhi	r5,4
   45c1c:	2959c104 	addi	r5,r5,26372
   45c20:	004616c1 	jmpi	4616c <_fwalk_reent>

00045c24 <__sinit>:
   45c24:	20800e17 	ldw	r2,56(r4)
   45c28:	10000126 	beq	r2,zero,45c30 <__sinit+0xc>
   45c2c:	f800283a 	ret
   45c30:	00458d81 	jmpi	458d8 <__sinit.part.1>

00045c34 <__sfp_lock_acquire>:
   45c34:	f800283a 	ret

00045c38 <__sfp_lock_release>:
   45c38:	f800283a 	ret

00045c3c <__sinit_lock_acquire>:
   45c3c:	f800283a 	ret

00045c40 <__sinit_lock_release>:
   45c40:	f800283a 	ret

00045c44 <__fp_lock_all>:
   45c44:	00800174 	movhi	r2,5
   45c48:	10a34b04 	addi	r2,r2,-29396
   45c4c:	11000017 	ldw	r4,0(r2)
   45c50:	01400134 	movhi	r5,4
   45c54:	29569d04 	addi	r5,r5,23156
   45c58:	00460a81 	jmpi	460a8 <_fwalk>

00045c5c <__fp_unlock_all>:
   45c5c:	00800174 	movhi	r2,5
   45c60:	10a34b04 	addi	r2,r2,-29396
   45c64:	11000017 	ldw	r4,0(r2)
   45c68:	01400134 	movhi	r5,4
   45c6c:	29563104 	addi	r5,r5,22724
   45c70:	00460a81 	jmpi	460a8 <_fwalk>

00045c74 <_malloc_trim_r>:
   45c74:	defffb04 	addi	sp,sp,-20
   45c78:	dcc00315 	stw	r19,12(sp)
   45c7c:	04c00174 	movhi	r19,5
   45c80:	dc800215 	stw	r18,8(sp)
   45c84:	dc400115 	stw	r17,4(sp)
   45c88:	dc000015 	stw	r16,0(sp)
   45c8c:	dfc00415 	stw	ra,16(sp)
   45c90:	2821883a 	mov	r16,r5
   45c94:	9ce23f04 	addi	r19,r19,-30468
   45c98:	2025883a 	mov	r18,r4
   45c9c:	0046eb80 	call	46eb8 <__malloc_lock>
   45ca0:	98800217 	ldw	r2,8(r19)
   45ca4:	14400117 	ldw	r17,4(r2)
   45ca8:	00bfff04 	movi	r2,-4
   45cac:	88a2703a 	and	r17,r17,r2
   45cb0:	8c21c83a 	sub	r16,r17,r16
   45cb4:	8403fbc4 	addi	r16,r16,4079
   45cb8:	8020d33a 	srli	r16,r16,12
   45cbc:	0083ffc4 	movi	r2,4095
   45cc0:	843fffc4 	addi	r16,r16,-1
   45cc4:	8020933a 	slli	r16,r16,12
   45cc8:	1400060e 	bge	r2,r16,45ce4 <_malloc_trim_r+0x70>
   45ccc:	000b883a 	mov	r5,zero
   45cd0:	9009883a 	mov	r4,r18
   45cd4:	0044fec0 	call	44fec <_sbrk_r>
   45cd8:	98c00217 	ldw	r3,8(r19)
   45cdc:	1c47883a 	add	r3,r3,r17
   45ce0:	10c00a26 	beq	r2,r3,45d0c <_malloc_trim_r+0x98>
   45ce4:	9009883a 	mov	r4,r18
   45ce8:	0046edc0 	call	46edc <__malloc_unlock>
   45cec:	0005883a 	mov	r2,zero
   45cf0:	dfc00417 	ldw	ra,16(sp)
   45cf4:	dcc00317 	ldw	r19,12(sp)
   45cf8:	dc800217 	ldw	r18,8(sp)
   45cfc:	dc400117 	ldw	r17,4(sp)
   45d00:	dc000017 	ldw	r16,0(sp)
   45d04:	dec00504 	addi	sp,sp,20
   45d08:	f800283a 	ret
   45d0c:	040bc83a 	sub	r5,zero,r16
   45d10:	9009883a 	mov	r4,r18
   45d14:	0044fec0 	call	44fec <_sbrk_r>
   45d18:	00ffffc4 	movi	r3,-1
   45d1c:	10c00d26 	beq	r2,r3,45d54 <_malloc_trim_r+0xe0>
   45d20:	00c00174 	movhi	r3,5
   45d24:	18ea0404 	addi	r3,r3,-22512
   45d28:	18800017 	ldw	r2,0(r3)
   45d2c:	99000217 	ldw	r4,8(r19)
   45d30:	8c23c83a 	sub	r17,r17,r16
   45d34:	8c400054 	ori	r17,r17,1
   45d38:	1421c83a 	sub	r16,r2,r16
   45d3c:	24400115 	stw	r17,4(r4)
   45d40:	9009883a 	mov	r4,r18
   45d44:	1c000015 	stw	r16,0(r3)
   45d48:	0046edc0 	call	46edc <__malloc_unlock>
   45d4c:	00800044 	movi	r2,1
   45d50:	003fe706 	br	45cf0 <__alt_data_end+0xfffd4fb0>
   45d54:	000b883a 	mov	r5,zero
   45d58:	9009883a 	mov	r4,r18
   45d5c:	0044fec0 	call	44fec <_sbrk_r>
   45d60:	99000217 	ldw	r4,8(r19)
   45d64:	014003c4 	movi	r5,15
   45d68:	1107c83a 	sub	r3,r2,r4
   45d6c:	28ffdd0e 	bge	r5,r3,45ce4 <__alt_data_end+0xfffd4fa4>
   45d70:	01400174 	movhi	r5,5
   45d74:	29634c04 	addi	r5,r5,-29392
   45d78:	29400017 	ldw	r5,0(r5)
   45d7c:	18c00054 	ori	r3,r3,1
   45d80:	20c00115 	stw	r3,4(r4)
   45d84:	00c00174 	movhi	r3,5
   45d88:	1145c83a 	sub	r2,r2,r5
   45d8c:	18ea0404 	addi	r3,r3,-22512
   45d90:	18800015 	stw	r2,0(r3)
   45d94:	003fd306 	br	45ce4 <__alt_data_end+0xfffd4fa4>

00045d98 <_free_r>:
   45d98:	28004126 	beq	r5,zero,45ea0 <_free_r+0x108>
   45d9c:	defffd04 	addi	sp,sp,-12
   45da0:	dc400115 	stw	r17,4(sp)
   45da4:	dc000015 	stw	r16,0(sp)
   45da8:	2023883a 	mov	r17,r4
   45dac:	2821883a 	mov	r16,r5
   45db0:	dfc00215 	stw	ra,8(sp)
   45db4:	0046eb80 	call	46eb8 <__malloc_lock>
   45db8:	81ffff17 	ldw	r7,-4(r16)
   45dbc:	00bfff84 	movi	r2,-2
   45dc0:	01000174 	movhi	r4,5
   45dc4:	81bffe04 	addi	r6,r16,-8
   45dc8:	3884703a 	and	r2,r7,r2
   45dcc:	21223f04 	addi	r4,r4,-30468
   45dd0:	308b883a 	add	r5,r6,r2
   45dd4:	2a400117 	ldw	r9,4(r5)
   45dd8:	22000217 	ldw	r8,8(r4)
   45ddc:	00ffff04 	movi	r3,-4
   45de0:	48c6703a 	and	r3,r9,r3
   45de4:	2a005726 	beq	r5,r8,45f44 <_free_r+0x1ac>
   45de8:	28c00115 	stw	r3,4(r5)
   45dec:	39c0004c 	andi	r7,r7,1
   45df0:	3800091e 	bne	r7,zero,45e18 <_free_r+0x80>
   45df4:	823ffe17 	ldw	r8,-8(r16)
   45df8:	22400204 	addi	r9,r4,8
   45dfc:	320dc83a 	sub	r6,r6,r8
   45e00:	31c00217 	ldw	r7,8(r6)
   45e04:	1205883a 	add	r2,r2,r8
   45e08:	3a406526 	beq	r7,r9,45fa0 <_free_r+0x208>
   45e0c:	32000317 	ldw	r8,12(r6)
   45e10:	3a000315 	stw	r8,12(r7)
   45e14:	41c00215 	stw	r7,8(r8)
   45e18:	28cf883a 	add	r7,r5,r3
   45e1c:	39c00117 	ldw	r7,4(r7)
   45e20:	39c0004c 	andi	r7,r7,1
   45e24:	38003a26 	beq	r7,zero,45f10 <_free_r+0x178>
   45e28:	10c00054 	ori	r3,r2,1
   45e2c:	30c00115 	stw	r3,4(r6)
   45e30:	3087883a 	add	r3,r6,r2
   45e34:	18800015 	stw	r2,0(r3)
   45e38:	00c07fc4 	movi	r3,511
   45e3c:	18801936 	bltu	r3,r2,45ea4 <_free_r+0x10c>
   45e40:	1004d0fa 	srli	r2,r2,3
   45e44:	01c00044 	movi	r7,1
   45e48:	21400117 	ldw	r5,4(r4)
   45e4c:	10c00044 	addi	r3,r2,1
   45e50:	18c7883a 	add	r3,r3,r3
   45e54:	1005d0ba 	srai	r2,r2,2
   45e58:	18c7883a 	add	r3,r3,r3
   45e5c:	18c7883a 	add	r3,r3,r3
   45e60:	1907883a 	add	r3,r3,r4
   45e64:	3884983a 	sll	r2,r7,r2
   45e68:	19c00017 	ldw	r7,0(r3)
   45e6c:	1a3ffe04 	addi	r8,r3,-8
   45e70:	1144b03a 	or	r2,r2,r5
   45e74:	32000315 	stw	r8,12(r6)
   45e78:	31c00215 	stw	r7,8(r6)
   45e7c:	20800115 	stw	r2,4(r4)
   45e80:	19800015 	stw	r6,0(r3)
   45e84:	39800315 	stw	r6,12(r7)
   45e88:	8809883a 	mov	r4,r17
   45e8c:	dfc00217 	ldw	ra,8(sp)
   45e90:	dc400117 	ldw	r17,4(sp)
   45e94:	dc000017 	ldw	r16,0(sp)
   45e98:	dec00304 	addi	sp,sp,12
   45e9c:	0046edc1 	jmpi	46edc <__malloc_unlock>
   45ea0:	f800283a 	ret
   45ea4:	100ad27a 	srli	r5,r2,9
   45ea8:	00c00104 	movi	r3,4
   45eac:	19404a36 	bltu	r3,r5,45fd8 <_free_r+0x240>
   45eb0:	100ad1ba 	srli	r5,r2,6
   45eb4:	28c00e44 	addi	r3,r5,57
   45eb8:	18c7883a 	add	r3,r3,r3
   45ebc:	29400e04 	addi	r5,r5,56
   45ec0:	18c7883a 	add	r3,r3,r3
   45ec4:	18c7883a 	add	r3,r3,r3
   45ec8:	1909883a 	add	r4,r3,r4
   45ecc:	20c00017 	ldw	r3,0(r4)
   45ed0:	01c00174 	movhi	r7,5
   45ed4:	213ffe04 	addi	r4,r4,-8
   45ed8:	39e23f04 	addi	r7,r7,-30468
   45edc:	20c04426 	beq	r4,r3,45ff0 <_free_r+0x258>
   45ee0:	01ffff04 	movi	r7,-4
   45ee4:	19400117 	ldw	r5,4(r3)
   45ee8:	29ca703a 	and	r5,r5,r7
   45eec:	1140022e 	bgeu	r2,r5,45ef8 <_free_r+0x160>
   45ef0:	18c00217 	ldw	r3,8(r3)
   45ef4:	20fffb1e 	bne	r4,r3,45ee4 <__alt_data_end+0xfffd51a4>
   45ef8:	19000317 	ldw	r4,12(r3)
   45efc:	31000315 	stw	r4,12(r6)
   45f00:	30c00215 	stw	r3,8(r6)
   45f04:	21800215 	stw	r6,8(r4)
   45f08:	19800315 	stw	r6,12(r3)
   45f0c:	003fde06 	br	45e88 <__alt_data_end+0xfffd5148>
   45f10:	29c00217 	ldw	r7,8(r5)
   45f14:	10c5883a 	add	r2,r2,r3
   45f18:	00c00174 	movhi	r3,5
   45f1c:	18e24104 	addi	r3,r3,-30460
   45f20:	38c03b26 	beq	r7,r3,46010 <_free_r+0x278>
   45f24:	2a000317 	ldw	r8,12(r5)
   45f28:	11400054 	ori	r5,r2,1
   45f2c:	3087883a 	add	r3,r6,r2
   45f30:	3a000315 	stw	r8,12(r7)
   45f34:	41c00215 	stw	r7,8(r8)
   45f38:	31400115 	stw	r5,4(r6)
   45f3c:	18800015 	stw	r2,0(r3)
   45f40:	003fbd06 	br	45e38 <__alt_data_end+0xfffd50f8>
   45f44:	39c0004c 	andi	r7,r7,1
   45f48:	10c5883a 	add	r2,r2,r3
   45f4c:	3800071e 	bne	r7,zero,45f6c <_free_r+0x1d4>
   45f50:	81fffe17 	ldw	r7,-8(r16)
   45f54:	31cdc83a 	sub	r6,r6,r7
   45f58:	30c00317 	ldw	r3,12(r6)
   45f5c:	31400217 	ldw	r5,8(r6)
   45f60:	11c5883a 	add	r2,r2,r7
   45f64:	28c00315 	stw	r3,12(r5)
   45f68:	19400215 	stw	r5,8(r3)
   45f6c:	10c00054 	ori	r3,r2,1
   45f70:	30c00115 	stw	r3,4(r6)
   45f74:	00c00174 	movhi	r3,5
   45f78:	18e34d04 	addi	r3,r3,-29388
   45f7c:	18c00017 	ldw	r3,0(r3)
   45f80:	21800215 	stw	r6,8(r4)
   45f84:	10ffc036 	bltu	r2,r3,45e88 <__alt_data_end+0xfffd5148>
   45f88:	00800174 	movhi	r2,5
   45f8c:	10aa0304 	addi	r2,r2,-22516
   45f90:	11400017 	ldw	r5,0(r2)
   45f94:	8809883a 	mov	r4,r17
   45f98:	0045c740 	call	45c74 <_malloc_trim_r>
   45f9c:	003fba06 	br	45e88 <__alt_data_end+0xfffd5148>
   45fa0:	28c9883a 	add	r4,r5,r3
   45fa4:	21000117 	ldw	r4,4(r4)
   45fa8:	2100004c 	andi	r4,r4,1
   45fac:	2000391e 	bne	r4,zero,46094 <_free_r+0x2fc>
   45fb0:	29c00217 	ldw	r7,8(r5)
   45fb4:	29000317 	ldw	r4,12(r5)
   45fb8:	1885883a 	add	r2,r3,r2
   45fbc:	10c00054 	ori	r3,r2,1
   45fc0:	39000315 	stw	r4,12(r7)
   45fc4:	21c00215 	stw	r7,8(r4)
   45fc8:	30c00115 	stw	r3,4(r6)
   45fcc:	308d883a 	add	r6,r6,r2
   45fd0:	30800015 	stw	r2,0(r6)
   45fd4:	003fac06 	br	45e88 <__alt_data_end+0xfffd5148>
   45fd8:	00c00504 	movi	r3,20
   45fdc:	19401536 	bltu	r3,r5,46034 <_free_r+0x29c>
   45fe0:	28c01704 	addi	r3,r5,92
   45fe4:	18c7883a 	add	r3,r3,r3
   45fe8:	294016c4 	addi	r5,r5,91
   45fec:	003fb406 	br	45ec0 <__alt_data_end+0xfffd5180>
   45ff0:	280bd0ba 	srai	r5,r5,2
   45ff4:	00c00044 	movi	r3,1
   45ff8:	38800117 	ldw	r2,4(r7)
   45ffc:	194a983a 	sll	r5,r3,r5
   46000:	2007883a 	mov	r3,r4
   46004:	2884b03a 	or	r2,r5,r2
   46008:	38800115 	stw	r2,4(r7)
   4600c:	003fbb06 	br	45efc <__alt_data_end+0xfffd51bc>
   46010:	21800515 	stw	r6,20(r4)
   46014:	21800415 	stw	r6,16(r4)
   46018:	10c00054 	ori	r3,r2,1
   4601c:	31c00315 	stw	r7,12(r6)
   46020:	31c00215 	stw	r7,8(r6)
   46024:	30c00115 	stw	r3,4(r6)
   46028:	308d883a 	add	r6,r6,r2
   4602c:	30800015 	stw	r2,0(r6)
   46030:	003f9506 	br	45e88 <__alt_data_end+0xfffd5148>
   46034:	00c01504 	movi	r3,84
   46038:	19400536 	bltu	r3,r5,46050 <_free_r+0x2b8>
   4603c:	100ad33a 	srli	r5,r2,12
   46040:	28c01bc4 	addi	r3,r5,111
   46044:	18c7883a 	add	r3,r3,r3
   46048:	29401b84 	addi	r5,r5,110
   4604c:	003f9c06 	br	45ec0 <__alt_data_end+0xfffd5180>
   46050:	00c05504 	movi	r3,340
   46054:	19400536 	bltu	r3,r5,4606c <_free_r+0x2d4>
   46058:	100ad3fa 	srli	r5,r2,15
   4605c:	28c01e04 	addi	r3,r5,120
   46060:	18c7883a 	add	r3,r3,r3
   46064:	29401dc4 	addi	r5,r5,119
   46068:	003f9506 	br	45ec0 <__alt_data_end+0xfffd5180>
   4606c:	00c15504 	movi	r3,1364
   46070:	19400536 	bltu	r3,r5,46088 <_free_r+0x2f0>
   46074:	100ad4ba 	srli	r5,r2,18
   46078:	28c01f44 	addi	r3,r5,125
   4607c:	18c7883a 	add	r3,r3,r3
   46080:	29401f04 	addi	r5,r5,124
   46084:	003f8e06 	br	45ec0 <__alt_data_end+0xfffd5180>
   46088:	00c03f84 	movi	r3,254
   4608c:	01401f84 	movi	r5,126
   46090:	003f8b06 	br	45ec0 <__alt_data_end+0xfffd5180>
   46094:	10c00054 	ori	r3,r2,1
   46098:	30c00115 	stw	r3,4(r6)
   4609c:	308d883a 	add	r6,r6,r2
   460a0:	30800015 	stw	r2,0(r6)
   460a4:	003f7806 	br	45e88 <__alt_data_end+0xfffd5148>

000460a8 <_fwalk>:
   460a8:	defff704 	addi	sp,sp,-36
   460ac:	dd000415 	stw	r20,16(sp)
   460b0:	dfc00815 	stw	ra,32(sp)
   460b4:	ddc00715 	stw	r23,28(sp)
   460b8:	dd800615 	stw	r22,24(sp)
   460bc:	dd400515 	stw	r21,20(sp)
   460c0:	dcc00315 	stw	r19,12(sp)
   460c4:	dc800215 	stw	r18,8(sp)
   460c8:	dc400115 	stw	r17,4(sp)
   460cc:	dc000015 	stw	r16,0(sp)
   460d0:	2500b804 	addi	r20,r4,736
   460d4:	a0002326 	beq	r20,zero,46164 <_fwalk+0xbc>
   460d8:	282b883a 	mov	r21,r5
   460dc:	002f883a 	mov	r23,zero
   460e0:	05800044 	movi	r22,1
   460e4:	04ffffc4 	movi	r19,-1
   460e8:	a4400117 	ldw	r17,4(r20)
   460ec:	a4800217 	ldw	r18,8(r20)
   460f0:	8c7fffc4 	addi	r17,r17,-1
   460f4:	88000d16 	blt	r17,zero,4612c <_fwalk+0x84>
   460f8:	94000304 	addi	r16,r18,12
   460fc:	94800384 	addi	r18,r18,14
   46100:	8080000b 	ldhu	r2,0(r16)
   46104:	8c7fffc4 	addi	r17,r17,-1
   46108:	813ffd04 	addi	r4,r16,-12
   4610c:	b080042e 	bgeu	r22,r2,46120 <_fwalk+0x78>
   46110:	9080000f 	ldh	r2,0(r18)
   46114:	14c00226 	beq	r2,r19,46120 <_fwalk+0x78>
   46118:	a83ee83a 	callr	r21
   4611c:	b8aeb03a 	or	r23,r23,r2
   46120:	84001a04 	addi	r16,r16,104
   46124:	94801a04 	addi	r18,r18,104
   46128:	8cfff51e 	bne	r17,r19,46100 <__alt_data_end+0xfffd53c0>
   4612c:	a5000017 	ldw	r20,0(r20)
   46130:	a03fed1e 	bne	r20,zero,460e8 <__alt_data_end+0xfffd53a8>
   46134:	b805883a 	mov	r2,r23
   46138:	dfc00817 	ldw	ra,32(sp)
   4613c:	ddc00717 	ldw	r23,28(sp)
   46140:	dd800617 	ldw	r22,24(sp)
   46144:	dd400517 	ldw	r21,20(sp)
   46148:	dd000417 	ldw	r20,16(sp)
   4614c:	dcc00317 	ldw	r19,12(sp)
   46150:	dc800217 	ldw	r18,8(sp)
   46154:	dc400117 	ldw	r17,4(sp)
   46158:	dc000017 	ldw	r16,0(sp)
   4615c:	dec00904 	addi	sp,sp,36
   46160:	f800283a 	ret
   46164:	002f883a 	mov	r23,zero
   46168:	003ff206 	br	46134 <__alt_data_end+0xfffd53f4>

0004616c <_fwalk_reent>:
   4616c:	defff704 	addi	sp,sp,-36
   46170:	dd000415 	stw	r20,16(sp)
   46174:	dfc00815 	stw	ra,32(sp)
   46178:	ddc00715 	stw	r23,28(sp)
   4617c:	dd800615 	stw	r22,24(sp)
   46180:	dd400515 	stw	r21,20(sp)
   46184:	dcc00315 	stw	r19,12(sp)
   46188:	dc800215 	stw	r18,8(sp)
   4618c:	dc400115 	stw	r17,4(sp)
   46190:	dc000015 	stw	r16,0(sp)
   46194:	2500b804 	addi	r20,r4,736
   46198:	a0002326 	beq	r20,zero,46228 <_fwalk_reent+0xbc>
   4619c:	282b883a 	mov	r21,r5
   461a0:	2027883a 	mov	r19,r4
   461a4:	002f883a 	mov	r23,zero
   461a8:	05800044 	movi	r22,1
   461ac:	04bfffc4 	movi	r18,-1
   461b0:	a4400117 	ldw	r17,4(r20)
   461b4:	a4000217 	ldw	r16,8(r20)
   461b8:	8c7fffc4 	addi	r17,r17,-1
   461bc:	88000c16 	blt	r17,zero,461f0 <_fwalk_reent+0x84>
   461c0:	84000304 	addi	r16,r16,12
   461c4:	8080000b 	ldhu	r2,0(r16)
   461c8:	8c7fffc4 	addi	r17,r17,-1
   461cc:	817ffd04 	addi	r5,r16,-12
   461d0:	b080052e 	bgeu	r22,r2,461e8 <_fwalk_reent+0x7c>
   461d4:	8080008f 	ldh	r2,2(r16)
   461d8:	9809883a 	mov	r4,r19
   461dc:	14800226 	beq	r2,r18,461e8 <_fwalk_reent+0x7c>
   461e0:	a83ee83a 	callr	r21
   461e4:	b8aeb03a 	or	r23,r23,r2
   461e8:	84001a04 	addi	r16,r16,104
   461ec:	8cbff51e 	bne	r17,r18,461c4 <__alt_data_end+0xfffd5484>
   461f0:	a5000017 	ldw	r20,0(r20)
   461f4:	a03fee1e 	bne	r20,zero,461b0 <__alt_data_end+0xfffd5470>
   461f8:	b805883a 	mov	r2,r23
   461fc:	dfc00817 	ldw	ra,32(sp)
   46200:	ddc00717 	ldw	r23,28(sp)
   46204:	dd800617 	ldw	r22,24(sp)
   46208:	dd400517 	ldw	r21,20(sp)
   4620c:	dd000417 	ldw	r20,16(sp)
   46210:	dcc00317 	ldw	r19,12(sp)
   46214:	dc800217 	ldw	r18,8(sp)
   46218:	dc400117 	ldw	r17,4(sp)
   4621c:	dc000017 	ldw	r16,0(sp)
   46220:	dec00904 	addi	sp,sp,36
   46224:	f800283a 	ret
   46228:	002f883a 	mov	r23,zero
   4622c:	003ff206 	br	461f8 <__alt_data_end+0xfffd54b8>

00046230 <__smakebuf_r>:
   46230:	2880030b 	ldhu	r2,12(r5)
   46234:	10c0008c 	andi	r3,r2,2
   46238:	1800411e 	bne	r3,zero,46340 <__smakebuf_r+0x110>
   4623c:	deffec04 	addi	sp,sp,-80
   46240:	dc000f15 	stw	r16,60(sp)
   46244:	2821883a 	mov	r16,r5
   46248:	2940038f 	ldh	r5,14(r5)
   4624c:	dc401015 	stw	r17,64(sp)
   46250:	dfc01315 	stw	ra,76(sp)
   46254:	dcc01215 	stw	r19,72(sp)
   46258:	dc801115 	stw	r18,68(sp)
   4625c:	2023883a 	mov	r17,r4
   46260:	28001c16 	blt	r5,zero,462d4 <__smakebuf_r+0xa4>
   46264:	d80d883a 	mov	r6,sp
   46268:	00468080 	call	46808 <_fstat_r>
   4626c:	10001816 	blt	r2,zero,462d0 <__smakebuf_r+0xa0>
   46270:	d8800117 	ldw	r2,4(sp)
   46274:	00e00014 	movui	r3,32768
   46278:	10bc000c 	andi	r2,r2,61440
   4627c:	14c80020 	cmpeqi	r19,r2,8192
   46280:	10c03726 	beq	r2,r3,46360 <__smakebuf_r+0x130>
   46284:	80c0030b 	ldhu	r3,12(r16)
   46288:	18c20014 	ori	r3,r3,2048
   4628c:	80c0030d 	sth	r3,12(r16)
   46290:	00c80004 	movi	r3,8192
   46294:	10c0521e 	bne	r2,r3,463e0 <__smakebuf_r+0x1b0>
   46298:	8140038f 	ldh	r5,14(r16)
   4629c:	8809883a 	mov	r4,r17
   462a0:	00468640 	call	46864 <_isatty_r>
   462a4:	10004c26 	beq	r2,zero,463d8 <__smakebuf_r+0x1a8>
   462a8:	8080030b 	ldhu	r2,12(r16)
   462ac:	80c010c4 	addi	r3,r16,67
   462b0:	80c00015 	stw	r3,0(r16)
   462b4:	10800054 	ori	r2,r2,1
   462b8:	8080030d 	sth	r2,12(r16)
   462bc:	00800044 	movi	r2,1
   462c0:	80c00415 	stw	r3,16(r16)
   462c4:	80800515 	stw	r2,20(r16)
   462c8:	04810004 	movi	r18,1024
   462cc:	00000706 	br	462ec <__smakebuf_r+0xbc>
   462d0:	8080030b 	ldhu	r2,12(r16)
   462d4:	10c0200c 	andi	r3,r2,128
   462d8:	18001f1e 	bne	r3,zero,46358 <__smakebuf_r+0x128>
   462dc:	04810004 	movi	r18,1024
   462e0:	10820014 	ori	r2,r2,2048
   462e4:	8080030d 	sth	r2,12(r16)
   462e8:	0027883a 	mov	r19,zero
   462ec:	900b883a 	mov	r5,r18
   462f0:	8809883a 	mov	r4,r17
   462f4:	0043d100 	call	43d10 <_malloc_r>
   462f8:	10002c26 	beq	r2,zero,463ac <__smakebuf_r+0x17c>
   462fc:	80c0030b 	ldhu	r3,12(r16)
   46300:	01000134 	movhi	r4,4
   46304:	21163304 	addi	r4,r4,22732
   46308:	89000f15 	stw	r4,60(r17)
   4630c:	18c02014 	ori	r3,r3,128
   46310:	80c0030d 	sth	r3,12(r16)
   46314:	80800015 	stw	r2,0(r16)
   46318:	80800415 	stw	r2,16(r16)
   4631c:	84800515 	stw	r18,20(r16)
   46320:	98001a1e 	bne	r19,zero,4638c <__smakebuf_r+0x15c>
   46324:	dfc01317 	ldw	ra,76(sp)
   46328:	dcc01217 	ldw	r19,72(sp)
   4632c:	dc801117 	ldw	r18,68(sp)
   46330:	dc401017 	ldw	r17,64(sp)
   46334:	dc000f17 	ldw	r16,60(sp)
   46338:	dec01404 	addi	sp,sp,80
   4633c:	f800283a 	ret
   46340:	288010c4 	addi	r2,r5,67
   46344:	28800015 	stw	r2,0(r5)
   46348:	28800415 	stw	r2,16(r5)
   4634c:	00800044 	movi	r2,1
   46350:	28800515 	stw	r2,20(r5)
   46354:	f800283a 	ret
   46358:	04801004 	movi	r18,64
   4635c:	003fe006 	br	462e0 <__alt_data_end+0xfffd55a0>
   46360:	81000a17 	ldw	r4,40(r16)
   46364:	00c00134 	movhi	r3,4
   46368:	18d97b04 	addi	r3,r3,26092
   4636c:	20ffc51e 	bne	r4,r3,46284 <__alt_data_end+0xfffd5544>
   46370:	8080030b 	ldhu	r2,12(r16)
   46374:	04810004 	movi	r18,1024
   46378:	84801315 	stw	r18,76(r16)
   4637c:	1484b03a 	or	r2,r2,r18
   46380:	8080030d 	sth	r2,12(r16)
   46384:	0027883a 	mov	r19,zero
   46388:	003fd806 	br	462ec <__alt_data_end+0xfffd55ac>
   4638c:	8140038f 	ldh	r5,14(r16)
   46390:	8809883a 	mov	r4,r17
   46394:	00468640 	call	46864 <_isatty_r>
   46398:	103fe226 	beq	r2,zero,46324 <__alt_data_end+0xfffd55e4>
   4639c:	8080030b 	ldhu	r2,12(r16)
   463a0:	10800054 	ori	r2,r2,1
   463a4:	8080030d 	sth	r2,12(r16)
   463a8:	003fde06 	br	46324 <__alt_data_end+0xfffd55e4>
   463ac:	8080030b 	ldhu	r2,12(r16)
   463b0:	10c0800c 	andi	r3,r2,512
   463b4:	183fdb1e 	bne	r3,zero,46324 <__alt_data_end+0xfffd55e4>
   463b8:	10800094 	ori	r2,r2,2
   463bc:	80c010c4 	addi	r3,r16,67
   463c0:	8080030d 	sth	r2,12(r16)
   463c4:	00800044 	movi	r2,1
   463c8:	80c00015 	stw	r3,0(r16)
   463cc:	80c00415 	stw	r3,16(r16)
   463d0:	80800515 	stw	r2,20(r16)
   463d4:	003fd306 	br	46324 <__alt_data_end+0xfffd55e4>
   463d8:	04810004 	movi	r18,1024
   463dc:	003fc306 	br	462ec <__alt_data_end+0xfffd55ac>
   463e0:	0027883a 	mov	r19,zero
   463e4:	04810004 	movi	r18,1024
   463e8:	003fc006 	br	462ec <__alt_data_end+0xfffd55ac>

000463ec <memset>:
   463ec:	20c000cc 	andi	r3,r4,3
   463f0:	2005883a 	mov	r2,r4
   463f4:	18004426 	beq	r3,zero,46508 <memset+0x11c>
   463f8:	31ffffc4 	addi	r7,r6,-1
   463fc:	30004026 	beq	r6,zero,46500 <memset+0x114>
   46400:	2813883a 	mov	r9,r5
   46404:	200d883a 	mov	r6,r4
   46408:	2007883a 	mov	r3,r4
   4640c:	00000406 	br	46420 <memset+0x34>
   46410:	3a3fffc4 	addi	r8,r7,-1
   46414:	31800044 	addi	r6,r6,1
   46418:	38003926 	beq	r7,zero,46500 <memset+0x114>
   4641c:	400f883a 	mov	r7,r8
   46420:	18c00044 	addi	r3,r3,1
   46424:	32400005 	stb	r9,0(r6)
   46428:	1a0000cc 	andi	r8,r3,3
   4642c:	403ff81e 	bne	r8,zero,46410 <__alt_data_end+0xfffd56d0>
   46430:	010000c4 	movi	r4,3
   46434:	21c02d2e 	bgeu	r4,r7,464ec <memset+0x100>
   46438:	29003fcc 	andi	r4,r5,255
   4643c:	200c923a 	slli	r6,r4,8
   46440:	3108b03a 	or	r4,r6,r4
   46444:	200c943a 	slli	r6,r4,16
   46448:	218cb03a 	or	r6,r4,r6
   4644c:	010003c4 	movi	r4,15
   46450:	21c0182e 	bgeu	r4,r7,464b4 <memset+0xc8>
   46454:	3b3ffc04 	addi	r12,r7,-16
   46458:	6018d13a 	srli	r12,r12,4
   4645c:	1a000104 	addi	r8,r3,4
   46460:	1ac00204 	addi	r11,r3,8
   46464:	6008913a 	slli	r4,r12,4
   46468:	1a800304 	addi	r10,r3,12
   4646c:	1813883a 	mov	r9,r3
   46470:	21000504 	addi	r4,r4,20
   46474:	1909883a 	add	r4,r3,r4
   46478:	49800015 	stw	r6,0(r9)
   4647c:	41800015 	stw	r6,0(r8)
   46480:	59800015 	stw	r6,0(r11)
   46484:	51800015 	stw	r6,0(r10)
   46488:	42000404 	addi	r8,r8,16
   4648c:	4a400404 	addi	r9,r9,16
   46490:	5ac00404 	addi	r11,r11,16
   46494:	52800404 	addi	r10,r10,16
   46498:	413ff71e 	bne	r8,r4,46478 <__alt_data_end+0xfffd5738>
   4649c:	63000044 	addi	r12,r12,1
   464a0:	6018913a 	slli	r12,r12,4
   464a4:	39c003cc 	andi	r7,r7,15
   464a8:	010000c4 	movi	r4,3
   464ac:	1b07883a 	add	r3,r3,r12
   464b0:	21c00e2e 	bgeu	r4,r7,464ec <memset+0x100>
   464b4:	1813883a 	mov	r9,r3
   464b8:	3811883a 	mov	r8,r7
   464bc:	010000c4 	movi	r4,3
   464c0:	49800015 	stw	r6,0(r9)
   464c4:	423fff04 	addi	r8,r8,-4
   464c8:	4a400104 	addi	r9,r9,4
   464cc:	223ffc36 	bltu	r4,r8,464c0 <__alt_data_end+0xfffd5780>
   464d0:	393fff04 	addi	r4,r7,-4
   464d4:	2008d0ba 	srli	r4,r4,2
   464d8:	39c000cc 	andi	r7,r7,3
   464dc:	21000044 	addi	r4,r4,1
   464e0:	2109883a 	add	r4,r4,r4
   464e4:	2109883a 	add	r4,r4,r4
   464e8:	1907883a 	add	r3,r3,r4
   464ec:	38000526 	beq	r7,zero,46504 <memset+0x118>
   464f0:	19cf883a 	add	r7,r3,r7
   464f4:	19400005 	stb	r5,0(r3)
   464f8:	18c00044 	addi	r3,r3,1
   464fc:	38fffd1e 	bne	r7,r3,464f4 <__alt_data_end+0xfffd57b4>
   46500:	f800283a 	ret
   46504:	f800283a 	ret
   46508:	2007883a 	mov	r3,r4
   4650c:	300f883a 	mov	r7,r6
   46510:	003fc706 	br	46430 <__alt_data_end+0xfffd56f0>

00046514 <__sread>:
   46514:	defffe04 	addi	sp,sp,-8
   46518:	dc000015 	stw	r16,0(sp)
   4651c:	2821883a 	mov	r16,r5
   46520:	2940038f 	ldh	r5,14(r5)
   46524:	dfc00115 	stw	ra,4(sp)
   46528:	00469180 	call	46918 <_read_r>
   4652c:	10000716 	blt	r2,zero,4654c <__sread+0x38>
   46530:	80c01417 	ldw	r3,80(r16)
   46534:	1887883a 	add	r3,r3,r2
   46538:	80c01415 	stw	r3,80(r16)
   4653c:	dfc00117 	ldw	ra,4(sp)
   46540:	dc000017 	ldw	r16,0(sp)
   46544:	dec00204 	addi	sp,sp,8
   46548:	f800283a 	ret
   4654c:	80c0030b 	ldhu	r3,12(r16)
   46550:	18fbffcc 	andi	r3,r3,61439
   46554:	80c0030d 	sth	r3,12(r16)
   46558:	dfc00117 	ldw	ra,4(sp)
   4655c:	dc000017 	ldw	r16,0(sp)
   46560:	dec00204 	addi	sp,sp,8
   46564:	f800283a 	ret

00046568 <__seofread>:
   46568:	0005883a 	mov	r2,zero
   4656c:	f800283a 	ret

00046570 <__swrite>:
   46570:	2880030b 	ldhu	r2,12(r5)
   46574:	defffb04 	addi	sp,sp,-20
   46578:	dcc00315 	stw	r19,12(sp)
   4657c:	dc800215 	stw	r18,8(sp)
   46580:	dc400115 	stw	r17,4(sp)
   46584:	dc000015 	stw	r16,0(sp)
   46588:	dfc00415 	stw	ra,16(sp)
   4658c:	10c0400c 	andi	r3,r2,256
   46590:	2821883a 	mov	r16,r5
   46594:	2023883a 	mov	r17,r4
   46598:	3025883a 	mov	r18,r6
   4659c:	3827883a 	mov	r19,r7
   465a0:	18000526 	beq	r3,zero,465b8 <__swrite+0x48>
   465a4:	2940038f 	ldh	r5,14(r5)
   465a8:	01c00084 	movi	r7,2
   465ac:	000d883a 	mov	r6,zero
   465b0:	00468b80 	call	468b8 <_lseek_r>
   465b4:	8080030b 	ldhu	r2,12(r16)
   465b8:	8140038f 	ldh	r5,14(r16)
   465bc:	10bbffcc 	andi	r2,r2,61439
   465c0:	980f883a 	mov	r7,r19
   465c4:	900d883a 	mov	r6,r18
   465c8:	8809883a 	mov	r4,r17
   465cc:	8080030d 	sth	r2,12(r16)
   465d0:	dfc00417 	ldw	ra,16(sp)
   465d4:	dcc00317 	ldw	r19,12(sp)
   465d8:	dc800217 	ldw	r18,8(sp)
   465dc:	dc400117 	ldw	r17,4(sp)
   465e0:	dc000017 	ldw	r16,0(sp)
   465e4:	dec00504 	addi	sp,sp,20
   465e8:	00466501 	jmpi	46650 <_write_r>

000465ec <__sseek>:
   465ec:	defffe04 	addi	sp,sp,-8
   465f0:	dc000015 	stw	r16,0(sp)
   465f4:	2821883a 	mov	r16,r5
   465f8:	2940038f 	ldh	r5,14(r5)
   465fc:	dfc00115 	stw	ra,4(sp)
   46600:	00468b80 	call	468b8 <_lseek_r>
   46604:	00ffffc4 	movi	r3,-1
   46608:	10c00826 	beq	r2,r3,4662c <__sseek+0x40>
   4660c:	80c0030b 	ldhu	r3,12(r16)
   46610:	80801415 	stw	r2,80(r16)
   46614:	18c40014 	ori	r3,r3,4096
   46618:	80c0030d 	sth	r3,12(r16)
   4661c:	dfc00117 	ldw	ra,4(sp)
   46620:	dc000017 	ldw	r16,0(sp)
   46624:	dec00204 	addi	sp,sp,8
   46628:	f800283a 	ret
   4662c:	80c0030b 	ldhu	r3,12(r16)
   46630:	18fbffcc 	andi	r3,r3,61439
   46634:	80c0030d 	sth	r3,12(r16)
   46638:	dfc00117 	ldw	ra,4(sp)
   4663c:	dc000017 	ldw	r16,0(sp)
   46640:	dec00204 	addi	sp,sp,8
   46644:	f800283a 	ret

00046648 <__sclose>:
   46648:	2940038f 	ldh	r5,14(r5)
   4664c:	00466b01 	jmpi	466b0 <_close_r>

00046650 <_write_r>:
   46650:	defffd04 	addi	sp,sp,-12
   46654:	2805883a 	mov	r2,r5
   46658:	dc000015 	stw	r16,0(sp)
   4665c:	04000174 	movhi	r16,5
   46660:	dc400115 	stw	r17,4(sp)
   46664:	300b883a 	mov	r5,r6
   46668:	842a0004 	addi	r16,r16,-22528
   4666c:	2023883a 	mov	r17,r4
   46670:	380d883a 	mov	r6,r7
   46674:	1009883a 	mov	r4,r2
   46678:	dfc00215 	stw	ra,8(sp)
   4667c:	80000015 	stw	zero,0(r16)
   46680:	00471540 	call	47154 <write>
   46684:	00ffffc4 	movi	r3,-1
   46688:	10c00526 	beq	r2,r3,466a0 <_write_r+0x50>
   4668c:	dfc00217 	ldw	ra,8(sp)
   46690:	dc400117 	ldw	r17,4(sp)
   46694:	dc000017 	ldw	r16,0(sp)
   46698:	dec00304 	addi	sp,sp,12
   4669c:	f800283a 	ret
   466a0:	80c00017 	ldw	r3,0(r16)
   466a4:	183ff926 	beq	r3,zero,4668c <__alt_data_end+0xfffd594c>
   466a8:	88c00015 	stw	r3,0(r17)
   466ac:	003ff706 	br	4668c <__alt_data_end+0xfffd594c>

000466b0 <_close_r>:
   466b0:	defffd04 	addi	sp,sp,-12
   466b4:	dc000015 	stw	r16,0(sp)
   466b8:	04000174 	movhi	r16,5
   466bc:	dc400115 	stw	r17,4(sp)
   466c0:	842a0004 	addi	r16,r16,-22528
   466c4:	2023883a 	mov	r17,r4
   466c8:	2809883a 	mov	r4,r5
   466cc:	dfc00215 	stw	ra,8(sp)
   466d0:	80000015 	stw	zero,0(r16)
   466d4:	00428b80 	call	428b8 <close>
   466d8:	00ffffc4 	movi	r3,-1
   466dc:	10c00526 	beq	r2,r3,466f4 <_close_r+0x44>
   466e0:	dfc00217 	ldw	ra,8(sp)
   466e4:	dc400117 	ldw	r17,4(sp)
   466e8:	dc000017 	ldw	r16,0(sp)
   466ec:	dec00304 	addi	sp,sp,12
   466f0:	f800283a 	ret
   466f4:	80c00017 	ldw	r3,0(r16)
   466f8:	183ff926 	beq	r3,zero,466e0 <__alt_data_end+0xfffd59a0>
   466fc:	88c00015 	stw	r3,0(r17)
   46700:	003ff706 	br	466e0 <__alt_data_end+0xfffd59a0>

00046704 <_fclose_r>:
   46704:	28003926 	beq	r5,zero,467ec <_fclose_r+0xe8>
   46708:	defffc04 	addi	sp,sp,-16
   4670c:	dc400115 	stw	r17,4(sp)
   46710:	dc000015 	stw	r16,0(sp)
   46714:	dfc00315 	stw	ra,12(sp)
   46718:	dc800215 	stw	r18,8(sp)
   4671c:	2023883a 	mov	r17,r4
   46720:	2821883a 	mov	r16,r5
   46724:	20000226 	beq	r4,zero,46730 <_fclose_r+0x2c>
   46728:	20800e17 	ldw	r2,56(r4)
   4672c:	10002726 	beq	r2,zero,467cc <_fclose_r+0xc8>
   46730:	8080030f 	ldh	r2,12(r16)
   46734:	1000071e 	bne	r2,zero,46754 <_fclose_r+0x50>
   46738:	0005883a 	mov	r2,zero
   4673c:	dfc00317 	ldw	ra,12(sp)
   46740:	dc800217 	ldw	r18,8(sp)
   46744:	dc400117 	ldw	r17,4(sp)
   46748:	dc000017 	ldw	r16,0(sp)
   4674c:	dec00404 	addi	sp,sp,16
   46750:	f800283a 	ret
   46754:	800b883a 	mov	r5,r16
   46758:	8809883a 	mov	r4,r17
   4675c:	004561c0 	call	4561c <__sflush_r>
   46760:	1025883a 	mov	r18,r2
   46764:	80800b17 	ldw	r2,44(r16)
   46768:	10000426 	beq	r2,zero,4677c <_fclose_r+0x78>
   4676c:	81400717 	ldw	r5,28(r16)
   46770:	8809883a 	mov	r4,r17
   46774:	103ee83a 	callr	r2
   46778:	10001616 	blt	r2,zero,467d4 <_fclose_r+0xd0>
   4677c:	8080030b 	ldhu	r2,12(r16)
   46780:	1080200c 	andi	r2,r2,128
   46784:	1000151e 	bne	r2,zero,467dc <_fclose_r+0xd8>
   46788:	81400c17 	ldw	r5,48(r16)
   4678c:	28000526 	beq	r5,zero,467a4 <_fclose_r+0xa0>
   46790:	80801004 	addi	r2,r16,64
   46794:	28800226 	beq	r5,r2,467a0 <_fclose_r+0x9c>
   46798:	8809883a 	mov	r4,r17
   4679c:	0045d980 	call	45d98 <_free_r>
   467a0:	80000c15 	stw	zero,48(r16)
   467a4:	81401117 	ldw	r5,68(r16)
   467a8:	28000326 	beq	r5,zero,467b8 <_fclose_r+0xb4>
   467ac:	8809883a 	mov	r4,r17
   467b0:	0045d980 	call	45d98 <_free_r>
   467b4:	80001115 	stw	zero,68(r16)
   467b8:	0045c340 	call	45c34 <__sfp_lock_acquire>
   467bc:	8000030d 	sth	zero,12(r16)
   467c0:	0045c380 	call	45c38 <__sfp_lock_release>
   467c4:	9005883a 	mov	r2,r18
   467c8:	003fdc06 	br	4673c <__alt_data_end+0xfffd59fc>
   467cc:	0045c240 	call	45c24 <__sinit>
   467d0:	003fd706 	br	46730 <__alt_data_end+0xfffd59f0>
   467d4:	04bfffc4 	movi	r18,-1
   467d8:	003fe806 	br	4677c <__alt_data_end+0xfffd5a3c>
   467dc:	81400417 	ldw	r5,16(r16)
   467e0:	8809883a 	mov	r4,r17
   467e4:	0045d980 	call	45d98 <_free_r>
   467e8:	003fe706 	br	46788 <__alt_data_end+0xfffd5a48>
   467ec:	0005883a 	mov	r2,zero
   467f0:	f800283a 	ret

000467f4 <fclose>:
   467f4:	00800174 	movhi	r2,5
   467f8:	10a34b04 	addi	r2,r2,-29396
   467fc:	200b883a 	mov	r5,r4
   46800:	11000017 	ldw	r4,0(r2)
   46804:	00467041 	jmpi	46704 <_fclose_r>

00046808 <_fstat_r>:
   46808:	defffd04 	addi	sp,sp,-12
   4680c:	2805883a 	mov	r2,r5
   46810:	dc000015 	stw	r16,0(sp)
   46814:	04000174 	movhi	r16,5
   46818:	dc400115 	stw	r17,4(sp)
   4681c:	842a0004 	addi	r16,r16,-22528
   46820:	2023883a 	mov	r17,r4
   46824:	300b883a 	mov	r5,r6
   46828:	1009883a 	mov	r4,r2
   4682c:	dfc00215 	stw	ra,8(sp)
   46830:	80000015 	stw	zero,0(r16)
   46834:	0046bd80 	call	46bd8 <fstat>
   46838:	00ffffc4 	movi	r3,-1
   4683c:	10c00526 	beq	r2,r3,46854 <_fstat_r+0x4c>
   46840:	dfc00217 	ldw	ra,8(sp)
   46844:	dc400117 	ldw	r17,4(sp)
   46848:	dc000017 	ldw	r16,0(sp)
   4684c:	dec00304 	addi	sp,sp,12
   46850:	f800283a 	ret
   46854:	80c00017 	ldw	r3,0(r16)
   46858:	183ff926 	beq	r3,zero,46840 <__alt_data_end+0xfffd5b00>
   4685c:	88c00015 	stw	r3,0(r17)
   46860:	003ff706 	br	46840 <__alt_data_end+0xfffd5b00>

00046864 <_isatty_r>:
   46864:	defffd04 	addi	sp,sp,-12
   46868:	dc000015 	stw	r16,0(sp)
   4686c:	04000174 	movhi	r16,5
   46870:	dc400115 	stw	r17,4(sp)
   46874:	842a0004 	addi	r16,r16,-22528
   46878:	2023883a 	mov	r17,r4
   4687c:	2809883a 	mov	r4,r5
   46880:	dfc00215 	stw	ra,8(sp)
   46884:	80000015 	stw	zero,0(r16)
   46888:	0046ce00 	call	46ce0 <isatty>
   4688c:	00ffffc4 	movi	r3,-1
   46890:	10c00526 	beq	r2,r3,468a8 <_isatty_r+0x44>
   46894:	dfc00217 	ldw	ra,8(sp)
   46898:	dc400117 	ldw	r17,4(sp)
   4689c:	dc000017 	ldw	r16,0(sp)
   468a0:	dec00304 	addi	sp,sp,12
   468a4:	f800283a 	ret
   468a8:	80c00017 	ldw	r3,0(r16)
   468ac:	183ff926 	beq	r3,zero,46894 <__alt_data_end+0xfffd5b54>
   468b0:	88c00015 	stw	r3,0(r17)
   468b4:	003ff706 	br	46894 <__alt_data_end+0xfffd5b54>

000468b8 <_lseek_r>:
   468b8:	defffd04 	addi	sp,sp,-12
   468bc:	2805883a 	mov	r2,r5
   468c0:	dc000015 	stw	r16,0(sp)
   468c4:	04000174 	movhi	r16,5
   468c8:	dc400115 	stw	r17,4(sp)
   468cc:	300b883a 	mov	r5,r6
   468d0:	842a0004 	addi	r16,r16,-22528
   468d4:	2023883a 	mov	r17,r4
   468d8:	380d883a 	mov	r6,r7
   468dc:	1009883a 	mov	r4,r2
   468e0:	dfc00215 	stw	ra,8(sp)
   468e4:	80000015 	stw	zero,0(r16)
   468e8:	0046ddc0 	call	46ddc <lseek>
   468ec:	00ffffc4 	movi	r3,-1
   468f0:	10c00526 	beq	r2,r3,46908 <_lseek_r+0x50>
   468f4:	dfc00217 	ldw	ra,8(sp)
   468f8:	dc400117 	ldw	r17,4(sp)
   468fc:	dc000017 	ldw	r16,0(sp)
   46900:	dec00304 	addi	sp,sp,12
   46904:	f800283a 	ret
   46908:	80c00017 	ldw	r3,0(r16)
   4690c:	183ff926 	beq	r3,zero,468f4 <__alt_data_end+0xfffd5bb4>
   46910:	88c00015 	stw	r3,0(r17)
   46914:	003ff706 	br	468f4 <__alt_data_end+0xfffd5bb4>

00046918 <_read_r>:
   46918:	defffd04 	addi	sp,sp,-12
   4691c:	2805883a 	mov	r2,r5
   46920:	dc000015 	stw	r16,0(sp)
   46924:	04000174 	movhi	r16,5
   46928:	dc400115 	stw	r17,4(sp)
   4692c:	300b883a 	mov	r5,r6
   46930:	842a0004 	addi	r16,r16,-22528
   46934:	2023883a 	mov	r17,r4
   46938:	380d883a 	mov	r6,r7
   4693c:	1009883a 	mov	r4,r2
   46940:	dfc00215 	stw	ra,8(sp)
   46944:	80000015 	stw	zero,0(r16)
   46948:	0046f500 	call	46f50 <read>
   4694c:	00ffffc4 	movi	r3,-1
   46950:	10c00526 	beq	r2,r3,46968 <_read_r+0x50>
   46954:	dfc00217 	ldw	ra,8(sp)
   46958:	dc400117 	ldw	r17,4(sp)
   4695c:	dc000017 	ldw	r16,0(sp)
   46960:	dec00304 	addi	sp,sp,12
   46964:	f800283a 	ret
   46968:	80c00017 	ldw	r3,0(r16)
   4696c:	183ff926 	beq	r3,zero,46954 <__alt_data_end+0xfffd5c14>
   46970:	88c00015 	stw	r3,0(r17)
   46974:	003ff706 	br	46954 <__alt_data_end+0xfffd5c14>

00046978 <__divsi3>:
   46978:	20001b16 	blt	r4,zero,469e8 <__divsi3+0x70>
   4697c:	000f883a 	mov	r7,zero
   46980:	28001616 	blt	r5,zero,469dc <__divsi3+0x64>
   46984:	200d883a 	mov	r6,r4
   46988:	29001a2e 	bgeu	r5,r4,469f4 <__divsi3+0x7c>
   4698c:	00800804 	movi	r2,32
   46990:	00c00044 	movi	r3,1
   46994:	00000106 	br	4699c <__divsi3+0x24>
   46998:	10000d26 	beq	r2,zero,469d0 <__divsi3+0x58>
   4699c:	294b883a 	add	r5,r5,r5
   469a0:	10bfffc4 	addi	r2,r2,-1
   469a4:	18c7883a 	add	r3,r3,r3
   469a8:	293ffb36 	bltu	r5,r4,46998 <__alt_data_end+0xfffd5c58>
   469ac:	0005883a 	mov	r2,zero
   469b0:	18000726 	beq	r3,zero,469d0 <__divsi3+0x58>
   469b4:	0005883a 	mov	r2,zero
   469b8:	31400236 	bltu	r6,r5,469c4 <__divsi3+0x4c>
   469bc:	314dc83a 	sub	r6,r6,r5
   469c0:	10c4b03a 	or	r2,r2,r3
   469c4:	1806d07a 	srli	r3,r3,1
   469c8:	280ad07a 	srli	r5,r5,1
   469cc:	183ffa1e 	bne	r3,zero,469b8 <__alt_data_end+0xfffd5c78>
   469d0:	38000126 	beq	r7,zero,469d8 <__divsi3+0x60>
   469d4:	0085c83a 	sub	r2,zero,r2
   469d8:	f800283a 	ret
   469dc:	014bc83a 	sub	r5,zero,r5
   469e0:	39c0005c 	xori	r7,r7,1
   469e4:	003fe706 	br	46984 <__alt_data_end+0xfffd5c44>
   469e8:	0109c83a 	sub	r4,zero,r4
   469ec:	01c00044 	movi	r7,1
   469f0:	003fe306 	br	46980 <__alt_data_end+0xfffd5c40>
   469f4:	00c00044 	movi	r3,1
   469f8:	003fee06 	br	469b4 <__alt_data_end+0xfffd5c74>

000469fc <__modsi3>:
   469fc:	20001716 	blt	r4,zero,46a5c <__modsi3+0x60>
   46a00:	000f883a 	mov	r7,zero
   46a04:	2005883a 	mov	r2,r4
   46a08:	28001216 	blt	r5,zero,46a54 <__modsi3+0x58>
   46a0c:	2900162e 	bgeu	r5,r4,46a68 <__modsi3+0x6c>
   46a10:	01800804 	movi	r6,32
   46a14:	00c00044 	movi	r3,1
   46a18:	00000106 	br	46a20 <__modsi3+0x24>
   46a1c:	30000a26 	beq	r6,zero,46a48 <__modsi3+0x4c>
   46a20:	294b883a 	add	r5,r5,r5
   46a24:	31bfffc4 	addi	r6,r6,-1
   46a28:	18c7883a 	add	r3,r3,r3
   46a2c:	293ffb36 	bltu	r5,r4,46a1c <__alt_data_end+0xfffd5cdc>
   46a30:	18000526 	beq	r3,zero,46a48 <__modsi3+0x4c>
   46a34:	1806d07a 	srli	r3,r3,1
   46a38:	11400136 	bltu	r2,r5,46a40 <__modsi3+0x44>
   46a3c:	1145c83a 	sub	r2,r2,r5
   46a40:	280ad07a 	srli	r5,r5,1
   46a44:	183ffb1e 	bne	r3,zero,46a34 <__alt_data_end+0xfffd5cf4>
   46a48:	38000126 	beq	r7,zero,46a50 <__modsi3+0x54>
   46a4c:	0085c83a 	sub	r2,zero,r2
   46a50:	f800283a 	ret
   46a54:	014bc83a 	sub	r5,zero,r5
   46a58:	003fec06 	br	46a0c <__alt_data_end+0xfffd5ccc>
   46a5c:	0109c83a 	sub	r4,zero,r4
   46a60:	01c00044 	movi	r7,1
   46a64:	003fe706 	br	46a04 <__alt_data_end+0xfffd5cc4>
   46a68:	00c00044 	movi	r3,1
   46a6c:	003ff106 	br	46a34 <__alt_data_end+0xfffd5cf4>

00046a70 <__udivsi3>:
   46a70:	200d883a 	mov	r6,r4
   46a74:	2900152e 	bgeu	r5,r4,46acc <__udivsi3+0x5c>
   46a78:	28001416 	blt	r5,zero,46acc <__udivsi3+0x5c>
   46a7c:	00800804 	movi	r2,32
   46a80:	00c00044 	movi	r3,1
   46a84:	00000206 	br	46a90 <__udivsi3+0x20>
   46a88:	10000e26 	beq	r2,zero,46ac4 <__udivsi3+0x54>
   46a8c:	28000516 	blt	r5,zero,46aa4 <__udivsi3+0x34>
   46a90:	294b883a 	add	r5,r5,r5
   46a94:	10bfffc4 	addi	r2,r2,-1
   46a98:	18c7883a 	add	r3,r3,r3
   46a9c:	293ffa36 	bltu	r5,r4,46a88 <__alt_data_end+0xfffd5d48>
   46aa0:	18000826 	beq	r3,zero,46ac4 <__udivsi3+0x54>
   46aa4:	0005883a 	mov	r2,zero
   46aa8:	31400236 	bltu	r6,r5,46ab4 <__udivsi3+0x44>
   46aac:	314dc83a 	sub	r6,r6,r5
   46ab0:	10c4b03a 	or	r2,r2,r3
   46ab4:	1806d07a 	srli	r3,r3,1
   46ab8:	280ad07a 	srli	r5,r5,1
   46abc:	183ffa1e 	bne	r3,zero,46aa8 <__alt_data_end+0xfffd5d68>
   46ac0:	f800283a 	ret
   46ac4:	0005883a 	mov	r2,zero
   46ac8:	f800283a 	ret
   46acc:	00c00044 	movi	r3,1
   46ad0:	003ff406 	br	46aa4 <__alt_data_end+0xfffd5d64>

00046ad4 <__umodsi3>:
   46ad4:	2005883a 	mov	r2,r4
   46ad8:	2900122e 	bgeu	r5,r4,46b24 <__umodsi3+0x50>
   46adc:	28001116 	blt	r5,zero,46b24 <__umodsi3+0x50>
   46ae0:	01800804 	movi	r6,32
   46ae4:	00c00044 	movi	r3,1
   46ae8:	00000206 	br	46af4 <__umodsi3+0x20>
   46aec:	30000c26 	beq	r6,zero,46b20 <__umodsi3+0x4c>
   46af0:	28000516 	blt	r5,zero,46b08 <__umodsi3+0x34>
   46af4:	294b883a 	add	r5,r5,r5
   46af8:	31bfffc4 	addi	r6,r6,-1
   46afc:	18c7883a 	add	r3,r3,r3
   46b00:	293ffa36 	bltu	r5,r4,46aec <__alt_data_end+0xfffd5dac>
   46b04:	18000626 	beq	r3,zero,46b20 <__umodsi3+0x4c>
   46b08:	1806d07a 	srli	r3,r3,1
   46b0c:	11400136 	bltu	r2,r5,46b14 <__umodsi3+0x40>
   46b10:	1145c83a 	sub	r2,r2,r5
   46b14:	280ad07a 	srli	r5,r5,1
   46b18:	183ffb1e 	bne	r3,zero,46b08 <__alt_data_end+0xfffd5dc8>
   46b1c:	f800283a 	ret
   46b20:	f800283a 	ret
   46b24:	00c00044 	movi	r3,1
   46b28:	003ff706 	br	46b08 <__alt_data_end+0xfffd5dc8>

00046b2c <__mulsi3>:
   46b2c:	0005883a 	mov	r2,zero
   46b30:	20000726 	beq	r4,zero,46b50 <__mulsi3+0x24>
   46b34:	20c0004c 	andi	r3,r4,1
   46b38:	2008d07a 	srli	r4,r4,1
   46b3c:	18000126 	beq	r3,zero,46b44 <__mulsi3+0x18>
   46b40:	1145883a 	add	r2,r2,r5
   46b44:	294b883a 	add	r5,r5,r5
   46b48:	203ffa1e 	bne	r4,zero,46b34 <__alt_data_end+0xfffd5df4>
   46b4c:	f800283a 	ret
   46b50:	f800283a 	ret

00046b54 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   46b54:	defffd04 	addi	sp,sp,-12
   46b58:	df000215 	stw	fp,8(sp)
   46b5c:	df000204 	addi	fp,sp,8
   46b60:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   46b64:	0001883a 	nop
   46b68:	e0bfff17 	ldw	r2,-4(fp)
   46b6c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   46b70:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   46b74:	10000226 	beq	r2,zero,46b80 <_exit+0x2c>
    ALT_SIM_FAIL();
   46b78:	002af070 	cmpltui	zero,zero,43969
   46b7c:	00000106 	br	46b84 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   46b80:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   46b84:	003fff06 	br	46b84 <__alt_data_end+0xfffd5e44>

00046b88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   46b88:	defffe04 	addi	sp,sp,-8
   46b8c:	dfc00115 	stw	ra,4(sp)
   46b90:	df000015 	stw	fp,0(sp)
   46b94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   46b98:	00800174 	movhi	r2,5
   46b9c:	10a34604 	addi	r2,r2,-29416
   46ba0:	10800017 	ldw	r2,0(r2)
   46ba4:	10000526 	beq	r2,zero,46bbc <alt_get_errno+0x34>
   46ba8:	00800174 	movhi	r2,5
   46bac:	10a34604 	addi	r2,r2,-29416
   46bb0:	10800017 	ldw	r2,0(r2)
   46bb4:	103ee83a 	callr	r2
   46bb8:	00000206 	br	46bc4 <alt_get_errno+0x3c>
   46bbc:	00800174 	movhi	r2,5
   46bc0:	10aa0004 	addi	r2,r2,-22528
}
   46bc4:	e037883a 	mov	sp,fp
   46bc8:	dfc00117 	ldw	ra,4(sp)
   46bcc:	df000017 	ldw	fp,0(sp)
   46bd0:	dec00204 	addi	sp,sp,8
   46bd4:	f800283a 	ret

00046bd8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   46bd8:	defffb04 	addi	sp,sp,-20
   46bdc:	dfc00415 	stw	ra,16(sp)
   46be0:	df000315 	stw	fp,12(sp)
   46be4:	df000304 	addi	fp,sp,12
   46be8:	e13ffe15 	stw	r4,-8(fp)
   46bec:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   46bf0:	e0bffe17 	ldw	r2,-8(fp)
   46bf4:	10000816 	blt	r2,zero,46c18 <fstat+0x40>
   46bf8:	01400304 	movi	r5,12
   46bfc:	e13ffe17 	ldw	r4,-8(fp)
   46c00:	0046b2c0 	call	46b2c <__mulsi3>
   46c04:	1007883a 	mov	r3,r2
   46c08:	00800174 	movhi	r2,5
   46c0c:	10a0d604 	addi	r2,r2,-31912
   46c10:	1885883a 	add	r2,r3,r2
   46c14:	00000106 	br	46c1c <fstat+0x44>
   46c18:	0005883a 	mov	r2,zero
   46c1c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   46c20:	e0bffd17 	ldw	r2,-12(fp)
   46c24:	10001026 	beq	r2,zero,46c68 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   46c28:	e0bffd17 	ldw	r2,-12(fp)
   46c2c:	10800017 	ldw	r2,0(r2)
   46c30:	10800817 	ldw	r2,32(r2)
   46c34:	10000726 	beq	r2,zero,46c54 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   46c38:	e0bffd17 	ldw	r2,-12(fp)
   46c3c:	10800017 	ldw	r2,0(r2)
   46c40:	10800817 	ldw	r2,32(r2)
   46c44:	e17fff17 	ldw	r5,-4(fp)
   46c48:	e13ffd17 	ldw	r4,-12(fp)
   46c4c:	103ee83a 	callr	r2
   46c50:	00000a06 	br	46c7c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   46c54:	e0bfff17 	ldw	r2,-4(fp)
   46c58:	00c80004 	movi	r3,8192
   46c5c:	10c00115 	stw	r3,4(r2)
      return 0;
   46c60:	0005883a 	mov	r2,zero
   46c64:	00000506 	br	46c7c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   46c68:	0046b880 	call	46b88 <alt_get_errno>
   46c6c:	1007883a 	mov	r3,r2
   46c70:	00801444 	movi	r2,81
   46c74:	18800015 	stw	r2,0(r3)
    return -1;
   46c78:	00bfffc4 	movi	r2,-1
  }
}
   46c7c:	e037883a 	mov	sp,fp
   46c80:	dfc00117 	ldw	ra,4(sp)
   46c84:	df000017 	ldw	fp,0(sp)
   46c88:	dec00204 	addi	sp,sp,8
   46c8c:	f800283a 	ret

00046c90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   46c90:	defffe04 	addi	sp,sp,-8
   46c94:	dfc00115 	stw	ra,4(sp)
   46c98:	df000015 	stw	fp,0(sp)
   46c9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   46ca0:	00800174 	movhi	r2,5
   46ca4:	10a34604 	addi	r2,r2,-29416
   46ca8:	10800017 	ldw	r2,0(r2)
   46cac:	10000526 	beq	r2,zero,46cc4 <alt_get_errno+0x34>
   46cb0:	00800174 	movhi	r2,5
   46cb4:	10a34604 	addi	r2,r2,-29416
   46cb8:	10800017 	ldw	r2,0(r2)
   46cbc:	103ee83a 	callr	r2
   46cc0:	00000206 	br	46ccc <alt_get_errno+0x3c>
   46cc4:	00800174 	movhi	r2,5
   46cc8:	10aa0004 	addi	r2,r2,-22528
}
   46ccc:	e037883a 	mov	sp,fp
   46cd0:	dfc00117 	ldw	ra,4(sp)
   46cd4:	df000017 	ldw	fp,0(sp)
   46cd8:	dec00204 	addi	sp,sp,8
   46cdc:	f800283a 	ret

00046ce0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   46ce0:	deffed04 	addi	sp,sp,-76
   46ce4:	dfc01215 	stw	ra,72(sp)
   46ce8:	df001115 	stw	fp,68(sp)
   46cec:	df001104 	addi	fp,sp,68
   46cf0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   46cf4:	e0bfff17 	ldw	r2,-4(fp)
   46cf8:	10000816 	blt	r2,zero,46d1c <isatty+0x3c>
   46cfc:	01400304 	movi	r5,12
   46d00:	e13fff17 	ldw	r4,-4(fp)
   46d04:	0046b2c0 	call	46b2c <__mulsi3>
   46d08:	1007883a 	mov	r3,r2
   46d0c:	00800174 	movhi	r2,5
   46d10:	10a0d604 	addi	r2,r2,-31912
   46d14:	1885883a 	add	r2,r3,r2
   46d18:	00000106 	br	46d20 <isatty+0x40>
   46d1c:	0005883a 	mov	r2,zero
   46d20:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   46d24:	e0bfef17 	ldw	r2,-68(fp)
   46d28:	10000e26 	beq	r2,zero,46d64 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   46d2c:	e0bfef17 	ldw	r2,-68(fp)
   46d30:	10800017 	ldw	r2,0(r2)
   46d34:	10800817 	ldw	r2,32(r2)
   46d38:	1000021e 	bne	r2,zero,46d44 <isatty+0x64>
    {
      return 1;
   46d3c:	00800044 	movi	r2,1
   46d40:	00000d06 	br	46d78 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   46d44:	e0bff004 	addi	r2,fp,-64
   46d48:	100b883a 	mov	r5,r2
   46d4c:	e13fff17 	ldw	r4,-4(fp)
   46d50:	0046bd80 	call	46bd8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   46d54:	e0bff117 	ldw	r2,-60(fp)
   46d58:	10880020 	cmpeqi	r2,r2,8192
   46d5c:	10803fcc 	andi	r2,r2,255
   46d60:	00000506 	br	46d78 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   46d64:	0046c900 	call	46c90 <alt_get_errno>
   46d68:	1007883a 	mov	r3,r2
   46d6c:	00801444 	movi	r2,81
   46d70:	18800015 	stw	r2,0(r3)
    return 0;
   46d74:	0005883a 	mov	r2,zero
  }
}
   46d78:	e037883a 	mov	sp,fp
   46d7c:	dfc00117 	ldw	ra,4(sp)
   46d80:	df000017 	ldw	fp,0(sp)
   46d84:	dec00204 	addi	sp,sp,8
   46d88:	f800283a 	ret

00046d8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   46d8c:	defffe04 	addi	sp,sp,-8
   46d90:	dfc00115 	stw	ra,4(sp)
   46d94:	df000015 	stw	fp,0(sp)
   46d98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   46d9c:	00800174 	movhi	r2,5
   46da0:	10a34604 	addi	r2,r2,-29416
   46da4:	10800017 	ldw	r2,0(r2)
   46da8:	10000526 	beq	r2,zero,46dc0 <alt_get_errno+0x34>
   46dac:	00800174 	movhi	r2,5
   46db0:	10a34604 	addi	r2,r2,-29416
   46db4:	10800017 	ldw	r2,0(r2)
   46db8:	103ee83a 	callr	r2
   46dbc:	00000206 	br	46dc8 <alt_get_errno+0x3c>
   46dc0:	00800174 	movhi	r2,5
   46dc4:	10aa0004 	addi	r2,r2,-22528
}
   46dc8:	e037883a 	mov	sp,fp
   46dcc:	dfc00117 	ldw	ra,4(sp)
   46dd0:	df000017 	ldw	fp,0(sp)
   46dd4:	dec00204 	addi	sp,sp,8
   46dd8:	f800283a 	ret

00046ddc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   46ddc:	defff904 	addi	sp,sp,-28
   46de0:	dfc00615 	stw	ra,24(sp)
   46de4:	df000515 	stw	fp,20(sp)
   46de8:	df000504 	addi	fp,sp,20
   46dec:	e13ffd15 	stw	r4,-12(fp)
   46df0:	e17ffe15 	stw	r5,-8(fp)
   46df4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   46df8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   46dfc:	e0bffd17 	ldw	r2,-12(fp)
   46e00:	10000816 	blt	r2,zero,46e24 <lseek+0x48>
   46e04:	01400304 	movi	r5,12
   46e08:	e13ffd17 	ldw	r4,-12(fp)
   46e0c:	0046b2c0 	call	46b2c <__mulsi3>
   46e10:	1007883a 	mov	r3,r2
   46e14:	00800174 	movhi	r2,5
   46e18:	10a0d604 	addi	r2,r2,-31912
   46e1c:	1885883a 	add	r2,r3,r2
   46e20:	00000106 	br	46e28 <lseek+0x4c>
   46e24:	0005883a 	mov	r2,zero
   46e28:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   46e2c:	e0bffc17 	ldw	r2,-16(fp)
   46e30:	10001026 	beq	r2,zero,46e74 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   46e34:	e0bffc17 	ldw	r2,-16(fp)
   46e38:	10800017 	ldw	r2,0(r2)
   46e3c:	10800717 	ldw	r2,28(r2)
   46e40:	10000926 	beq	r2,zero,46e68 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   46e44:	e0bffc17 	ldw	r2,-16(fp)
   46e48:	10800017 	ldw	r2,0(r2)
   46e4c:	10800717 	ldw	r2,28(r2)
   46e50:	e1bfff17 	ldw	r6,-4(fp)
   46e54:	e17ffe17 	ldw	r5,-8(fp)
   46e58:	e13ffc17 	ldw	r4,-16(fp)
   46e5c:	103ee83a 	callr	r2
   46e60:	e0bffb15 	stw	r2,-20(fp)
   46e64:	00000506 	br	46e7c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   46e68:	00bfde84 	movi	r2,-134
   46e6c:	e0bffb15 	stw	r2,-20(fp)
   46e70:	00000206 	br	46e7c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   46e74:	00bfebc4 	movi	r2,-81
   46e78:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   46e7c:	e0bffb17 	ldw	r2,-20(fp)
   46e80:	1000070e 	bge	r2,zero,46ea0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   46e84:	0046d8c0 	call	46d8c <alt_get_errno>
   46e88:	1007883a 	mov	r3,r2
   46e8c:	e0bffb17 	ldw	r2,-20(fp)
   46e90:	0085c83a 	sub	r2,zero,r2
   46e94:	18800015 	stw	r2,0(r3)
    rc = -1;
   46e98:	00bfffc4 	movi	r2,-1
   46e9c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   46ea0:	e0bffb17 	ldw	r2,-20(fp)
}
   46ea4:	e037883a 	mov	sp,fp
   46ea8:	dfc00117 	ldw	ra,4(sp)
   46eac:	df000017 	ldw	fp,0(sp)
   46eb0:	dec00204 	addi	sp,sp,8
   46eb4:	f800283a 	ret

00046eb8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   46eb8:	defffe04 	addi	sp,sp,-8
   46ebc:	df000115 	stw	fp,4(sp)
   46ec0:	df000104 	addi	fp,sp,4
   46ec4:	e13fff15 	stw	r4,-4(fp)
}
   46ec8:	0001883a 	nop
   46ecc:	e037883a 	mov	sp,fp
   46ed0:	df000017 	ldw	fp,0(sp)
   46ed4:	dec00104 	addi	sp,sp,4
   46ed8:	f800283a 	ret

00046edc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   46edc:	defffe04 	addi	sp,sp,-8
   46ee0:	df000115 	stw	fp,4(sp)
   46ee4:	df000104 	addi	fp,sp,4
   46ee8:	e13fff15 	stw	r4,-4(fp)
}
   46eec:	0001883a 	nop
   46ef0:	e037883a 	mov	sp,fp
   46ef4:	df000017 	ldw	fp,0(sp)
   46ef8:	dec00104 	addi	sp,sp,4
   46efc:	f800283a 	ret

00046f00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   46f00:	defffe04 	addi	sp,sp,-8
   46f04:	dfc00115 	stw	ra,4(sp)
   46f08:	df000015 	stw	fp,0(sp)
   46f0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   46f10:	00800174 	movhi	r2,5
   46f14:	10a34604 	addi	r2,r2,-29416
   46f18:	10800017 	ldw	r2,0(r2)
   46f1c:	10000526 	beq	r2,zero,46f34 <alt_get_errno+0x34>
   46f20:	00800174 	movhi	r2,5
   46f24:	10a34604 	addi	r2,r2,-29416
   46f28:	10800017 	ldw	r2,0(r2)
   46f2c:	103ee83a 	callr	r2
   46f30:	00000206 	br	46f3c <alt_get_errno+0x3c>
   46f34:	00800174 	movhi	r2,5
   46f38:	10aa0004 	addi	r2,r2,-22528
}
   46f3c:	e037883a 	mov	sp,fp
   46f40:	dfc00117 	ldw	ra,4(sp)
   46f44:	df000017 	ldw	fp,0(sp)
   46f48:	dec00204 	addi	sp,sp,8
   46f4c:	f800283a 	ret

00046f50 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   46f50:	defff904 	addi	sp,sp,-28
   46f54:	dfc00615 	stw	ra,24(sp)
   46f58:	df000515 	stw	fp,20(sp)
   46f5c:	df000504 	addi	fp,sp,20
   46f60:	e13ffd15 	stw	r4,-12(fp)
   46f64:	e17ffe15 	stw	r5,-8(fp)
   46f68:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   46f6c:	e0bffd17 	ldw	r2,-12(fp)
   46f70:	10000816 	blt	r2,zero,46f94 <read+0x44>
   46f74:	01400304 	movi	r5,12
   46f78:	e13ffd17 	ldw	r4,-12(fp)
   46f7c:	0046b2c0 	call	46b2c <__mulsi3>
   46f80:	1007883a 	mov	r3,r2
   46f84:	00800174 	movhi	r2,5
   46f88:	10a0d604 	addi	r2,r2,-31912
   46f8c:	1885883a 	add	r2,r3,r2
   46f90:	00000106 	br	46f98 <read+0x48>
   46f94:	0005883a 	mov	r2,zero
   46f98:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   46f9c:	e0bffb17 	ldw	r2,-20(fp)
   46fa0:	10002226 	beq	r2,zero,4702c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   46fa4:	e0bffb17 	ldw	r2,-20(fp)
   46fa8:	10800217 	ldw	r2,8(r2)
   46fac:	108000cc 	andi	r2,r2,3
   46fb0:	10800060 	cmpeqi	r2,r2,1
   46fb4:	1000181e 	bne	r2,zero,47018 <read+0xc8>
        (fd->dev->read))
   46fb8:	e0bffb17 	ldw	r2,-20(fp)
   46fbc:	10800017 	ldw	r2,0(r2)
   46fc0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   46fc4:	10001426 	beq	r2,zero,47018 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   46fc8:	e0bffb17 	ldw	r2,-20(fp)
   46fcc:	10800017 	ldw	r2,0(r2)
   46fd0:	10800517 	ldw	r2,20(r2)
   46fd4:	e0ffff17 	ldw	r3,-4(fp)
   46fd8:	180d883a 	mov	r6,r3
   46fdc:	e17ffe17 	ldw	r5,-8(fp)
   46fe0:	e13ffb17 	ldw	r4,-20(fp)
   46fe4:	103ee83a 	callr	r2
   46fe8:	e0bffc15 	stw	r2,-16(fp)
   46fec:	e0bffc17 	ldw	r2,-16(fp)
   46ff0:	1000070e 	bge	r2,zero,47010 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   46ff4:	0046f000 	call	46f00 <alt_get_errno>
   46ff8:	1007883a 	mov	r3,r2
   46ffc:	e0bffc17 	ldw	r2,-16(fp)
   47000:	0085c83a 	sub	r2,zero,r2
   47004:	18800015 	stw	r2,0(r3)
          return -1;
   47008:	00bfffc4 	movi	r2,-1
   4700c:	00000c06 	br	47040 <read+0xf0>
        }
        return rval;
   47010:	e0bffc17 	ldw	r2,-16(fp)
   47014:	00000a06 	br	47040 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   47018:	0046f000 	call	46f00 <alt_get_errno>
   4701c:	1007883a 	mov	r3,r2
   47020:	00800344 	movi	r2,13
   47024:	18800015 	stw	r2,0(r3)
   47028:	00000406 	br	4703c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4702c:	0046f000 	call	46f00 <alt_get_errno>
   47030:	1007883a 	mov	r3,r2
   47034:	00801444 	movi	r2,81
   47038:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4703c:	00bfffc4 	movi	r2,-1
}
   47040:	e037883a 	mov	sp,fp
   47044:	dfc00117 	ldw	ra,4(sp)
   47048:	df000017 	ldw	fp,0(sp)
   4704c:	dec00204 	addi	sp,sp,8
   47050:	f800283a 	ret

00047054 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   47054:	defff904 	addi	sp,sp,-28
   47058:	df000615 	stw	fp,24(sp)
   4705c:	df000604 	addi	fp,sp,24
   47060:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   47064:	0005303a 	rdctl	r2,status
   47068:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4706c:	e0fffe17 	ldw	r3,-8(fp)
   47070:	00bfff84 	movi	r2,-2
   47074:	1884703a 	and	r2,r3,r2
   47078:	1001703a 	wrctl	status,r2
  
  return context;
   4707c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   47080:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   47084:	d0a00d17 	ldw	r2,-32716(gp)
   47088:	10c000c4 	addi	r3,r2,3
   4708c:	00bfff04 	movi	r2,-4
   47090:	1884703a 	and	r2,r3,r2
   47094:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   47098:	d0e00d17 	ldw	r3,-32716(gp)
   4709c:	e0bfff17 	ldw	r2,-4(fp)
   470a0:	1887883a 	add	r3,r3,r2
   470a4:	008001f4 	movhi	r2,7
   470a8:	10835004 	addi	r2,r2,3392
   470ac:	10c0062e 	bgeu	r2,r3,470c8 <sbrk+0x74>
   470b0:	e0bffb17 	ldw	r2,-20(fp)
   470b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   470b8:	e0bffa17 	ldw	r2,-24(fp)
   470bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   470c0:	00bfffc4 	movi	r2,-1
   470c4:	00000b06 	br	470f4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   470c8:	d0a00d17 	ldw	r2,-32716(gp)
   470cc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   470d0:	d0e00d17 	ldw	r3,-32716(gp)
   470d4:	e0bfff17 	ldw	r2,-4(fp)
   470d8:	1885883a 	add	r2,r3,r2
   470dc:	d0a00d15 	stw	r2,-32716(gp)
   470e0:	e0bffb17 	ldw	r2,-20(fp)
   470e4:	e0bffc15 	stw	r2,-16(fp)
   470e8:	e0bffc17 	ldw	r2,-16(fp)
   470ec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   470f0:	e0bffd17 	ldw	r2,-12(fp)
} 
   470f4:	e037883a 	mov	sp,fp
   470f8:	df000017 	ldw	fp,0(sp)
   470fc:	dec00104 	addi	sp,sp,4
   47100:	f800283a 	ret

00047104 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   47104:	defffe04 	addi	sp,sp,-8
   47108:	dfc00115 	stw	ra,4(sp)
   4710c:	df000015 	stw	fp,0(sp)
   47110:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   47114:	00800174 	movhi	r2,5
   47118:	10a34604 	addi	r2,r2,-29416
   4711c:	10800017 	ldw	r2,0(r2)
   47120:	10000526 	beq	r2,zero,47138 <alt_get_errno+0x34>
   47124:	00800174 	movhi	r2,5
   47128:	10a34604 	addi	r2,r2,-29416
   4712c:	10800017 	ldw	r2,0(r2)
   47130:	103ee83a 	callr	r2
   47134:	00000206 	br	47140 <alt_get_errno+0x3c>
   47138:	00800174 	movhi	r2,5
   4713c:	10aa0004 	addi	r2,r2,-22528
}
   47140:	e037883a 	mov	sp,fp
   47144:	dfc00117 	ldw	ra,4(sp)
   47148:	df000017 	ldw	fp,0(sp)
   4714c:	dec00204 	addi	sp,sp,8
   47150:	f800283a 	ret

00047154 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   47154:	defff904 	addi	sp,sp,-28
   47158:	dfc00615 	stw	ra,24(sp)
   4715c:	df000515 	stw	fp,20(sp)
   47160:	df000504 	addi	fp,sp,20
   47164:	e13ffd15 	stw	r4,-12(fp)
   47168:	e17ffe15 	stw	r5,-8(fp)
   4716c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   47170:	e0bffd17 	ldw	r2,-12(fp)
   47174:	10000816 	blt	r2,zero,47198 <write+0x44>
   47178:	01400304 	movi	r5,12
   4717c:	e13ffd17 	ldw	r4,-12(fp)
   47180:	0046b2c0 	call	46b2c <__mulsi3>
   47184:	1007883a 	mov	r3,r2
   47188:	00800174 	movhi	r2,5
   4718c:	10a0d604 	addi	r2,r2,-31912
   47190:	1885883a 	add	r2,r3,r2
   47194:	00000106 	br	4719c <write+0x48>
   47198:	0005883a 	mov	r2,zero
   4719c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   471a0:	e0bffb17 	ldw	r2,-20(fp)
   471a4:	10002126 	beq	r2,zero,4722c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   471a8:	e0bffb17 	ldw	r2,-20(fp)
   471ac:	10800217 	ldw	r2,8(r2)
   471b0:	108000cc 	andi	r2,r2,3
   471b4:	10001826 	beq	r2,zero,47218 <write+0xc4>
   471b8:	e0bffb17 	ldw	r2,-20(fp)
   471bc:	10800017 	ldw	r2,0(r2)
   471c0:	10800617 	ldw	r2,24(r2)
   471c4:	10001426 	beq	r2,zero,47218 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   471c8:	e0bffb17 	ldw	r2,-20(fp)
   471cc:	10800017 	ldw	r2,0(r2)
   471d0:	10800617 	ldw	r2,24(r2)
   471d4:	e0ffff17 	ldw	r3,-4(fp)
   471d8:	180d883a 	mov	r6,r3
   471dc:	e17ffe17 	ldw	r5,-8(fp)
   471e0:	e13ffb17 	ldw	r4,-20(fp)
   471e4:	103ee83a 	callr	r2
   471e8:	e0bffc15 	stw	r2,-16(fp)
   471ec:	e0bffc17 	ldw	r2,-16(fp)
   471f0:	1000070e 	bge	r2,zero,47210 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   471f4:	00471040 	call	47104 <alt_get_errno>
   471f8:	1007883a 	mov	r3,r2
   471fc:	e0bffc17 	ldw	r2,-16(fp)
   47200:	0085c83a 	sub	r2,zero,r2
   47204:	18800015 	stw	r2,0(r3)
        return -1;
   47208:	00bfffc4 	movi	r2,-1
   4720c:	00000c06 	br	47240 <write+0xec>
      }
      return rval;
   47210:	e0bffc17 	ldw	r2,-16(fp)
   47214:	00000a06 	br	47240 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   47218:	00471040 	call	47104 <alt_get_errno>
   4721c:	1007883a 	mov	r3,r2
   47220:	00800344 	movi	r2,13
   47224:	18800015 	stw	r2,0(r3)
   47228:	00000406 	br	4723c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4722c:	00471040 	call	47104 <alt_get_errno>
   47230:	1007883a 	mov	r3,r2
   47234:	00801444 	movi	r2,81
   47238:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4723c:	00bfffc4 	movi	r2,-1
}
   47240:	e037883a 	mov	sp,fp
   47244:	dfc00117 	ldw	ra,4(sp)
   47248:	df000017 	ldw	fp,0(sp)
   4724c:	dec00204 	addi	sp,sp,8
   47250:	f800283a 	ret
